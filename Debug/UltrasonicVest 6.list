
UltrasonicVest.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008adc  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000004dc  08008cb0  08008cb0  00018cb0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800918c  0800918c  000201f8  2**0
                  CONTENTS
  4 .ARM          00000008  0800918c  0800918c  0001918c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08009194  08009194  000201f8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08009194  08009194  00019194  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08009198  08009198  00019198  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001f8  20000000  0800919c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000364  200001f8  08009394  000201f8  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000055c  08009394  0002055c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201f8  2**0
                  CONTENTS, READONLY
 12 .debug_info   00011bba  00000000  00000000  00020228  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002435  00000000  00000000  00031de2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000d98  00000000  00000000  00034218  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000ca8  00000000  00000000  00034fb0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000232be  00000000  00000000  00035c58  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00010c71  00000000  00000000  00058f16  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000d2d9d  00000000  00000000  00069b87  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  0013c924  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004a18  00000000  00000000  0013c978  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	200001f8 	.word	0x200001f8
 80001ec:	00000000 	.word	0x00000000
 80001f0:	08008c94 	.word	0x08008c94

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	200001fc 	.word	0x200001fc
 800020c:	08008c94 	.word	0x08008c94

08000210 <strlen>:
 8000210:	4603      	mov	r3, r0
 8000212:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000216:	2a00      	cmp	r2, #0
 8000218:	d1fb      	bne.n	8000212 <strlen+0x2>
 800021a:	1a18      	subs	r0, r3, r0
 800021c:	3801      	subs	r0, #1
 800021e:	4770      	bx	lr

08000220 <memchr>:
 8000220:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000224:	2a10      	cmp	r2, #16
 8000226:	db2b      	blt.n	8000280 <memchr+0x60>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	d008      	beq.n	8000240 <memchr+0x20>
 800022e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000232:	3a01      	subs	r2, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d02d      	beq.n	8000294 <memchr+0x74>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	b342      	cbz	r2, 8000290 <memchr+0x70>
 800023e:	d1f6      	bne.n	800022e <memchr+0xe>
 8000240:	b4f0      	push	{r4, r5, r6, r7}
 8000242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800024a:	f022 0407 	bic.w	r4, r2, #7
 800024e:	f07f 0700 	mvns.w	r7, #0
 8000252:	2300      	movs	r3, #0
 8000254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000258:	3c08      	subs	r4, #8
 800025a:	ea85 0501 	eor.w	r5, r5, r1
 800025e:	ea86 0601 	eor.w	r6, r6, r1
 8000262:	fa85 f547 	uadd8	r5, r5, r7
 8000266:	faa3 f587 	sel	r5, r3, r7
 800026a:	fa86 f647 	uadd8	r6, r6, r7
 800026e:	faa5 f687 	sel	r6, r5, r7
 8000272:	b98e      	cbnz	r6, 8000298 <memchr+0x78>
 8000274:	d1ee      	bne.n	8000254 <memchr+0x34>
 8000276:	bcf0      	pop	{r4, r5, r6, r7}
 8000278:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800027c:	f002 0207 	and.w	r2, r2, #7
 8000280:	b132      	cbz	r2, 8000290 <memchr+0x70>
 8000282:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000286:	3a01      	subs	r2, #1
 8000288:	ea83 0301 	eor.w	r3, r3, r1
 800028c:	b113      	cbz	r3, 8000294 <memchr+0x74>
 800028e:	d1f8      	bne.n	8000282 <memchr+0x62>
 8000290:	2000      	movs	r0, #0
 8000292:	4770      	bx	lr
 8000294:	3801      	subs	r0, #1
 8000296:	4770      	bx	lr
 8000298:	2d00      	cmp	r5, #0
 800029a:	bf06      	itte	eq
 800029c:	4635      	moveq	r5, r6
 800029e:	3803      	subeq	r0, #3
 80002a0:	3807      	subne	r0, #7
 80002a2:	f015 0f01 	tst.w	r5, #1
 80002a6:	d107      	bne.n	80002b8 <memchr+0x98>
 80002a8:	3001      	adds	r0, #1
 80002aa:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002ae:	bf02      	ittt	eq
 80002b0:	3001      	addeq	r0, #1
 80002b2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002b6:	3001      	addeq	r0, #1
 80002b8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ba:	3801      	subs	r0, #1
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop

080002c0 <__aeabi_drsub>:
 80002c0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002c4:	e002      	b.n	80002cc <__adddf3>
 80002c6:	bf00      	nop

080002c8 <__aeabi_dsub>:
 80002c8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002cc <__adddf3>:
 80002cc:	b530      	push	{r4, r5, lr}
 80002ce:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002d2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002d6:	ea94 0f05 	teq	r4, r5
 80002da:	bf08      	it	eq
 80002dc:	ea90 0f02 	teqeq	r0, r2
 80002e0:	bf1f      	itttt	ne
 80002e2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002e6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ea:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ee:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002f2:	f000 80e2 	beq.w	80004ba <__adddf3+0x1ee>
 80002f6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002fa:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002fe:	bfb8      	it	lt
 8000300:	426d      	neglt	r5, r5
 8000302:	dd0c      	ble.n	800031e <__adddf3+0x52>
 8000304:	442c      	add	r4, r5
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	ea82 0000 	eor.w	r0, r2, r0
 8000312:	ea83 0101 	eor.w	r1, r3, r1
 8000316:	ea80 0202 	eor.w	r2, r0, r2
 800031a:	ea81 0303 	eor.w	r3, r1, r3
 800031e:	2d36      	cmp	r5, #54	; 0x36
 8000320:	bf88      	it	hi
 8000322:	bd30      	pophi	{r4, r5, pc}
 8000324:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000328:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800032c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000330:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000334:	d002      	beq.n	800033c <__adddf3+0x70>
 8000336:	4240      	negs	r0, r0
 8000338:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800033c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000340:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000344:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000348:	d002      	beq.n	8000350 <__adddf3+0x84>
 800034a:	4252      	negs	r2, r2
 800034c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000350:	ea94 0f05 	teq	r4, r5
 8000354:	f000 80a7 	beq.w	80004a6 <__adddf3+0x1da>
 8000358:	f1a4 0401 	sub.w	r4, r4, #1
 800035c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000360:	db0d      	blt.n	800037e <__adddf3+0xb2>
 8000362:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000366:	fa22 f205 	lsr.w	r2, r2, r5
 800036a:	1880      	adds	r0, r0, r2
 800036c:	f141 0100 	adc.w	r1, r1, #0
 8000370:	fa03 f20e 	lsl.w	r2, r3, lr
 8000374:	1880      	adds	r0, r0, r2
 8000376:	fa43 f305 	asr.w	r3, r3, r5
 800037a:	4159      	adcs	r1, r3
 800037c:	e00e      	b.n	800039c <__adddf3+0xd0>
 800037e:	f1a5 0520 	sub.w	r5, r5, #32
 8000382:	f10e 0e20 	add.w	lr, lr, #32
 8000386:	2a01      	cmp	r2, #1
 8000388:	fa03 fc0e 	lsl.w	ip, r3, lr
 800038c:	bf28      	it	cs
 800038e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000392:	fa43 f305 	asr.w	r3, r3, r5
 8000396:	18c0      	adds	r0, r0, r3
 8000398:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800039c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003a0:	d507      	bpl.n	80003b2 <__adddf3+0xe6>
 80003a2:	f04f 0e00 	mov.w	lr, #0
 80003a6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003aa:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003ae:	eb6e 0101 	sbc.w	r1, lr, r1
 80003b2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003b6:	d31b      	bcc.n	80003f0 <__adddf3+0x124>
 80003b8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003bc:	d30c      	bcc.n	80003d8 <__adddf3+0x10c>
 80003be:	0849      	lsrs	r1, r1, #1
 80003c0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003c4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003c8:	f104 0401 	add.w	r4, r4, #1
 80003cc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003d0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003d4:	f080 809a 	bcs.w	800050c <__adddf3+0x240>
 80003d8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003dc:	bf08      	it	eq
 80003de:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003e2:	f150 0000 	adcs.w	r0, r0, #0
 80003e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ea:	ea41 0105 	orr.w	r1, r1, r5
 80003ee:	bd30      	pop	{r4, r5, pc}
 80003f0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003f4:	4140      	adcs	r0, r0
 80003f6:	eb41 0101 	adc.w	r1, r1, r1
 80003fa:	3c01      	subs	r4, #1
 80003fc:	bf28      	it	cs
 80003fe:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000402:	d2e9      	bcs.n	80003d8 <__adddf3+0x10c>
 8000404:	f091 0f00 	teq	r1, #0
 8000408:	bf04      	itt	eq
 800040a:	4601      	moveq	r1, r0
 800040c:	2000      	moveq	r0, #0
 800040e:	fab1 f381 	clz	r3, r1
 8000412:	bf08      	it	eq
 8000414:	3320      	addeq	r3, #32
 8000416:	f1a3 030b 	sub.w	r3, r3, #11
 800041a:	f1b3 0220 	subs.w	r2, r3, #32
 800041e:	da0c      	bge.n	800043a <__adddf3+0x16e>
 8000420:	320c      	adds	r2, #12
 8000422:	dd08      	ble.n	8000436 <__adddf3+0x16a>
 8000424:	f102 0c14 	add.w	ip, r2, #20
 8000428:	f1c2 020c 	rsb	r2, r2, #12
 800042c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000430:	fa21 f102 	lsr.w	r1, r1, r2
 8000434:	e00c      	b.n	8000450 <__adddf3+0x184>
 8000436:	f102 0214 	add.w	r2, r2, #20
 800043a:	bfd8      	it	le
 800043c:	f1c2 0c20 	rsble	ip, r2, #32
 8000440:	fa01 f102 	lsl.w	r1, r1, r2
 8000444:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000448:	bfdc      	itt	le
 800044a:	ea41 010c 	orrle.w	r1, r1, ip
 800044e:	4090      	lslle	r0, r2
 8000450:	1ae4      	subs	r4, r4, r3
 8000452:	bfa2      	ittt	ge
 8000454:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000458:	4329      	orrge	r1, r5
 800045a:	bd30      	popge	{r4, r5, pc}
 800045c:	ea6f 0404 	mvn.w	r4, r4
 8000460:	3c1f      	subs	r4, #31
 8000462:	da1c      	bge.n	800049e <__adddf3+0x1d2>
 8000464:	340c      	adds	r4, #12
 8000466:	dc0e      	bgt.n	8000486 <__adddf3+0x1ba>
 8000468:	f104 0414 	add.w	r4, r4, #20
 800046c:	f1c4 0220 	rsb	r2, r4, #32
 8000470:	fa20 f004 	lsr.w	r0, r0, r4
 8000474:	fa01 f302 	lsl.w	r3, r1, r2
 8000478:	ea40 0003 	orr.w	r0, r0, r3
 800047c:	fa21 f304 	lsr.w	r3, r1, r4
 8000480:	ea45 0103 	orr.w	r1, r5, r3
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f1c4 040c 	rsb	r4, r4, #12
 800048a:	f1c4 0220 	rsb	r2, r4, #32
 800048e:	fa20 f002 	lsr.w	r0, r0, r2
 8000492:	fa01 f304 	lsl.w	r3, r1, r4
 8000496:	ea40 0003 	orr.w	r0, r0, r3
 800049a:	4629      	mov	r1, r5
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	fa21 f004 	lsr.w	r0, r1, r4
 80004a2:	4629      	mov	r1, r5
 80004a4:	bd30      	pop	{r4, r5, pc}
 80004a6:	f094 0f00 	teq	r4, #0
 80004aa:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80004ae:	bf06      	itte	eq
 80004b0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004b4:	3401      	addeq	r4, #1
 80004b6:	3d01      	subne	r5, #1
 80004b8:	e74e      	b.n	8000358 <__adddf3+0x8c>
 80004ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004be:	bf18      	it	ne
 80004c0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004c4:	d029      	beq.n	800051a <__adddf3+0x24e>
 80004c6:	ea94 0f05 	teq	r4, r5
 80004ca:	bf08      	it	eq
 80004cc:	ea90 0f02 	teqeq	r0, r2
 80004d0:	d005      	beq.n	80004de <__adddf3+0x212>
 80004d2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004d6:	bf04      	itt	eq
 80004d8:	4619      	moveq	r1, r3
 80004da:	4610      	moveq	r0, r2
 80004dc:	bd30      	pop	{r4, r5, pc}
 80004de:	ea91 0f03 	teq	r1, r3
 80004e2:	bf1e      	ittt	ne
 80004e4:	2100      	movne	r1, #0
 80004e6:	2000      	movne	r0, #0
 80004e8:	bd30      	popne	{r4, r5, pc}
 80004ea:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ee:	d105      	bne.n	80004fc <__adddf3+0x230>
 80004f0:	0040      	lsls	r0, r0, #1
 80004f2:	4149      	adcs	r1, r1
 80004f4:	bf28      	it	cs
 80004f6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004fa:	bd30      	pop	{r4, r5, pc}
 80004fc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000500:	bf3c      	itt	cc
 8000502:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000506:	bd30      	popcc	{r4, r5, pc}
 8000508:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800050c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000510:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000514:	f04f 0000 	mov.w	r0, #0
 8000518:	bd30      	pop	{r4, r5, pc}
 800051a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800051e:	bf1a      	itte	ne
 8000520:	4619      	movne	r1, r3
 8000522:	4610      	movne	r0, r2
 8000524:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000528:	bf1c      	itt	ne
 800052a:	460b      	movne	r3, r1
 800052c:	4602      	movne	r2, r0
 800052e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000532:	bf06      	itte	eq
 8000534:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000538:	ea91 0f03 	teqeq	r1, r3
 800053c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000540:	bd30      	pop	{r4, r5, pc}
 8000542:	bf00      	nop

08000544 <__aeabi_ui2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000558:	f04f 0500 	mov.w	r5, #0
 800055c:	f04f 0100 	mov.w	r1, #0
 8000560:	e750      	b.n	8000404 <__adddf3+0x138>
 8000562:	bf00      	nop

08000564 <__aeabi_i2d>:
 8000564:	f090 0f00 	teq	r0, #0
 8000568:	bf04      	itt	eq
 800056a:	2100      	moveq	r1, #0
 800056c:	4770      	bxeq	lr
 800056e:	b530      	push	{r4, r5, lr}
 8000570:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000574:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000578:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800057c:	bf48      	it	mi
 800057e:	4240      	negmi	r0, r0
 8000580:	f04f 0100 	mov.w	r1, #0
 8000584:	e73e      	b.n	8000404 <__adddf3+0x138>
 8000586:	bf00      	nop

08000588 <__aeabi_f2d>:
 8000588:	0042      	lsls	r2, r0, #1
 800058a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800058e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000592:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000596:	bf1f      	itttt	ne
 8000598:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800059c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80005a0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80005a4:	4770      	bxne	lr
 80005a6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80005aa:	bf08      	it	eq
 80005ac:	4770      	bxeq	lr
 80005ae:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005b2:	bf04      	itt	eq
 80005b4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005b8:	4770      	bxeq	lr
 80005ba:	b530      	push	{r4, r5, lr}
 80005bc:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005c0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005c4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005c8:	e71c      	b.n	8000404 <__adddf3+0x138>
 80005ca:	bf00      	nop

080005cc <__aeabi_ul2d>:
 80005cc:	ea50 0201 	orrs.w	r2, r0, r1
 80005d0:	bf08      	it	eq
 80005d2:	4770      	bxeq	lr
 80005d4:	b530      	push	{r4, r5, lr}
 80005d6:	f04f 0500 	mov.w	r5, #0
 80005da:	e00a      	b.n	80005f2 <__aeabi_l2d+0x16>

080005dc <__aeabi_l2d>:
 80005dc:	ea50 0201 	orrs.w	r2, r0, r1
 80005e0:	bf08      	it	eq
 80005e2:	4770      	bxeq	lr
 80005e4:	b530      	push	{r4, r5, lr}
 80005e6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ea:	d502      	bpl.n	80005f2 <__aeabi_l2d+0x16>
 80005ec:	4240      	negs	r0, r0
 80005ee:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005f2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005f6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005fa:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005fe:	f43f aed8 	beq.w	80003b2 <__adddf3+0xe6>
 8000602:	f04f 0203 	mov.w	r2, #3
 8000606:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800060a:	bf18      	it	ne
 800060c:	3203      	addne	r2, #3
 800060e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000612:	bf18      	it	ne
 8000614:	3203      	addne	r2, #3
 8000616:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800061a:	f1c2 0320 	rsb	r3, r2, #32
 800061e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000622:	fa20 f002 	lsr.w	r0, r0, r2
 8000626:	fa01 fe03 	lsl.w	lr, r1, r3
 800062a:	ea40 000e 	orr.w	r0, r0, lr
 800062e:	fa21 f102 	lsr.w	r1, r1, r2
 8000632:	4414      	add	r4, r2
 8000634:	e6bd      	b.n	80003b2 <__adddf3+0xe6>
 8000636:	bf00      	nop

08000638 <__aeabi_dmul>:
 8000638:	b570      	push	{r4, r5, r6, lr}
 800063a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800063e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000642:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000646:	bf1d      	ittte	ne
 8000648:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800064c:	ea94 0f0c 	teqne	r4, ip
 8000650:	ea95 0f0c 	teqne	r5, ip
 8000654:	f000 f8de 	bleq	8000814 <__aeabi_dmul+0x1dc>
 8000658:	442c      	add	r4, r5
 800065a:	ea81 0603 	eor.w	r6, r1, r3
 800065e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000662:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000666:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800066a:	bf18      	it	ne
 800066c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000670:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000674:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000678:	d038      	beq.n	80006ec <__aeabi_dmul+0xb4>
 800067a:	fba0 ce02 	umull	ip, lr, r0, r2
 800067e:	f04f 0500 	mov.w	r5, #0
 8000682:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000686:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800068a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800068e:	f04f 0600 	mov.w	r6, #0
 8000692:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000696:	f09c 0f00 	teq	ip, #0
 800069a:	bf18      	it	ne
 800069c:	f04e 0e01 	orrne.w	lr, lr, #1
 80006a0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80006a4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80006a8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80006ac:	d204      	bcs.n	80006b8 <__aeabi_dmul+0x80>
 80006ae:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006b2:	416d      	adcs	r5, r5
 80006b4:	eb46 0606 	adc.w	r6, r6, r6
 80006b8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006bc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006c0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006c4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006c8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006cc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006d0:	bf88      	it	hi
 80006d2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006d6:	d81e      	bhi.n	8000716 <__aeabi_dmul+0xde>
 80006d8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006dc:	bf08      	it	eq
 80006de:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006e2:	f150 0000 	adcs.w	r0, r0, #0
 80006e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ea:	bd70      	pop	{r4, r5, r6, pc}
 80006ec:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006f0:	ea46 0101 	orr.w	r1, r6, r1
 80006f4:	ea40 0002 	orr.w	r0, r0, r2
 80006f8:	ea81 0103 	eor.w	r1, r1, r3
 80006fc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000700:	bfc2      	ittt	gt
 8000702:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000706:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800070a:	bd70      	popgt	{r4, r5, r6, pc}
 800070c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000710:	f04f 0e00 	mov.w	lr, #0
 8000714:	3c01      	subs	r4, #1
 8000716:	f300 80ab 	bgt.w	8000870 <__aeabi_dmul+0x238>
 800071a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800071e:	bfde      	ittt	le
 8000720:	2000      	movle	r0, #0
 8000722:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000726:	bd70      	pople	{r4, r5, r6, pc}
 8000728:	f1c4 0400 	rsb	r4, r4, #0
 800072c:	3c20      	subs	r4, #32
 800072e:	da35      	bge.n	800079c <__aeabi_dmul+0x164>
 8000730:	340c      	adds	r4, #12
 8000732:	dc1b      	bgt.n	800076c <__aeabi_dmul+0x134>
 8000734:	f104 0414 	add.w	r4, r4, #20
 8000738:	f1c4 0520 	rsb	r5, r4, #32
 800073c:	fa00 f305 	lsl.w	r3, r0, r5
 8000740:	fa20 f004 	lsr.w	r0, r0, r4
 8000744:	fa01 f205 	lsl.w	r2, r1, r5
 8000748:	ea40 0002 	orr.w	r0, r0, r2
 800074c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000750:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000754:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000758:	fa21 f604 	lsr.w	r6, r1, r4
 800075c:	eb42 0106 	adc.w	r1, r2, r6
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 040c 	rsb	r4, r4, #12
 8000770:	f1c4 0520 	rsb	r5, r4, #32
 8000774:	fa00 f304 	lsl.w	r3, r0, r4
 8000778:	fa20 f005 	lsr.w	r0, r0, r5
 800077c:	fa01 f204 	lsl.w	r2, r1, r4
 8000780:	ea40 0002 	orr.w	r0, r0, r2
 8000784:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000788:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800078c:	f141 0100 	adc.w	r1, r1, #0
 8000790:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000794:	bf08      	it	eq
 8000796:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800079a:	bd70      	pop	{r4, r5, r6, pc}
 800079c:	f1c4 0520 	rsb	r5, r4, #32
 80007a0:	fa00 f205 	lsl.w	r2, r0, r5
 80007a4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007a8:	fa20 f304 	lsr.w	r3, r0, r4
 80007ac:	fa01 f205 	lsl.w	r2, r1, r5
 80007b0:	ea43 0302 	orr.w	r3, r3, r2
 80007b4:	fa21 f004 	lsr.w	r0, r1, r4
 80007b8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007bc:	fa21 f204 	lsr.w	r2, r1, r4
 80007c0:	ea20 0002 	bic.w	r0, r0, r2
 80007c4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007c8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007cc:	bf08      	it	eq
 80007ce:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007d2:	bd70      	pop	{r4, r5, r6, pc}
 80007d4:	f094 0f00 	teq	r4, #0
 80007d8:	d10f      	bne.n	80007fa <__aeabi_dmul+0x1c2>
 80007da:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007de:	0040      	lsls	r0, r0, #1
 80007e0:	eb41 0101 	adc.w	r1, r1, r1
 80007e4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007e8:	bf08      	it	eq
 80007ea:	3c01      	subeq	r4, #1
 80007ec:	d0f7      	beq.n	80007de <__aeabi_dmul+0x1a6>
 80007ee:	ea41 0106 	orr.w	r1, r1, r6
 80007f2:	f095 0f00 	teq	r5, #0
 80007f6:	bf18      	it	ne
 80007f8:	4770      	bxne	lr
 80007fa:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007fe:	0052      	lsls	r2, r2, #1
 8000800:	eb43 0303 	adc.w	r3, r3, r3
 8000804:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000808:	bf08      	it	eq
 800080a:	3d01      	subeq	r5, #1
 800080c:	d0f7      	beq.n	80007fe <__aeabi_dmul+0x1c6>
 800080e:	ea43 0306 	orr.w	r3, r3, r6
 8000812:	4770      	bx	lr
 8000814:	ea94 0f0c 	teq	r4, ip
 8000818:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800081c:	bf18      	it	ne
 800081e:	ea95 0f0c 	teqne	r5, ip
 8000822:	d00c      	beq.n	800083e <__aeabi_dmul+0x206>
 8000824:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000828:	bf18      	it	ne
 800082a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800082e:	d1d1      	bne.n	80007d4 <__aeabi_dmul+0x19c>
 8000830:	ea81 0103 	eor.w	r1, r1, r3
 8000834:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000838:	f04f 0000 	mov.w	r0, #0
 800083c:	bd70      	pop	{r4, r5, r6, pc}
 800083e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000842:	bf06      	itte	eq
 8000844:	4610      	moveq	r0, r2
 8000846:	4619      	moveq	r1, r3
 8000848:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800084c:	d019      	beq.n	8000882 <__aeabi_dmul+0x24a>
 800084e:	ea94 0f0c 	teq	r4, ip
 8000852:	d102      	bne.n	800085a <__aeabi_dmul+0x222>
 8000854:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000858:	d113      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800085a:	ea95 0f0c 	teq	r5, ip
 800085e:	d105      	bne.n	800086c <__aeabi_dmul+0x234>
 8000860:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000864:	bf1c      	itt	ne
 8000866:	4610      	movne	r0, r2
 8000868:	4619      	movne	r1, r3
 800086a:	d10a      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800086c:	ea81 0103 	eor.w	r1, r1, r3
 8000870:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000874:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000878:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800087c:	f04f 0000 	mov.w	r0, #0
 8000880:	bd70      	pop	{r4, r5, r6, pc}
 8000882:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000886:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800088a:	bd70      	pop	{r4, r5, r6, pc}

0800088c <__aeabi_ddiv>:
 800088c:	b570      	push	{r4, r5, r6, lr}
 800088e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000892:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000896:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800089a:	bf1d      	ittte	ne
 800089c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008a0:	ea94 0f0c 	teqne	r4, ip
 80008a4:	ea95 0f0c 	teqne	r5, ip
 80008a8:	f000 f8a7 	bleq	80009fa <__aeabi_ddiv+0x16e>
 80008ac:	eba4 0405 	sub.w	r4, r4, r5
 80008b0:	ea81 0e03 	eor.w	lr, r1, r3
 80008b4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008b8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008bc:	f000 8088 	beq.w	80009d0 <__aeabi_ddiv+0x144>
 80008c0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008c4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008c8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008cc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008d0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008d4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008d8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008dc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008e0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008e4:	429d      	cmp	r5, r3
 80008e6:	bf08      	it	eq
 80008e8:	4296      	cmpeq	r6, r2
 80008ea:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ee:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008f2:	d202      	bcs.n	80008fa <__aeabi_ddiv+0x6e>
 80008f4:	085b      	lsrs	r3, r3, #1
 80008f6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fa:	1ab6      	subs	r6, r6, r2
 80008fc:	eb65 0503 	sbc.w	r5, r5, r3
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800090a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000938:	085b      	lsrs	r3, r3, #1
 800093a:	ea4f 0232 	mov.w	r2, r2, rrx
 800093e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000942:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000946:	bf22      	ittt	cs
 8000948:	1ab6      	subcs	r6, r6, r2
 800094a:	4675      	movcs	r5, lr
 800094c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000950:	085b      	lsrs	r3, r3, #1
 8000952:	ea4f 0232 	mov.w	r2, r2, rrx
 8000956:	ebb6 0e02 	subs.w	lr, r6, r2
 800095a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800095e:	bf22      	ittt	cs
 8000960:	1ab6      	subcs	r6, r6, r2
 8000962:	4675      	movcs	r5, lr
 8000964:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000968:	ea55 0e06 	orrs.w	lr, r5, r6
 800096c:	d018      	beq.n	80009a0 <__aeabi_ddiv+0x114>
 800096e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000972:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000976:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800097a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800097e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000982:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000986:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800098a:	d1c0      	bne.n	800090e <__aeabi_ddiv+0x82>
 800098c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000990:	d10b      	bne.n	80009aa <__aeabi_ddiv+0x11e>
 8000992:	ea41 0100 	orr.w	r1, r1, r0
 8000996:	f04f 0000 	mov.w	r0, #0
 800099a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800099e:	e7b6      	b.n	800090e <__aeabi_ddiv+0x82>
 80009a0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009a4:	bf04      	itt	eq
 80009a6:	4301      	orreq	r1, r0
 80009a8:	2000      	moveq	r0, #0
 80009aa:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80009ae:	bf88      	it	hi
 80009b0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009b4:	f63f aeaf 	bhi.w	8000716 <__aeabi_dmul+0xde>
 80009b8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009bc:	bf04      	itt	eq
 80009be:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009c2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009c6:	f150 0000 	adcs.w	r0, r0, #0
 80009ca:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ce:	bd70      	pop	{r4, r5, r6, pc}
 80009d0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009d4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009d8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009dc:	bfc2      	ittt	gt
 80009de:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009e2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009e6:	bd70      	popgt	{r4, r5, r6, pc}
 80009e8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ec:	f04f 0e00 	mov.w	lr, #0
 80009f0:	3c01      	subs	r4, #1
 80009f2:	e690      	b.n	8000716 <__aeabi_dmul+0xde>
 80009f4:	ea45 0e06 	orr.w	lr, r5, r6
 80009f8:	e68d      	b.n	8000716 <__aeabi_dmul+0xde>
 80009fa:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009fe:	ea94 0f0c 	teq	r4, ip
 8000a02:	bf08      	it	eq
 8000a04:	ea95 0f0c 	teqeq	r5, ip
 8000a08:	f43f af3b 	beq.w	8000882 <__aeabi_dmul+0x24a>
 8000a0c:	ea94 0f0c 	teq	r4, ip
 8000a10:	d10a      	bne.n	8000a28 <__aeabi_ddiv+0x19c>
 8000a12:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a16:	f47f af34 	bne.w	8000882 <__aeabi_dmul+0x24a>
 8000a1a:	ea95 0f0c 	teq	r5, ip
 8000a1e:	f47f af25 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a22:	4610      	mov	r0, r2
 8000a24:	4619      	mov	r1, r3
 8000a26:	e72c      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a28:	ea95 0f0c 	teq	r5, ip
 8000a2c:	d106      	bne.n	8000a3c <__aeabi_ddiv+0x1b0>
 8000a2e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a32:	f43f aefd 	beq.w	8000830 <__aeabi_dmul+0x1f8>
 8000a36:	4610      	mov	r0, r2
 8000a38:	4619      	mov	r1, r3
 8000a3a:	e722      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a3c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a46:	f47f aec5 	bne.w	80007d4 <__aeabi_dmul+0x19c>
 8000a4a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a4e:	f47f af0d 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a52:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a56:	f47f aeeb 	bne.w	8000830 <__aeabi_dmul+0x1f8>
 8000a5a:	e712      	b.n	8000882 <__aeabi_dmul+0x24a>

08000a5c <__gedf2>:
 8000a5c:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8000a60:	e006      	b.n	8000a70 <__cmpdf2+0x4>
 8000a62:	bf00      	nop

08000a64 <__ledf2>:
 8000a64:	f04f 0c01 	mov.w	ip, #1
 8000a68:	e002      	b.n	8000a70 <__cmpdf2+0x4>
 8000a6a:	bf00      	nop

08000a6c <__cmpdf2>:
 8000a6c:	f04f 0c01 	mov.w	ip, #1
 8000a70:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a74:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a78:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a80:	bf18      	it	ne
 8000a82:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a86:	d01b      	beq.n	8000ac0 <__cmpdf2+0x54>
 8000a88:	b001      	add	sp, #4
 8000a8a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a8e:	bf0c      	ite	eq
 8000a90:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a94:	ea91 0f03 	teqne	r1, r3
 8000a98:	bf02      	ittt	eq
 8000a9a:	ea90 0f02 	teqeq	r0, r2
 8000a9e:	2000      	moveq	r0, #0
 8000aa0:	4770      	bxeq	lr
 8000aa2:	f110 0f00 	cmn.w	r0, #0
 8000aa6:	ea91 0f03 	teq	r1, r3
 8000aaa:	bf58      	it	pl
 8000aac:	4299      	cmppl	r1, r3
 8000aae:	bf08      	it	eq
 8000ab0:	4290      	cmpeq	r0, r2
 8000ab2:	bf2c      	ite	cs
 8000ab4:	17d8      	asrcs	r0, r3, #31
 8000ab6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aba:	f040 0001 	orr.w	r0, r0, #1
 8000abe:	4770      	bx	lr
 8000ac0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ac4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ac8:	d102      	bne.n	8000ad0 <__cmpdf2+0x64>
 8000aca:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ace:	d107      	bne.n	8000ae0 <__cmpdf2+0x74>
 8000ad0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ad4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ad8:	d1d6      	bne.n	8000a88 <__cmpdf2+0x1c>
 8000ada:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ade:	d0d3      	beq.n	8000a88 <__cmpdf2+0x1c>
 8000ae0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ae4:	4770      	bx	lr
 8000ae6:	bf00      	nop

08000ae8 <__aeabi_cdrcmple>:
 8000ae8:	4684      	mov	ip, r0
 8000aea:	4610      	mov	r0, r2
 8000aec:	4662      	mov	r2, ip
 8000aee:	468c      	mov	ip, r1
 8000af0:	4619      	mov	r1, r3
 8000af2:	4663      	mov	r3, ip
 8000af4:	e000      	b.n	8000af8 <__aeabi_cdcmpeq>
 8000af6:	bf00      	nop

08000af8 <__aeabi_cdcmpeq>:
 8000af8:	b501      	push	{r0, lr}
 8000afa:	f7ff ffb7 	bl	8000a6c <__cmpdf2>
 8000afe:	2800      	cmp	r0, #0
 8000b00:	bf48      	it	mi
 8000b02:	f110 0f00 	cmnmi.w	r0, #0
 8000b06:	bd01      	pop	{r0, pc}

08000b08 <__aeabi_dcmpeq>:
 8000b08:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b0c:	f7ff fff4 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b10:	bf0c      	ite	eq
 8000b12:	2001      	moveq	r0, #1
 8000b14:	2000      	movne	r0, #0
 8000b16:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1a:	bf00      	nop

08000b1c <__aeabi_dcmplt>:
 8000b1c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b20:	f7ff ffea 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b24:	bf34      	ite	cc
 8000b26:	2001      	movcc	r0, #1
 8000b28:	2000      	movcs	r0, #0
 8000b2a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2e:	bf00      	nop

08000b30 <__aeabi_dcmple>:
 8000b30:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b34:	f7ff ffe0 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b38:	bf94      	ite	ls
 8000b3a:	2001      	movls	r0, #1
 8000b3c:	2000      	movhi	r0, #0
 8000b3e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b42:	bf00      	nop

08000b44 <__aeabi_dcmpge>:
 8000b44:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b48:	f7ff ffce 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b4c:	bf94      	ite	ls
 8000b4e:	2001      	movls	r0, #1
 8000b50:	2000      	movhi	r0, #0
 8000b52:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b56:	bf00      	nop

08000b58 <__aeabi_dcmpgt>:
 8000b58:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b5c:	f7ff ffc4 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b60:	bf34      	ite	cc
 8000b62:	2001      	movcc	r0, #1
 8000b64:	2000      	movcs	r0, #0
 8000b66:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b6a:	bf00      	nop

08000b6c <__aeabi_dcmpun>:
 8000b6c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b70:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b74:	d102      	bne.n	8000b7c <__aeabi_dcmpun+0x10>
 8000b76:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b7a:	d10a      	bne.n	8000b92 <__aeabi_dcmpun+0x26>
 8000b7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b80:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b84:	d102      	bne.n	8000b8c <__aeabi_dcmpun+0x20>
 8000b86:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b8a:	d102      	bne.n	8000b92 <__aeabi_dcmpun+0x26>
 8000b8c:	f04f 0000 	mov.w	r0, #0
 8000b90:	4770      	bx	lr
 8000b92:	f04f 0001 	mov.w	r0, #1
 8000b96:	4770      	bx	lr

08000b98 <__aeabi_d2iz>:
 8000b98:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b9c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000ba0:	d215      	bcs.n	8000bce <__aeabi_d2iz+0x36>
 8000ba2:	d511      	bpl.n	8000bc8 <__aeabi_d2iz+0x30>
 8000ba4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000ba8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bac:	d912      	bls.n	8000bd4 <__aeabi_d2iz+0x3c>
 8000bae:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bb2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bb6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bba:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bbe:	fa23 f002 	lsr.w	r0, r3, r2
 8000bc2:	bf18      	it	ne
 8000bc4:	4240      	negne	r0, r0
 8000bc6:	4770      	bx	lr
 8000bc8:	f04f 0000 	mov.w	r0, #0
 8000bcc:	4770      	bx	lr
 8000bce:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bd2:	d105      	bne.n	8000be0 <__aeabi_d2iz+0x48>
 8000bd4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000bd8:	bf08      	it	eq
 8000bda:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bde:	4770      	bx	lr
 8000be0:	f04f 0000 	mov.w	r0, #0
 8000be4:	4770      	bx	lr
 8000be6:	bf00      	nop

08000be8 <__aeabi_d2f>:
 8000be8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bec:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000bf0:	bf24      	itt	cs
 8000bf2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000bf6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000bfa:	d90d      	bls.n	8000c18 <__aeabi_d2f+0x30>
 8000bfc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c00:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c04:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c08:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c0c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c10:	bf08      	it	eq
 8000c12:	f020 0001 	biceq.w	r0, r0, #1
 8000c16:	4770      	bx	lr
 8000c18:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c1c:	d121      	bne.n	8000c62 <__aeabi_d2f+0x7a>
 8000c1e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c22:	bfbc      	itt	lt
 8000c24:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c28:	4770      	bxlt	lr
 8000c2a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c2e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c32:	f1c2 0218 	rsb	r2, r2, #24
 8000c36:	f1c2 0c20 	rsb	ip, r2, #32
 8000c3a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c3e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c42:	bf18      	it	ne
 8000c44:	f040 0001 	orrne.w	r0, r0, #1
 8000c48:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c4c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c50:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c54:	ea40 000c 	orr.w	r0, r0, ip
 8000c58:	fa23 f302 	lsr.w	r3, r3, r2
 8000c5c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c60:	e7cc      	b.n	8000bfc <__aeabi_d2f+0x14>
 8000c62:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c66:	d107      	bne.n	8000c78 <__aeabi_d2f+0x90>
 8000c68:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c6c:	bf1e      	ittt	ne
 8000c6e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c72:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c76:	4770      	bxne	lr
 8000c78:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c7c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c80:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c84:	4770      	bx	lr
 8000c86:	bf00      	nop

08000c88 <__aeabi_uldivmod>:
 8000c88:	b953      	cbnz	r3, 8000ca0 <__aeabi_uldivmod+0x18>
 8000c8a:	b94a      	cbnz	r2, 8000ca0 <__aeabi_uldivmod+0x18>
 8000c8c:	2900      	cmp	r1, #0
 8000c8e:	bf08      	it	eq
 8000c90:	2800      	cmpeq	r0, #0
 8000c92:	bf1c      	itt	ne
 8000c94:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000c98:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000c9c:	f000 b96e 	b.w	8000f7c <__aeabi_idiv0>
 8000ca0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000ca4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000ca8:	f000 f806 	bl	8000cb8 <__udivmoddi4>
 8000cac:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cb0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cb4:	b004      	add	sp, #16
 8000cb6:	4770      	bx	lr

08000cb8 <__udivmoddi4>:
 8000cb8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000cbc:	9d08      	ldr	r5, [sp, #32]
 8000cbe:	4604      	mov	r4, r0
 8000cc0:	468c      	mov	ip, r1
 8000cc2:	2b00      	cmp	r3, #0
 8000cc4:	f040 8083 	bne.w	8000dce <__udivmoddi4+0x116>
 8000cc8:	428a      	cmp	r2, r1
 8000cca:	4617      	mov	r7, r2
 8000ccc:	d947      	bls.n	8000d5e <__udivmoddi4+0xa6>
 8000cce:	fab2 f282 	clz	r2, r2
 8000cd2:	b142      	cbz	r2, 8000ce6 <__udivmoddi4+0x2e>
 8000cd4:	f1c2 0020 	rsb	r0, r2, #32
 8000cd8:	fa24 f000 	lsr.w	r0, r4, r0
 8000cdc:	4091      	lsls	r1, r2
 8000cde:	4097      	lsls	r7, r2
 8000ce0:	ea40 0c01 	orr.w	ip, r0, r1
 8000ce4:	4094      	lsls	r4, r2
 8000ce6:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000cea:	0c23      	lsrs	r3, r4, #16
 8000cec:	fbbc f6f8 	udiv	r6, ip, r8
 8000cf0:	fa1f fe87 	uxth.w	lr, r7
 8000cf4:	fb08 c116 	mls	r1, r8, r6, ip
 8000cf8:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000cfc:	fb06 f10e 	mul.w	r1, r6, lr
 8000d00:	4299      	cmp	r1, r3
 8000d02:	d909      	bls.n	8000d18 <__udivmoddi4+0x60>
 8000d04:	18fb      	adds	r3, r7, r3
 8000d06:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 8000d0a:	f080 8119 	bcs.w	8000f40 <__udivmoddi4+0x288>
 8000d0e:	4299      	cmp	r1, r3
 8000d10:	f240 8116 	bls.w	8000f40 <__udivmoddi4+0x288>
 8000d14:	3e02      	subs	r6, #2
 8000d16:	443b      	add	r3, r7
 8000d18:	1a5b      	subs	r3, r3, r1
 8000d1a:	b2a4      	uxth	r4, r4
 8000d1c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000d20:	fb08 3310 	mls	r3, r8, r0, r3
 8000d24:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000d28:	fb00 fe0e 	mul.w	lr, r0, lr
 8000d2c:	45a6      	cmp	lr, r4
 8000d2e:	d909      	bls.n	8000d44 <__udivmoddi4+0x8c>
 8000d30:	193c      	adds	r4, r7, r4
 8000d32:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000d36:	f080 8105 	bcs.w	8000f44 <__udivmoddi4+0x28c>
 8000d3a:	45a6      	cmp	lr, r4
 8000d3c:	f240 8102 	bls.w	8000f44 <__udivmoddi4+0x28c>
 8000d40:	3802      	subs	r0, #2
 8000d42:	443c      	add	r4, r7
 8000d44:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000d48:	eba4 040e 	sub.w	r4, r4, lr
 8000d4c:	2600      	movs	r6, #0
 8000d4e:	b11d      	cbz	r5, 8000d58 <__udivmoddi4+0xa0>
 8000d50:	40d4      	lsrs	r4, r2
 8000d52:	2300      	movs	r3, #0
 8000d54:	e9c5 4300 	strd	r4, r3, [r5]
 8000d58:	4631      	mov	r1, r6
 8000d5a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d5e:	b902      	cbnz	r2, 8000d62 <__udivmoddi4+0xaa>
 8000d60:	deff      	udf	#255	; 0xff
 8000d62:	fab2 f282 	clz	r2, r2
 8000d66:	2a00      	cmp	r2, #0
 8000d68:	d150      	bne.n	8000e0c <__udivmoddi4+0x154>
 8000d6a:	1bcb      	subs	r3, r1, r7
 8000d6c:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000d70:	fa1f f887 	uxth.w	r8, r7
 8000d74:	2601      	movs	r6, #1
 8000d76:	fbb3 fcfe 	udiv	ip, r3, lr
 8000d7a:	0c21      	lsrs	r1, r4, #16
 8000d7c:	fb0e 331c 	mls	r3, lr, ip, r3
 8000d80:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000d84:	fb08 f30c 	mul.w	r3, r8, ip
 8000d88:	428b      	cmp	r3, r1
 8000d8a:	d907      	bls.n	8000d9c <__udivmoddi4+0xe4>
 8000d8c:	1879      	adds	r1, r7, r1
 8000d8e:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
 8000d92:	d202      	bcs.n	8000d9a <__udivmoddi4+0xe2>
 8000d94:	428b      	cmp	r3, r1
 8000d96:	f200 80e9 	bhi.w	8000f6c <__udivmoddi4+0x2b4>
 8000d9a:	4684      	mov	ip, r0
 8000d9c:	1ac9      	subs	r1, r1, r3
 8000d9e:	b2a3      	uxth	r3, r4
 8000da0:	fbb1 f0fe 	udiv	r0, r1, lr
 8000da4:	fb0e 1110 	mls	r1, lr, r0, r1
 8000da8:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000dac:	fb08 f800 	mul.w	r8, r8, r0
 8000db0:	45a0      	cmp	r8, r4
 8000db2:	d907      	bls.n	8000dc4 <__udivmoddi4+0x10c>
 8000db4:	193c      	adds	r4, r7, r4
 8000db6:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000dba:	d202      	bcs.n	8000dc2 <__udivmoddi4+0x10a>
 8000dbc:	45a0      	cmp	r8, r4
 8000dbe:	f200 80d9 	bhi.w	8000f74 <__udivmoddi4+0x2bc>
 8000dc2:	4618      	mov	r0, r3
 8000dc4:	eba4 0408 	sub.w	r4, r4, r8
 8000dc8:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000dcc:	e7bf      	b.n	8000d4e <__udivmoddi4+0x96>
 8000dce:	428b      	cmp	r3, r1
 8000dd0:	d909      	bls.n	8000de6 <__udivmoddi4+0x12e>
 8000dd2:	2d00      	cmp	r5, #0
 8000dd4:	f000 80b1 	beq.w	8000f3a <__udivmoddi4+0x282>
 8000dd8:	2600      	movs	r6, #0
 8000dda:	e9c5 0100 	strd	r0, r1, [r5]
 8000dde:	4630      	mov	r0, r6
 8000de0:	4631      	mov	r1, r6
 8000de2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000de6:	fab3 f683 	clz	r6, r3
 8000dea:	2e00      	cmp	r6, #0
 8000dec:	d14a      	bne.n	8000e84 <__udivmoddi4+0x1cc>
 8000dee:	428b      	cmp	r3, r1
 8000df0:	d302      	bcc.n	8000df8 <__udivmoddi4+0x140>
 8000df2:	4282      	cmp	r2, r0
 8000df4:	f200 80b8 	bhi.w	8000f68 <__udivmoddi4+0x2b0>
 8000df8:	1a84      	subs	r4, r0, r2
 8000dfa:	eb61 0103 	sbc.w	r1, r1, r3
 8000dfe:	2001      	movs	r0, #1
 8000e00:	468c      	mov	ip, r1
 8000e02:	2d00      	cmp	r5, #0
 8000e04:	d0a8      	beq.n	8000d58 <__udivmoddi4+0xa0>
 8000e06:	e9c5 4c00 	strd	r4, ip, [r5]
 8000e0a:	e7a5      	b.n	8000d58 <__udivmoddi4+0xa0>
 8000e0c:	f1c2 0320 	rsb	r3, r2, #32
 8000e10:	fa20 f603 	lsr.w	r6, r0, r3
 8000e14:	4097      	lsls	r7, r2
 8000e16:	fa01 f002 	lsl.w	r0, r1, r2
 8000e1a:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000e1e:	40d9      	lsrs	r1, r3
 8000e20:	4330      	orrs	r0, r6
 8000e22:	0c03      	lsrs	r3, r0, #16
 8000e24:	fbb1 f6fe 	udiv	r6, r1, lr
 8000e28:	fa1f f887 	uxth.w	r8, r7
 8000e2c:	fb0e 1116 	mls	r1, lr, r6, r1
 8000e30:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000e34:	fb06 f108 	mul.w	r1, r6, r8
 8000e38:	4299      	cmp	r1, r3
 8000e3a:	fa04 f402 	lsl.w	r4, r4, r2
 8000e3e:	d909      	bls.n	8000e54 <__udivmoddi4+0x19c>
 8000e40:	18fb      	adds	r3, r7, r3
 8000e42:	f106 3cff 	add.w	ip, r6, #4294967295	; 0xffffffff
 8000e46:	f080 808d 	bcs.w	8000f64 <__udivmoddi4+0x2ac>
 8000e4a:	4299      	cmp	r1, r3
 8000e4c:	f240 808a 	bls.w	8000f64 <__udivmoddi4+0x2ac>
 8000e50:	3e02      	subs	r6, #2
 8000e52:	443b      	add	r3, r7
 8000e54:	1a5b      	subs	r3, r3, r1
 8000e56:	b281      	uxth	r1, r0
 8000e58:	fbb3 f0fe 	udiv	r0, r3, lr
 8000e5c:	fb0e 3310 	mls	r3, lr, r0, r3
 8000e60:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000e64:	fb00 f308 	mul.w	r3, r0, r8
 8000e68:	428b      	cmp	r3, r1
 8000e6a:	d907      	bls.n	8000e7c <__udivmoddi4+0x1c4>
 8000e6c:	1879      	adds	r1, r7, r1
 8000e6e:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
 8000e72:	d273      	bcs.n	8000f5c <__udivmoddi4+0x2a4>
 8000e74:	428b      	cmp	r3, r1
 8000e76:	d971      	bls.n	8000f5c <__udivmoddi4+0x2a4>
 8000e78:	3802      	subs	r0, #2
 8000e7a:	4439      	add	r1, r7
 8000e7c:	1acb      	subs	r3, r1, r3
 8000e7e:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 8000e82:	e778      	b.n	8000d76 <__udivmoddi4+0xbe>
 8000e84:	f1c6 0c20 	rsb	ip, r6, #32
 8000e88:	fa03 f406 	lsl.w	r4, r3, r6
 8000e8c:	fa22 f30c 	lsr.w	r3, r2, ip
 8000e90:	431c      	orrs	r4, r3
 8000e92:	fa20 f70c 	lsr.w	r7, r0, ip
 8000e96:	fa01 f306 	lsl.w	r3, r1, r6
 8000e9a:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000e9e:	fa21 f10c 	lsr.w	r1, r1, ip
 8000ea2:	431f      	orrs	r7, r3
 8000ea4:	0c3b      	lsrs	r3, r7, #16
 8000ea6:	fbb1 f9fe 	udiv	r9, r1, lr
 8000eaa:	fa1f f884 	uxth.w	r8, r4
 8000eae:	fb0e 1119 	mls	r1, lr, r9, r1
 8000eb2:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000eb6:	fb09 fa08 	mul.w	sl, r9, r8
 8000eba:	458a      	cmp	sl, r1
 8000ebc:	fa02 f206 	lsl.w	r2, r2, r6
 8000ec0:	fa00 f306 	lsl.w	r3, r0, r6
 8000ec4:	d908      	bls.n	8000ed8 <__udivmoddi4+0x220>
 8000ec6:	1861      	adds	r1, r4, r1
 8000ec8:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
 8000ecc:	d248      	bcs.n	8000f60 <__udivmoddi4+0x2a8>
 8000ece:	458a      	cmp	sl, r1
 8000ed0:	d946      	bls.n	8000f60 <__udivmoddi4+0x2a8>
 8000ed2:	f1a9 0902 	sub.w	r9, r9, #2
 8000ed6:	4421      	add	r1, r4
 8000ed8:	eba1 010a 	sub.w	r1, r1, sl
 8000edc:	b2bf      	uxth	r7, r7
 8000ede:	fbb1 f0fe 	udiv	r0, r1, lr
 8000ee2:	fb0e 1110 	mls	r1, lr, r0, r1
 8000ee6:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000eea:	fb00 f808 	mul.w	r8, r0, r8
 8000eee:	45b8      	cmp	r8, r7
 8000ef0:	d907      	bls.n	8000f02 <__udivmoddi4+0x24a>
 8000ef2:	19e7      	adds	r7, r4, r7
 8000ef4:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 8000ef8:	d22e      	bcs.n	8000f58 <__udivmoddi4+0x2a0>
 8000efa:	45b8      	cmp	r8, r7
 8000efc:	d92c      	bls.n	8000f58 <__udivmoddi4+0x2a0>
 8000efe:	3802      	subs	r0, #2
 8000f00:	4427      	add	r7, r4
 8000f02:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000f06:	eba7 0708 	sub.w	r7, r7, r8
 8000f0a:	fba0 8902 	umull	r8, r9, r0, r2
 8000f0e:	454f      	cmp	r7, r9
 8000f10:	46c6      	mov	lr, r8
 8000f12:	4649      	mov	r1, r9
 8000f14:	d31a      	bcc.n	8000f4c <__udivmoddi4+0x294>
 8000f16:	d017      	beq.n	8000f48 <__udivmoddi4+0x290>
 8000f18:	b15d      	cbz	r5, 8000f32 <__udivmoddi4+0x27a>
 8000f1a:	ebb3 020e 	subs.w	r2, r3, lr
 8000f1e:	eb67 0701 	sbc.w	r7, r7, r1
 8000f22:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000f26:	40f2      	lsrs	r2, r6
 8000f28:	ea4c 0202 	orr.w	r2, ip, r2
 8000f2c:	40f7      	lsrs	r7, r6
 8000f2e:	e9c5 2700 	strd	r2, r7, [r5]
 8000f32:	2600      	movs	r6, #0
 8000f34:	4631      	mov	r1, r6
 8000f36:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000f3a:	462e      	mov	r6, r5
 8000f3c:	4628      	mov	r0, r5
 8000f3e:	e70b      	b.n	8000d58 <__udivmoddi4+0xa0>
 8000f40:	4606      	mov	r6, r0
 8000f42:	e6e9      	b.n	8000d18 <__udivmoddi4+0x60>
 8000f44:	4618      	mov	r0, r3
 8000f46:	e6fd      	b.n	8000d44 <__udivmoddi4+0x8c>
 8000f48:	4543      	cmp	r3, r8
 8000f4a:	d2e5      	bcs.n	8000f18 <__udivmoddi4+0x260>
 8000f4c:	ebb8 0e02 	subs.w	lr, r8, r2
 8000f50:	eb69 0104 	sbc.w	r1, r9, r4
 8000f54:	3801      	subs	r0, #1
 8000f56:	e7df      	b.n	8000f18 <__udivmoddi4+0x260>
 8000f58:	4608      	mov	r0, r1
 8000f5a:	e7d2      	b.n	8000f02 <__udivmoddi4+0x24a>
 8000f5c:	4660      	mov	r0, ip
 8000f5e:	e78d      	b.n	8000e7c <__udivmoddi4+0x1c4>
 8000f60:	4681      	mov	r9, r0
 8000f62:	e7b9      	b.n	8000ed8 <__udivmoddi4+0x220>
 8000f64:	4666      	mov	r6, ip
 8000f66:	e775      	b.n	8000e54 <__udivmoddi4+0x19c>
 8000f68:	4630      	mov	r0, r6
 8000f6a:	e74a      	b.n	8000e02 <__udivmoddi4+0x14a>
 8000f6c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000f70:	4439      	add	r1, r7
 8000f72:	e713      	b.n	8000d9c <__udivmoddi4+0xe4>
 8000f74:	3802      	subs	r0, #2
 8000f76:	443c      	add	r4, r7
 8000f78:	e724      	b.n	8000dc4 <__udivmoddi4+0x10c>
 8000f7a:	bf00      	nop

08000f7c <__aeabi_idiv0>:
 8000f7c:	4770      	bx	lr
 8000f7e:	bf00      	nop

08000f80 <GET_TIMER_CLK>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
uint32_t GET_TIMER_CLK(uint8_t timer)
{
 8000f80:	b580      	push	{r7, lr}
 8000f82:	b086      	sub	sp, #24
 8000f84:	af00      	add	r7, sp, #0
 8000f86:	4603      	mov	r3, r0
 8000f88:	71fb      	strb	r3, [r7, #7]
  uint8_t sel = 0;
 8000f8a:	2300      	movs	r3, #0
 8000f8c:	75fb      	strb	r3, [r7, #23]
  switch (timer)
 8000f8e:	79fb      	ldrb	r3, [r7, #7]
 8000f90:	2b07      	cmp	r3, #7
 8000f92:	dc02      	bgt.n	8000f9a <GET_TIMER_CLK+0x1a>
 8000f94:	2b02      	cmp	r3, #2
 8000f96:	da03      	bge.n	8000fa0 <GET_TIMER_CLK+0x20>
 8000f98:	e005      	b.n	8000fa6 <GET_TIMER_CLK+0x26>
 8000f9a:	3b0c      	subs	r3, #12
 8000f9c:	2b02      	cmp	r3, #2
 8000f9e:	d802      	bhi.n	8000fa6 <GET_TIMER_CLK+0x26>
  case 6:
  case 7:
  case 12:
  case 13:
  case 14:
    sel = 1;
 8000fa0:	2301      	movs	r3, #1
 8000fa2:	75fb      	strb	r3, [r7, #23]
    break;
 8000fa4:	e002      	b.n	8000fac <GET_TIMER_CLK+0x2c>
  default:
    sel = 2;
 8000fa6:	2302      	movs	r3, #2
 8000fa8:	75fb      	strb	r3, [r7, #23]
    break;
 8000faa:	bf00      	nop
  }
  if(sel == 1){
 8000fac:	7dfb      	ldrb	r3, [r7, #23]
 8000fae:	2b01      	cmp	r3, #1
 8000fb0:	d10d      	bne.n	8000fce <GET_TIMER_CLK+0x4e>
    /* Get PCLK1 frequency */
    uint32_t pclk1 = HAL_RCC_GetPCLK1Freq();
 8000fb2:	f001 fef7 	bl	8002da4 <HAL_RCC_GetPCLK1Freq>
 8000fb6:	60f8      	str	r0, [r7, #12]
  
    /* Get PCLK1 prescaler */
    if((RCC->CFGR & RCC_CFGR_PPRE1) == 0)
 8000fb8:	4b0d      	ldr	r3, [pc, #52]	; (8000ff0 <GET_TIMER_CLK+0x70>)
 8000fba:	689b      	ldr	r3, [r3, #8]
 8000fbc:	f403 53e0 	and.w	r3, r3, #7168	; 0x1c00
 8000fc0:	2b00      	cmp	r3, #0
 8000fc2:	d101      	bne.n	8000fc8 <GET_TIMER_CLK+0x48>
    {
      /* PCLK1 prescaler equal to 1 => TIMCLK = PCLK1 */
      return (pclk1);
 8000fc4:	68fb      	ldr	r3, [r7, #12]
 8000fc6:	e00f      	b.n	8000fe8 <GET_TIMER_CLK+0x68>
    }
    else
    {
      /* PCLK1 prescaler different from 1 => TIMCLK = 2 * PCLK1 */
      return(2 * pclk1);
 8000fc8:	68fb      	ldr	r3, [r7, #12]
 8000fca:	005b      	lsls	r3, r3, #1
 8000fcc:	e00c      	b.n	8000fe8 <GET_TIMER_CLK+0x68>
    }
  } else {
    /* Get PCLK2 frequency */
    uint32_t pclk2 = HAL_RCC_GetPCLK2Freq();
 8000fce:	f001 fefd 	bl	8002dcc <HAL_RCC_GetPCLK2Freq>
 8000fd2:	6138      	str	r0, [r7, #16]
  
    /* Get PCLK1 prescaler */
    if((RCC->CFGR & RCC_CFGR_PPRE2) == 0)
 8000fd4:	4b06      	ldr	r3, [pc, #24]	; (8000ff0 <GET_TIMER_CLK+0x70>)
 8000fd6:	689b      	ldr	r3, [r3, #8]
 8000fd8:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 8000fdc:	2b00      	cmp	r3, #0
 8000fde:	d101      	bne.n	8000fe4 <GET_TIMER_CLK+0x64>
    {
      /* PCLK1 prescaler equal to 1 => TIMCLK = PCLK1 */
      return (pclk2);
 8000fe0:	693b      	ldr	r3, [r7, #16]
 8000fe2:	e001      	b.n	8000fe8 <GET_TIMER_CLK+0x68>
    }
    else
    {
      /* PCLK1 prescaler different from 1 => TIMCLK = 2 * PCLK1 */
      return(2 * pclk2);
 8000fe4:	693b      	ldr	r3, [r7, #16]
 8000fe6:	005b      	lsls	r3, r3, #1
    }
  }
}
 8000fe8:	4618      	mov	r0, r3
 8000fea:	3718      	adds	r7, #24
 8000fec:	46bd      	mov	sp, r7
 8000fee:	bd80      	pop	{r7, pc}
 8000ff0:	40023800 	.word	0x40023800

08000ff4 <changeTimerFrequency>:

uint8_t first = 1;
int changeTimerFrequency(TIM_HandleTypeDef *timer, int timer_num, int channel, float frequency, int32_t pulseWidth_ms){
 8000ff4:	b5b0      	push	{r4, r5, r7, lr}
 8000ff6:	b090      	sub	sp, #64	; 0x40
 8000ff8:	af02      	add	r7, sp, #8
 8000ffa:	6178      	str	r0, [r7, #20]
 8000ffc:	6139      	str	r1, [r7, #16]
 8000ffe:	60fa      	str	r2, [r7, #12]
 8001000:	ed87 0a02 	vstr	s0, [r7, #8]
 8001004:	607b      	str	r3, [r7, #4]
  //Get the clock frequency going to this timer (scaled by the timer prescaler)
  float clk_freq = (float)(GET_TIMER_CLK(timer_num) / (PRESCALER - 1));
 8001006:	693b      	ldr	r3, [r7, #16]
 8001008:	b2db      	uxtb	r3, r3
 800100a:	4618      	mov	r0, r3
 800100c:	f7ff ffb8 	bl	8000f80 <GET_TIMER_CLK>
 8001010:	4603      	mov	r3, r0
 8001012:	4a61      	ldr	r2, [pc, #388]	; (8001198 <changeTimerFrequency+0x1a4>)
 8001014:	fba2 2303 	umull	r2, r3, r2, r3
 8001018:	0adb      	lsrs	r3, r3, #11
 800101a:	ee07 3a90 	vmov	s15, r3
 800101e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001022:	edc7 7a0c 	vstr	s15, [r7, #48]	; 0x30
  int clk_freq_int = (int)clk_freq;
 8001026:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 800102a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800102e:	ee17 3a90 	vmov	r3, s15
 8001032:	62fb      	str	r3, [r7, #44]	; 0x2c
  //DEBUG
  // sprintf(buff, "TIMER CLK FREQ: %d\n", clk_freq_int);
  // HAL_UART_Transmit(&huart2, buff, 50, 1000);

  //Calculate period and set it
  uint32_t prev_ARR = timer->Instance->ARR;
 8001034:	697b      	ldr	r3, [r7, #20]
 8001036:	681b      	ldr	r3, [r3, #0]
 8001038:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800103a:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t curr_count = __HAL_TIM_GET_COUNTER(timer);
 800103c:	697b      	ldr	r3, [r7, #20]
 800103e:	681b      	ldr	r3, [r3, #0]
 8001040:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001042:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t new_ARR = clk_freq / frequency - 1;
 8001044:	edd7 6a0c 	vldr	s13, [r7, #48]	; 0x30
 8001048:	ed97 7a02 	vldr	s14, [r7, #8]
 800104c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001050:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8001054:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8001058:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800105c:	ee17 3a90 	vmov	r3, s15
 8001060:	623b      	str	r3, [r7, #32]
  timer->Instance->ARR = new_ARR;
 8001062:	697b      	ldr	r3, [r7, #20]
 8001064:	681b      	ldr	r3, [r3, #0]
 8001066:	6a3a      	ldr	r2, [r7, #32]
 8001068:	62da      	str	r2, [r3, #44]	; 0x2c
  uint32_t new_counter = ((float)curr_count / (float)prev_ARR) * new_ARR;
 800106a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800106c:	ee07 3a90 	vmov	s15, r3
 8001070:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8001074:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001076:	ee07 3a90 	vmov	s15, r3
 800107a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800107e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8001082:	6a3b      	ldr	r3, [r7, #32]
 8001084:	ee07 3a90 	vmov	s15, r3
 8001088:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800108c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001090:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001094:	ee17 3a90 	vmov	r3, s15
 8001098:	637b      	str	r3, [r7, #52]	; 0x34
  if(new_counter >= new_ARR){
 800109a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800109c:	6a3b      	ldr	r3, [r7, #32]
 800109e:	429a      	cmp	r2, r3
 80010a0:	d323      	bcc.n	80010ea <changeTimerFrequency+0xf6>
    if(first){
 80010a2:	4b3e      	ldr	r3, [pc, #248]	; (800119c <changeTimerFrequency+0x1a8>)
 80010a4:	781b      	ldrb	r3, [r3, #0]
 80010a6:	2b00      	cmp	r3, #0
 80010a8:	d007      	beq.n	80010ba <changeTimerFrequency+0xc6>
      first = 0;
 80010aa:	4b3c      	ldr	r3, [pc, #240]	; (800119c <changeTimerFrequency+0x1a8>)
 80010ac:	2200      	movs	r2, #0
 80010ae:	701a      	strb	r2, [r3, #0]
      sprintf(buff, "FIRST BIG!\n");
 80010b0:	493b      	ldr	r1, [pc, #236]	; (80011a0 <changeTimerFrequency+0x1ac>)
 80010b2:	483c      	ldr	r0, [pc, #240]	; (80011a4 <changeTimerFrequency+0x1b0>)
 80010b4:	f005 fbc2 	bl	800683c <siprintf>
 80010b8:	e003      	b.n	80010c2 <changeTimerFrequency+0xce>
    } else {
      sprintf(buff, "TOO BIG!\n");
 80010ba:	493b      	ldr	r1, [pc, #236]	; (80011a8 <changeTimerFrequency+0x1b4>)
 80010bc:	4839      	ldr	r0, [pc, #228]	; (80011a4 <changeTimerFrequency+0x1b0>)
 80010be:	f005 fbbd 	bl	800683c <siprintf>
    }
    HAL_UART_Transmit(&huart2, buff, strlen(buff), 1000);
 80010c2:	4838      	ldr	r0, [pc, #224]	; (80011a4 <changeTimerFrequency+0x1b0>)
 80010c4:	f7ff f8a4 	bl	8000210 <strlen>
 80010c8:	4603      	mov	r3, r0
 80010ca:	b29a      	uxth	r2, r3
 80010cc:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80010d0:	4934      	ldr	r1, [pc, #208]	; (80011a4 <changeTimerFrequency+0x1b0>)
 80010d2:	4836      	ldr	r0, [pc, #216]	; (80011ac <changeTimerFrequency+0x1b8>)
 80010d4:	f003 ff31 	bl	8004f3a <HAL_UART_Transmit>
    __HAL_TIM_SET_COUNTER(timer, new_ARR-1);
 80010d8:	697b      	ldr	r3, [r7, #20]
 80010da:	681b      	ldr	r3, [r3, #0]
 80010dc:	6a3a      	ldr	r2, [r7, #32]
 80010de:	3a01      	subs	r2, #1
 80010e0:	625a      	str	r2, [r3, #36]	; 0x24
    new_counter = new_ARR-1;
 80010e2:	6a3b      	ldr	r3, [r7, #32]
 80010e4:	3b01      	subs	r3, #1
 80010e6:	637b      	str	r3, [r7, #52]	; 0x34
 80010e8:	e003      	b.n	80010f2 <changeTimerFrequency+0xfe>
  }
  else{
    __HAL_TIM_SET_COUNTER(timer, new_counter);
 80010ea:	697b      	ldr	r3, [r7, #20]
 80010ec:	681b      	ldr	r3, [r3, #0]
 80010ee:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80010f0:	625a      	str	r2, [r3, #36]	; 0x24
  }
  sprintf(buff, "PREV COUNT: %d\tPRE ARR: %d\tNEW COUNT: %d\tNEW ARR: %d\n", curr_count, prev_ARR, new_counter, timer->Instance->ARR);
 80010f2:	697b      	ldr	r3, [r7, #20]
 80010f4:	681b      	ldr	r3, [r3, #0]
 80010f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80010f8:	9301      	str	r3, [sp, #4]
 80010fa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80010fc:	9300      	str	r3, [sp, #0]
 80010fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001100:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001102:	492b      	ldr	r1, [pc, #172]	; (80011b0 <changeTimerFrequency+0x1bc>)
 8001104:	4827      	ldr	r0, [pc, #156]	; (80011a4 <changeTimerFrequency+0x1b0>)
 8001106:	f005 fb99 	bl	800683c <siprintf>
  HAL_UART_Transmit(&huart2, buff, strlen(buff), 1000);
 800110a:	4826      	ldr	r0, [pc, #152]	; (80011a4 <changeTimerFrequency+0x1b0>)
 800110c:	f7ff f880 	bl	8000210 <strlen>
 8001110:	4603      	mov	r3, r0
 8001112:	b29a      	uxth	r2, r3
 8001114:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001118:	4922      	ldr	r1, [pc, #136]	; (80011a4 <changeTimerFrequency+0x1b0>)
 800111a:	4824      	ldr	r0, [pc, #144]	; (80011ac <changeTimerFrequency+0x1b8>)
 800111c:	f003 ff0d 	bl	8004f3a <HAL_UART_Transmit>
  //DEBUG
  // sprintf(buff, "TIMER AUTO RELOAD VAL: %d\n", timer->Instance->ARR);
  // HAL_UART_Transmit(&huart2, buff, 50, 1000);
  //Set pulse width if it's valid ie. smaller than the period
  //Calculate the value for CCRx
  int ccr = (float)pulseWidth_ms * (clk_freq/1000.0);
 8001120:	687b      	ldr	r3, [r7, #4]
 8001122:	ee07 3a90 	vmov	s15, r3
 8001126:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800112a:	ee17 0a90 	vmov	r0, s15
 800112e:	f7ff fa2b 	bl	8000588 <__aeabi_f2d>
 8001132:	4604      	mov	r4, r0
 8001134:	460d      	mov	r5, r1
 8001136:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8001138:	f7ff fa26 	bl	8000588 <__aeabi_f2d>
 800113c:	f04f 0200 	mov.w	r2, #0
 8001140:	4b1c      	ldr	r3, [pc, #112]	; (80011b4 <changeTimerFrequency+0x1c0>)
 8001142:	f7ff fba3 	bl	800088c <__aeabi_ddiv>
 8001146:	4602      	mov	r2, r0
 8001148:	460b      	mov	r3, r1
 800114a:	4620      	mov	r0, r4
 800114c:	4629      	mov	r1, r5
 800114e:	f7ff fa73 	bl	8000638 <__aeabi_dmul>
 8001152:	4602      	mov	r2, r0
 8001154:	460b      	mov	r3, r1
 8001156:	4610      	mov	r0, r2
 8001158:	4619      	mov	r1, r3
 800115a:	f7ff fd1d 	bl	8000b98 <__aeabi_d2iz>
 800115e:	4603      	mov	r3, r0
 8001160:	61fb      	str	r3, [r7, #28]
  if(ccr < timer->Instance->ARR)
 8001162:	697b      	ldr	r3, [r7, #20]
 8001164:	681b      	ldr	r3, [r3, #0]
 8001166:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001168:	69fb      	ldr	r3, [r7, #28]
 800116a:	429a      	cmp	r2, r3
 800116c:	d90c      	bls.n	8001188 <changeTimerFrequency+0x194>
  {
    if(channel == 1){
 800116e:	68fb      	ldr	r3, [r7, #12]
 8001170:	2b01      	cmp	r3, #1
 8001172:	d104      	bne.n	800117e <changeTimerFrequency+0x18a>
      timer->Instance->CCR1 = ccr;
 8001174:	697b      	ldr	r3, [r7, #20]
 8001176:	681b      	ldr	r3, [r3, #0]
 8001178:	69fa      	ldr	r2, [r7, #28]
 800117a:	635a      	str	r2, [r3, #52]	; 0x34
 800117c:	e007      	b.n	800118e <changeTimerFrequency+0x19a>
      //DEBUG
      // sprintf(buff, "TIMER CCR1 VAL: %d\n", timer->Instance->CCR1);
      // HAL_UART_Transmit(&huart2, buff, 50, 1000);
    } else {
      timer->Instance->CCR2 = ccr;
 800117e:	697b      	ldr	r3, [r7, #20]
 8001180:	681b      	ldr	r3, [r3, #0]
 8001182:	69fa      	ldr	r2, [r7, #28]
 8001184:	639a      	str	r2, [r3, #56]	; 0x38
 8001186:	e002      	b.n	800118e <changeTimerFrequency+0x19a>
    }

  }
  else
  {
    return -1;
 8001188:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800118c:	e000      	b.n	8001190 <changeTimerFrequency+0x19c>
  }
  return 0;
 800118e:	2300      	movs	r3, #0
}
 8001190:	4618      	mov	r0, r3
 8001192:	3738      	adds	r7, #56	; 0x38
 8001194:	46bd      	mov	sp, r7
 8001196:	bdb0      	pop	{r4, r5, r7, pc}
 8001198:	aed22925 	.word	0xaed22925
 800119c:	20000018 	.word	0x20000018
 80011a0:	08008cb0 	.word	0x08008cb0
 80011a4:	20000350 	.word	0x20000350
 80011a8:	08008cbc 	.word	0x08008cbc
 80011ac:	200004a8 	.word	0x200004a8
 80011b0:	08008cc8 	.word	0x08008cc8
 80011b4:	408f4000 	.word	0x408f4000

080011b8 <map_clamped>:

float map_clamped(float x, float in_min, float in_max, float out_min, float out_max) {
 80011b8:	b5b0      	push	{r4, r5, r7, lr}
 80011ba:	b08a      	sub	sp, #40	; 0x28
 80011bc:	af00      	add	r7, sp, #0
 80011be:	ed87 0a05 	vstr	s0, [r7, #20]
 80011c2:	edc7 0a04 	vstr	s1, [r7, #16]
 80011c6:	ed87 1a03 	vstr	s2, [r7, #12]
 80011ca:	edc7 1a02 	vstr	s3, [r7, #8]
 80011ce:	ed87 2a01 	vstr	s4, [r7, #4]
  //Clip output
  if(x > in_max)
 80011d2:	ed97 7a05 	vldr	s14, [r7, #20]
 80011d6:	edd7 7a03 	vldr	s15, [r7, #12]
 80011da:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80011de:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80011e2:	dd01      	ble.n	80011e8 <map_clamped+0x30>
    return out_max;
 80011e4:	687b      	ldr	r3, [r7, #4]
 80011e6:	e04c      	b.n	8001282 <map_clamped+0xca>
  else if(x < in_min)
 80011e8:	ed97 7a05 	vldr	s14, [r7, #20]
 80011ec:	edd7 7a04 	vldr	s15, [r7, #16]
 80011f0:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80011f4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80011f8:	d501      	bpl.n	80011fe <map_clamped+0x46>
    return out_min;
 80011fa:	68bb      	ldr	r3, [r7, #8]
 80011fc:	e041      	b.n	8001282 <map_clamped+0xca>
  else
  {
    double slope = 1.0 * (out_max - out_min) / (in_max - in_min);
 80011fe:	ed97 7a01 	vldr	s14, [r7, #4]
 8001202:	edd7 7a02 	vldr	s15, [r7, #8]
 8001206:	ee77 7a67 	vsub.f32	s15, s14, s15
 800120a:	ee17 0a90 	vmov	r0, s15
 800120e:	f7ff f9bb 	bl	8000588 <__aeabi_f2d>
 8001212:	4604      	mov	r4, r0
 8001214:	460d      	mov	r5, r1
 8001216:	ed97 7a03 	vldr	s14, [r7, #12]
 800121a:	edd7 7a04 	vldr	s15, [r7, #16]
 800121e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001222:	ee17 0a90 	vmov	r0, s15
 8001226:	f7ff f9af 	bl	8000588 <__aeabi_f2d>
 800122a:	4602      	mov	r2, r0
 800122c:	460b      	mov	r3, r1
 800122e:	4620      	mov	r0, r4
 8001230:	4629      	mov	r1, r5
 8001232:	f7ff fb2b 	bl	800088c <__aeabi_ddiv>
 8001236:	4602      	mov	r2, r0
 8001238:	460b      	mov	r3, r1
 800123a:	e9c7 2308 	strd	r2, r3, [r7, #32]
    double output = out_min + slope * (x - in_min);
 800123e:	68b8      	ldr	r0, [r7, #8]
 8001240:	f7ff f9a2 	bl	8000588 <__aeabi_f2d>
 8001244:	4604      	mov	r4, r0
 8001246:	460d      	mov	r5, r1
 8001248:	ed97 7a05 	vldr	s14, [r7, #20]
 800124c:	edd7 7a04 	vldr	s15, [r7, #16]
 8001250:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001254:	ee17 0a90 	vmov	r0, s15
 8001258:	f7ff f996 	bl	8000588 <__aeabi_f2d>
 800125c:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8001260:	f7ff f9ea 	bl	8000638 <__aeabi_dmul>
 8001264:	4602      	mov	r2, r0
 8001266:	460b      	mov	r3, r1
 8001268:	4620      	mov	r0, r4
 800126a:	4629      	mov	r1, r5
 800126c:	f7ff f82e 	bl	80002cc <__adddf3>
 8001270:	4602      	mov	r2, r0
 8001272:	460b      	mov	r3, r1
 8001274:	e9c7 2306 	strd	r2, r3, [r7, #24]
    return output;
 8001278:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 800127c:	f7ff fcb4 	bl	8000be8 <__aeabi_d2f>
 8001280:	4603      	mov	r3, r0
 8001282:	ee07 3a90 	vmov	s15, r3
  }
}
 8001286:	eeb0 0a67 	vmov.f32	s0, s15
 800128a:	3728      	adds	r7, #40	; 0x28
 800128c:	46bd      	mov	sp, r7
 800128e:	bdb0      	pop	{r4, r5, r7, pc}

08001290 <UpdateMotorsFreq>:

void UpdateMotorsFreq(TIM_HandleTypeDef** motors, uint8_t* motors_num, uint8_t* motors_channel, float* distances){
 8001290:	b5b0      	push	{r4, r5, r7, lr}
 8001292:	b08c      	sub	sp, #48	; 0x30
 8001294:	af06      	add	r7, sp, #24
 8001296:	60f8      	str	r0, [r7, #12]
 8001298:	60b9      	str	r1, [r7, #8]
 800129a:	607a      	str	r2, [r7, #4]
 800129c:	603b      	str	r3, [r7, #0]
  float freq = 0.0;
 800129e:	f04f 0300 	mov.w	r3, #0
 80012a2:	613b      	str	r3, [r7, #16]
  for(int i = 0; i < 4; i++){
 80012a4:	2300      	movs	r3, #0
 80012a6:	617b      	str	r3, [r7, #20]
 80012a8:	e04f      	b.n	800134a <UpdateMotorsFreq+0xba>
    freq = map_clamped(distances[i], 5.0, 300.0, 10.0, 1.0);
 80012aa:	697b      	ldr	r3, [r7, #20]
 80012ac:	009b      	lsls	r3, r3, #2
 80012ae:	683a      	ldr	r2, [r7, #0]
 80012b0:	4413      	add	r3, r2
 80012b2:	edd3 7a00 	vldr	s15, [r3]
 80012b6:	eeb7 2a00 	vmov.f32	s4, #112	; 0x3f800000  1.0
 80012ba:	eef2 1a04 	vmov.f32	s3, #36	; 0x41200000  10.0
 80012be:	ed9f 1a27 	vldr	s2, [pc, #156]	; 800135c <UpdateMotorsFreq+0xcc>
 80012c2:	eef1 0a04 	vmov.f32	s1, #20	; 0x40a00000  5.0
 80012c6:	eeb0 0a67 	vmov.f32	s0, s15
 80012ca:	f7ff ff75 	bl	80011b8 <map_clamped>
 80012ce:	ed87 0a04 	vstr	s0, [r7, #16]
    sprintf(buff, "DIST %d: %.2f\tFREQ %d: %.2f\n", i, distances[i], i, freq);
 80012d2:	697b      	ldr	r3, [r7, #20]
 80012d4:	009b      	lsls	r3, r3, #2
 80012d6:	683a      	ldr	r2, [r7, #0]
 80012d8:	4413      	add	r3, r2
 80012da:	681b      	ldr	r3, [r3, #0]
 80012dc:	4618      	mov	r0, r3
 80012de:	f7ff f953 	bl	8000588 <__aeabi_f2d>
 80012e2:	4604      	mov	r4, r0
 80012e4:	460d      	mov	r5, r1
 80012e6:	6938      	ldr	r0, [r7, #16]
 80012e8:	f7ff f94e 	bl	8000588 <__aeabi_f2d>
 80012ec:	4602      	mov	r2, r0
 80012ee:	460b      	mov	r3, r1
 80012f0:	e9cd 2304 	strd	r2, r3, [sp, #16]
 80012f4:	697b      	ldr	r3, [r7, #20]
 80012f6:	9302      	str	r3, [sp, #8]
 80012f8:	e9cd 4500 	strd	r4, r5, [sp]
 80012fc:	697a      	ldr	r2, [r7, #20]
 80012fe:	4918      	ldr	r1, [pc, #96]	; (8001360 <UpdateMotorsFreq+0xd0>)
 8001300:	4818      	ldr	r0, [pc, #96]	; (8001364 <UpdateMotorsFreq+0xd4>)
 8001302:	f005 fa9b 	bl	800683c <siprintf>
    HAL_UART_Transmit(&huart2, buff, strlen(buff), 10000);
 8001306:	4817      	ldr	r0, [pc, #92]	; (8001364 <UpdateMotorsFreq+0xd4>)
 8001308:	f7fe ff82 	bl	8000210 <strlen>
 800130c:	4603      	mov	r3, r0
 800130e:	b29a      	uxth	r2, r3
 8001310:	f242 7310 	movw	r3, #10000	; 0x2710
 8001314:	4913      	ldr	r1, [pc, #76]	; (8001364 <UpdateMotorsFreq+0xd4>)
 8001316:	4814      	ldr	r0, [pc, #80]	; (8001368 <UpdateMotorsFreq+0xd8>)
 8001318:	f003 fe0f 	bl	8004f3a <HAL_UART_Transmit>
    changeTimerFrequency(motors[i], motors_num[i], motors_channel[i], freq, 100);
 800131c:	697b      	ldr	r3, [r7, #20]
 800131e:	009b      	lsls	r3, r3, #2
 8001320:	68fa      	ldr	r2, [r7, #12]
 8001322:	4413      	add	r3, r2
 8001324:	6818      	ldr	r0, [r3, #0]
 8001326:	697b      	ldr	r3, [r7, #20]
 8001328:	68ba      	ldr	r2, [r7, #8]
 800132a:	4413      	add	r3, r2
 800132c:	781b      	ldrb	r3, [r3, #0]
 800132e:	4619      	mov	r1, r3
 8001330:	697b      	ldr	r3, [r7, #20]
 8001332:	687a      	ldr	r2, [r7, #4]
 8001334:	4413      	add	r3, r2
 8001336:	781b      	ldrb	r3, [r3, #0]
 8001338:	461a      	mov	r2, r3
 800133a:	2364      	movs	r3, #100	; 0x64
 800133c:	ed97 0a04 	vldr	s0, [r7, #16]
 8001340:	f7ff fe58 	bl	8000ff4 <changeTimerFrequency>
  for(int i = 0; i < 4; i++){
 8001344:	697b      	ldr	r3, [r7, #20]
 8001346:	3301      	adds	r3, #1
 8001348:	617b      	str	r3, [r7, #20]
 800134a:	697b      	ldr	r3, [r7, #20]
 800134c:	2b03      	cmp	r3, #3
 800134e:	ddac      	ble.n	80012aa <UpdateMotorsFreq+0x1a>
  }
}
 8001350:	bf00      	nop
 8001352:	bf00      	nop
 8001354:	3718      	adds	r7, #24
 8001356:	46bd      	mov	sp, r7
 8001358:	bdb0      	pop	{r4, r5, r7, pc}
 800135a:	bf00      	nop
 800135c:	43960000 	.word	0x43960000
 8001360:	08008d00 	.word	0x08008d00
 8001364:	20000350 	.word	0x20000350
 8001368:	200004a8 	.word	0x200004a8

0800136c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800136c:	b580      	push	{r7, lr}
 800136e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001370:	f001 f8d0 	bl	8002514 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001374:	f000 f8d8 	bl	8001528 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001378:	f000 fc60 	bl	8001c3c <MX_GPIO_Init>
  MX_USART2_UART_Init();
 800137c:	f000 fc34 	bl	8001be8 <MX_USART2_UART_Init>
  MX_TIM1_Init();
 8001380:	f000 f940 	bl	8001604 <MX_TIM1_Init>
  MX_TIM3_Init();
 8001384:	f000 f9e0 	bl	8001748 <MX_TIM3_Init>
  MX_TIM4_Init();
 8001388:	f000 fa56 	bl	8001838 <MX_TIM4_Init>
  MX_TIM5_Init();
 800138c:	f000 facc 	bl	8001928 <MX_TIM5_Init>
  MX_TIM8_Init();
 8001390:	f000 fb24 	bl	80019dc <MX_TIM8_Init>
  MX_TIM12_Init();
 8001394:	f000 fbc4 	bl	8001b20 <MX_TIM12_Init>
  /* USER CODE BEGIN 2 */
  HCSR04_Init(HCSR04_SENSOR1, &htim2);
 8001398:	4955      	ldr	r1, [pc, #340]	; (80014f0 <main+0x184>)
 800139a:	2000      	movs	r0, #0
 800139c:	f004 f8be 	bl	800551c <HCSR04_Init>
  HCSR04_Init(HCSR04_SENSOR2, &htim2);
 80013a0:	4953      	ldr	r1, [pc, #332]	; (80014f0 <main+0x184>)
 80013a2:	2001      	movs	r0, #1
 80013a4:	f004 f8ba 	bl	800551c <HCSR04_Init>
  HCSR04_Init(HCSR04_SENSOR3, &htim2);
 80013a8:	4951      	ldr	r1, [pc, #324]	; (80014f0 <main+0x184>)
 80013aa:	2002      	movs	r0, #2
 80013ac:	f004 f8b6 	bl	800551c <HCSR04_Init>
  HCSR04_Init(HCSR04_SENSOR4, &htim2);
 80013b0:	494f      	ldr	r1, [pc, #316]	; (80014f0 <main+0x184>)
 80013b2:	2003      	movs	r0, #3
 80013b4:	f004 f8b2 	bl	800551c <HCSR04_Init>
  //START MOTOR TIMER 1,2,5,6 (middle 3 and 4 are not used)
  //1->TIM1, 2->TIM3, 3->TIM4, 4->TIM5, 5->TIM8, 6->TIM12
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 80013b8:	2100      	movs	r1, #0
 80013ba:	484e      	ldr	r0, [pc, #312]	; (80014f4 <main+0x188>)
 80013bc:	f002 fa7a 	bl	80038b4 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1);
 80013c0:	2100      	movs	r1, #0
 80013c2:	484d      	ldr	r0, [pc, #308]	; (80014f8 <main+0x18c>)
 80013c4:	f002 fa76 	bl	80038b4 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim8, TIM_CHANNEL_1);
 80013c8:	2100      	movs	r1, #0
 80013ca:	484c      	ldr	r0, [pc, #304]	; (80014fc <main+0x190>)
 80013cc:	f002 fa72 	bl	80038b4 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim12, TIM_CHANNEL_1);
 80013d0:	2100      	movs	r1, #0
 80013d2:	484b      	ldr	r0, [pc, #300]	; (8001500 <main+0x194>)
 80013d4:	f002 fa6e 	bl	80038b4 <HAL_TIM_PWM_Start>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  Distance1 = HCSR04_Read(HCSR04_SENSOR1);
 80013d8:	2000      	movs	r0, #0
 80013da:	f004 fd11 	bl	8005e00 <HCSR04_Read>
 80013de:	eef0 7a40 	vmov.f32	s15, s0
 80013e2:	4b48      	ldr	r3, [pc, #288]	; (8001504 <main+0x198>)
 80013e4:	edc3 7a00 	vstr	s15, [r3]
	  Distance2 = HCSR04_Read(HCSR04_SENSOR2);
 80013e8:	2001      	movs	r0, #1
 80013ea:	f004 fd09 	bl	8005e00 <HCSR04_Read>
 80013ee:	eef0 7a40 	vmov.f32	s15, s0
 80013f2:	4b45      	ldr	r3, [pc, #276]	; (8001508 <main+0x19c>)
 80013f4:	edc3 7a00 	vstr	s15, [r3]
	  Distance3 = HCSR04_Read(HCSR04_SENSOR3);
 80013f8:	2002      	movs	r0, #2
 80013fa:	f004 fd01 	bl	8005e00 <HCSR04_Read>
 80013fe:	eef0 7a40 	vmov.f32	s15, s0
 8001402:	4b42      	ldr	r3, [pc, #264]	; (800150c <main+0x1a0>)
 8001404:	edc3 7a00 	vstr	s15, [r3]
	  Distance4 = HCSR04_Read(HCSR04_SENSOR4);
 8001408:	2003      	movs	r0, #3
 800140a:	f004 fcf9 	bl	8005e00 <HCSR04_Read>
 800140e:	eef0 7a40 	vmov.f32	s15, s0
 8001412:	4b3f      	ldr	r3, [pc, #252]	; (8001510 <main+0x1a4>)
 8001414:	edc3 7a00 	vstr	s15, [r3]
    distances[0] = Distance1;
 8001418:	4b3a      	ldr	r3, [pc, #232]	; (8001504 <main+0x198>)
 800141a:	681b      	ldr	r3, [r3, #0]
 800141c:	4a3d      	ldr	r2, [pc, #244]	; (8001514 <main+0x1a8>)
 800141e:	6013      	str	r3, [r2, #0]
    distances[1] = Distance2;
 8001420:	4b39      	ldr	r3, [pc, #228]	; (8001508 <main+0x19c>)
 8001422:	681b      	ldr	r3, [r3, #0]
 8001424:	4a3b      	ldr	r2, [pc, #236]	; (8001514 <main+0x1a8>)
 8001426:	6053      	str	r3, [r2, #4]
    distances[2] = Distance3;
 8001428:	4b38      	ldr	r3, [pc, #224]	; (800150c <main+0x1a0>)
 800142a:	681b      	ldr	r3, [r3, #0]
 800142c:	4a39      	ldr	r2, [pc, #228]	; (8001514 <main+0x1a8>)
 800142e:	6093      	str	r3, [r2, #8]
    distances[3] = Distance4;
 8001430:	4b37      	ldr	r3, [pc, #220]	; (8001510 <main+0x1a4>)
 8001432:	681b      	ldr	r3, [r3, #0]
 8001434:	4a37      	ldr	r2, [pc, #220]	; (8001514 <main+0x1a8>)
 8001436:	60d3      	str	r3, [r2, #12]
	  sprintf(buff, "Dist= %.2f cm    ", Distance1);
 8001438:	4b32      	ldr	r3, [pc, #200]	; (8001504 <main+0x198>)
 800143a:	681b      	ldr	r3, [r3, #0]
 800143c:	4618      	mov	r0, r3
 800143e:	f7ff f8a3 	bl	8000588 <__aeabi_f2d>
 8001442:	4602      	mov	r2, r0
 8001444:	460b      	mov	r3, r1
 8001446:	4934      	ldr	r1, [pc, #208]	; (8001518 <main+0x1ac>)
 8001448:	4834      	ldr	r0, [pc, #208]	; (800151c <main+0x1b0>)
 800144a:	f005 f9f7 	bl	800683c <siprintf>
	  HAL_UART_Transmit(&huart2, buff, strlen(buff), 1000);
 800144e:	4833      	ldr	r0, [pc, #204]	; (800151c <main+0x1b0>)
 8001450:	f7fe fede 	bl	8000210 <strlen>
 8001454:	4603      	mov	r3, r0
 8001456:	b29a      	uxth	r2, r3
 8001458:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800145c:	492f      	ldr	r1, [pc, #188]	; (800151c <main+0x1b0>)
 800145e:	4830      	ldr	r0, [pc, #192]	; (8001520 <main+0x1b4>)
 8001460:	f003 fd6b 	bl	8004f3a <HAL_UART_Transmit>
	  sprintf(buff, "Dist= %.2f cm    ", Distance2);
 8001464:	4b28      	ldr	r3, [pc, #160]	; (8001508 <main+0x19c>)
 8001466:	681b      	ldr	r3, [r3, #0]
 8001468:	4618      	mov	r0, r3
 800146a:	f7ff f88d 	bl	8000588 <__aeabi_f2d>
 800146e:	4602      	mov	r2, r0
 8001470:	460b      	mov	r3, r1
 8001472:	4929      	ldr	r1, [pc, #164]	; (8001518 <main+0x1ac>)
 8001474:	4829      	ldr	r0, [pc, #164]	; (800151c <main+0x1b0>)
 8001476:	f005 f9e1 	bl	800683c <siprintf>
	  HAL_UART_Transmit(&huart2, buff, strlen(buff), 1000);
 800147a:	4828      	ldr	r0, [pc, #160]	; (800151c <main+0x1b0>)
 800147c:	f7fe fec8 	bl	8000210 <strlen>
 8001480:	4603      	mov	r3, r0
 8001482:	b29a      	uxth	r2, r3
 8001484:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001488:	4924      	ldr	r1, [pc, #144]	; (800151c <main+0x1b0>)
 800148a:	4825      	ldr	r0, [pc, #148]	; (8001520 <main+0x1b4>)
 800148c:	f003 fd55 	bl	8004f3a <HAL_UART_Transmit>
	  sprintf(buff, "Dist= %.2f cm    ", Distance3);
 8001490:	4b1e      	ldr	r3, [pc, #120]	; (800150c <main+0x1a0>)
 8001492:	681b      	ldr	r3, [r3, #0]
 8001494:	4618      	mov	r0, r3
 8001496:	f7ff f877 	bl	8000588 <__aeabi_f2d>
 800149a:	4602      	mov	r2, r0
 800149c:	460b      	mov	r3, r1
 800149e:	491e      	ldr	r1, [pc, #120]	; (8001518 <main+0x1ac>)
 80014a0:	481e      	ldr	r0, [pc, #120]	; (800151c <main+0x1b0>)
 80014a2:	f005 f9cb 	bl	800683c <siprintf>
	  HAL_UART_Transmit(&huart2, buff, strlen(buff), 1000);
 80014a6:	481d      	ldr	r0, [pc, #116]	; (800151c <main+0x1b0>)
 80014a8:	f7fe feb2 	bl	8000210 <strlen>
 80014ac:	4603      	mov	r3, r0
 80014ae:	b29a      	uxth	r2, r3
 80014b0:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80014b4:	4919      	ldr	r1, [pc, #100]	; (800151c <main+0x1b0>)
 80014b6:	481a      	ldr	r0, [pc, #104]	; (8001520 <main+0x1b4>)
 80014b8:	f003 fd3f 	bl	8004f3a <HAL_UART_Transmit>
	  sprintf(buff, "Dist= %.2f cm\n", Distance4);
 80014bc:	4b14      	ldr	r3, [pc, #80]	; (8001510 <main+0x1a4>)
 80014be:	681b      	ldr	r3, [r3, #0]
 80014c0:	4618      	mov	r0, r3
 80014c2:	f7ff f861 	bl	8000588 <__aeabi_f2d>
 80014c6:	4602      	mov	r2, r0
 80014c8:	460b      	mov	r3, r1
 80014ca:	4916      	ldr	r1, [pc, #88]	; (8001524 <main+0x1b8>)
 80014cc:	4813      	ldr	r0, [pc, #76]	; (800151c <main+0x1b0>)
 80014ce:	f005 f9b5 	bl	800683c <siprintf>
	  HAL_UART_Transmit(&huart2, buff, strlen(buff), 1000);
 80014d2:	4812      	ldr	r0, [pc, #72]	; (800151c <main+0x1b0>)
 80014d4:	f7fe fe9c 	bl	8000210 <strlen>
 80014d8:	4603      	mov	r3, r0
 80014da:	b29a      	uxth	r2, r3
 80014dc:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80014e0:	490e      	ldr	r1, [pc, #56]	; (800151c <main+0x1b0>)
 80014e2:	480f      	ldr	r0, [pc, #60]	; (8001520 <main+0x1b4>)
 80014e4:	f003 fd29 	bl	8004f3a <HAL_UART_Transmit>
	  HAL_Delay(10);
 80014e8:	200a      	movs	r0, #10
 80014ea:	f001 f885 	bl	80025f8 <HAL_Delay>
  {
 80014ee:	e773      	b.n	80013d8 <main+0x6c>
 80014f0:	20000460 	.word	0x20000460
 80014f4:	20000418 	.word	0x20000418
 80014f8:	200003cc 	.word	0x200003cc
 80014fc:	200002c0 	.word	0x200002c0
 8001500:	20000500 	.word	0x20000500
 8001504:	20000214 	.word	0x20000214
 8001508:	20000218 	.word	0x20000218
 800150c:	2000021c 	.word	0x2000021c
 8001510:	20000220 	.word	0x20000220
 8001514:	200004ec 	.word	0x200004ec
 8001518:	08008d20 	.word	0x08008d20
 800151c:	20000350 	.word	0x20000350
 8001520:	200004a8 	.word	0x200004a8
 8001524:	08008d34 	.word	0x08008d34

08001528 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001528:	b580      	push	{r7, lr}
 800152a:	b094      	sub	sp, #80	; 0x50
 800152c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800152e:	f107 031c 	add.w	r3, r7, #28
 8001532:	2234      	movs	r2, #52	; 0x34
 8001534:	2100      	movs	r1, #0
 8001536:	4618      	mov	r0, r3
 8001538:	f004 fd0e 	bl	8005f58 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800153c:	f107 0308 	add.w	r3, r7, #8
 8001540:	2200      	movs	r2, #0
 8001542:	601a      	str	r2, [r3, #0]
 8001544:	605a      	str	r2, [r3, #4]
 8001546:	609a      	str	r2, [r3, #8]
 8001548:	60da      	str	r2, [r3, #12]
 800154a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800154c:	2300      	movs	r3, #0
 800154e:	607b      	str	r3, [r7, #4]
 8001550:	4b2a      	ldr	r3, [pc, #168]	; (80015fc <SystemClock_Config+0xd4>)
 8001552:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001554:	4a29      	ldr	r2, [pc, #164]	; (80015fc <SystemClock_Config+0xd4>)
 8001556:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800155a:	6413      	str	r3, [r2, #64]	; 0x40
 800155c:	4b27      	ldr	r3, [pc, #156]	; (80015fc <SystemClock_Config+0xd4>)
 800155e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001560:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001564:	607b      	str	r3, [r7, #4]
 8001566:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8001568:	2300      	movs	r3, #0
 800156a:	603b      	str	r3, [r7, #0]
 800156c:	4b24      	ldr	r3, [pc, #144]	; (8001600 <SystemClock_Config+0xd8>)
 800156e:	681b      	ldr	r3, [r3, #0]
 8001570:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8001574:	4a22      	ldr	r2, [pc, #136]	; (8001600 <SystemClock_Config+0xd8>)
 8001576:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800157a:	6013      	str	r3, [r2, #0]
 800157c:	4b20      	ldr	r3, [pc, #128]	; (8001600 <SystemClock_Config+0xd8>)
 800157e:	681b      	ldr	r3, [r3, #0]
 8001580:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001584:	603b      	str	r3, [r7, #0]
 8001586:	683b      	ldr	r3, [r7, #0]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001588:	2302      	movs	r3, #2
 800158a:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800158c:	2301      	movs	r3, #1
 800158e:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001590:	2310      	movs	r3, #16
 8001592:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001594:	2302      	movs	r3, #2
 8001596:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001598:	2300      	movs	r3, #0
 800159a:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 16;
 800159c:	2310      	movs	r3, #16
 800159e:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 336;
 80015a0:	f44f 73a8 	mov.w	r3, #336	; 0x150
 80015a4:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 80015a6:	2304      	movs	r3, #4
 80015a8:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 80015aa:	2302      	movs	r3, #2
 80015ac:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 80015ae:	2302      	movs	r3, #2
 80015b0:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80015b2:	f107 031c 	add.w	r3, r7, #28
 80015b6:	4618      	mov	r0, r3
 80015b8:	f001 fdce 	bl	8003158 <HAL_RCC_OscConfig>
 80015bc:	4603      	mov	r3, r0
 80015be:	2b00      	cmp	r3, #0
 80015c0:	d001      	beq.n	80015c6 <SystemClock_Config+0x9e>
  {
    Error_Handler();
 80015c2:	f000 fbfb 	bl	8001dbc <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80015c6:	230f      	movs	r3, #15
 80015c8:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80015ca:	2302      	movs	r3, #2
 80015cc:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80015ce:	2300      	movs	r3, #0
 80015d0:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80015d2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80015d6:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80015d8:	2300      	movs	r3, #0
 80015da:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80015dc:	f107 0308 	add.w	r3, r7, #8
 80015e0:	2102      	movs	r1, #2
 80015e2:	4618      	mov	r0, r3
 80015e4:	f001 faec 	bl	8002bc0 <HAL_RCC_ClockConfig>
 80015e8:	4603      	mov	r3, r0
 80015ea:	2b00      	cmp	r3, #0
 80015ec:	d001      	beq.n	80015f2 <SystemClock_Config+0xca>
  {
    Error_Handler();
 80015ee:	f000 fbe5 	bl	8001dbc <Error_Handler>
  }
}
 80015f2:	bf00      	nop
 80015f4:	3750      	adds	r7, #80	; 0x50
 80015f6:	46bd      	mov	sp, r7
 80015f8:	bd80      	pop	{r7, pc}
 80015fa:	bf00      	nop
 80015fc:	40023800 	.word	0x40023800
 8001600:	40007000 	.word	0x40007000

08001604 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8001604:	b580      	push	{r7, lr}
 8001606:	b096      	sub	sp, #88	; 0x58
 8001608:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800160a:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800160e:	2200      	movs	r2, #0
 8001610:	601a      	str	r2, [r3, #0]
 8001612:	605a      	str	r2, [r3, #4]
 8001614:	609a      	str	r2, [r3, #8]
 8001616:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001618:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800161c:	2200      	movs	r2, #0
 800161e:	601a      	str	r2, [r3, #0]
 8001620:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001622:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001626:	2200      	movs	r2, #0
 8001628:	601a      	str	r2, [r3, #0]
 800162a:	605a      	str	r2, [r3, #4]
 800162c:	609a      	str	r2, [r3, #8]
 800162e:	60da      	str	r2, [r3, #12]
 8001630:	611a      	str	r2, [r3, #16]
 8001632:	615a      	str	r2, [r3, #20]
 8001634:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8001636:	1d3b      	adds	r3, r7, #4
 8001638:	2220      	movs	r2, #32
 800163a:	2100      	movs	r1, #0
 800163c:	4618      	mov	r0, r3
 800163e:	f004 fc8b 	bl	8005f58 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8001642:	4b3f      	ldr	r3, [pc, #252]	; (8001740 <MX_TIM1_Init+0x13c>)
 8001644:	4a3f      	ldr	r2, [pc, #252]	; (8001744 <MX_TIM1_Init+0x140>)
 8001646:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 3000-1;
 8001648:	4b3d      	ldr	r3, [pc, #244]	; (8001740 <MX_TIM1_Init+0x13c>)
 800164a:	f640 32b7 	movw	r2, #2999	; 0xbb7
 800164e:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001650:	4b3b      	ldr	r3, [pc, #236]	; (8001740 <MX_TIM1_Init+0x13c>)
 8001652:	2200      	movs	r2, #0
 8001654:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 8001656:	4b3a      	ldr	r3, [pc, #232]	; (8001740 <MX_TIM1_Init+0x13c>)
 8001658:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800165c:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800165e:	4b38      	ldr	r3, [pc, #224]	; (8001740 <MX_TIM1_Init+0x13c>)
 8001660:	2200      	movs	r2, #0
 8001662:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8001664:	4b36      	ldr	r3, [pc, #216]	; (8001740 <MX_TIM1_Init+0x13c>)
 8001666:	2200      	movs	r2, #0
 8001668:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 800166a:	4b35      	ldr	r3, [pc, #212]	; (8001740 <MX_TIM1_Init+0x13c>)
 800166c:	2280      	movs	r2, #128	; 0x80
 800166e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8001670:	4833      	ldr	r0, [pc, #204]	; (8001740 <MX_TIM1_Init+0x13c>)
 8001672:	f002 f80f 	bl	8003694 <HAL_TIM_Base_Init>
 8001676:	4603      	mov	r3, r0
 8001678:	2b00      	cmp	r3, #0
 800167a:	d001      	beq.n	8001680 <MX_TIM1_Init+0x7c>
  {
    Error_Handler();
 800167c:	f000 fb9e 	bl	8001dbc <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001680:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001684:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8001686:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800168a:	4619      	mov	r1, r3
 800168c:	482c      	ldr	r0, [pc, #176]	; (8001740 <MX_TIM1_Init+0x13c>)
 800168e:	f002 fdc1 	bl	8004214 <HAL_TIM_ConfigClockSource>
 8001692:	4603      	mov	r3, r0
 8001694:	2b00      	cmp	r3, #0
 8001696:	d001      	beq.n	800169c <MX_TIM1_Init+0x98>
  {
    Error_Handler();
 8001698:	f000 fb90 	bl	8001dbc <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 800169c:	4828      	ldr	r0, [pc, #160]	; (8001740 <MX_TIM1_Init+0x13c>)
 800169e:	f002 f8b9 	bl	8003814 <HAL_TIM_PWM_Init>
 80016a2:	4603      	mov	r3, r0
 80016a4:	2b00      	cmp	r3, #0
 80016a6:	d001      	beq.n	80016ac <MX_TIM1_Init+0xa8>
  {
    Error_Handler();
 80016a8:	f000 fb88 	bl	8001dbc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80016ac:	2300      	movs	r3, #0
 80016ae:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80016b0:	2300      	movs	r3, #0
 80016b2:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80016b4:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80016b8:	4619      	mov	r1, r3
 80016ba:	4821      	ldr	r0, [pc, #132]	; (8001740 <MX_TIM1_Init+0x13c>)
 80016bc:	f003 fb0e 	bl	8004cdc <HAL_TIMEx_MasterConfigSynchronization>
 80016c0:	4603      	mov	r3, r0
 80016c2:	2b00      	cmp	r3, #0
 80016c4:	d001      	beq.n	80016ca <MX_TIM1_Init+0xc6>
  {
    Error_Handler();
 80016c6:	f000 fb79 	bl	8001dbc <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80016ca:	2360      	movs	r3, #96	; 0x60
 80016cc:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 100;
 80016ce:	2364      	movs	r3, #100	; 0x64
 80016d0:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80016d2:	2300      	movs	r3, #0
 80016d4:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80016d6:	2300      	movs	r3, #0
 80016d8:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80016da:	2300      	movs	r3, #0
 80016dc:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80016de:	2300      	movs	r3, #0
 80016e0:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80016e2:	2300      	movs	r3, #0
 80016e4:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80016e6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80016ea:	2200      	movs	r2, #0
 80016ec:	4619      	mov	r1, r3
 80016ee:	4814      	ldr	r0, [pc, #80]	; (8001740 <MX_TIM1_Init+0x13c>)
 80016f0:	f002 fcce 	bl	8004090 <HAL_TIM_PWM_ConfigChannel>
 80016f4:	4603      	mov	r3, r0
 80016f6:	2b00      	cmp	r3, #0
 80016f8:	d001      	beq.n	80016fe <MX_TIM1_Init+0xfa>
  {
    Error_Handler();
 80016fa:	f000 fb5f 	bl	8001dbc <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80016fe:	2300      	movs	r3, #0
 8001700:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8001702:	2300      	movs	r3, #0
 8001704:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8001706:	2300      	movs	r3, #0
 8001708:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 800170a:	2300      	movs	r3, #0
 800170c:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 800170e:	2300      	movs	r3, #0
 8001710:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8001712:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001716:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8001718:	2300      	movs	r3, #0
 800171a:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 800171c:	1d3b      	adds	r3, r7, #4
 800171e:	4619      	mov	r1, r3
 8001720:	4807      	ldr	r0, [pc, #28]	; (8001740 <MX_TIM1_Init+0x13c>)
 8001722:	f003 fb57 	bl	8004dd4 <HAL_TIMEx_ConfigBreakDeadTime>
 8001726:	4603      	mov	r3, r0
 8001728:	2b00      	cmp	r3, #0
 800172a:	d001      	beq.n	8001730 <MX_TIM1_Init+0x12c>
  {
    Error_Handler();
 800172c:	f000 fb46 	bl	8001dbc <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8001730:	4803      	ldr	r0, [pc, #12]	; (8001740 <MX_TIM1_Init+0x13c>)
 8001732:	f000 fc71 	bl	8002018 <HAL_TIM_MspPostInit>

}
 8001736:	bf00      	nop
 8001738:	3758      	adds	r7, #88	; 0x58
 800173a:	46bd      	mov	sp, r7
 800173c:	bd80      	pop	{r7, pc}
 800173e:	bf00      	nop
 8001740:	20000418 	.word	0x20000418
 8001744:	40010000 	.word	0x40010000

08001748 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8001748:	b580      	push	{r7, lr}
 800174a:	b08e      	sub	sp, #56	; 0x38
 800174c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800174e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001752:	2200      	movs	r2, #0
 8001754:	601a      	str	r2, [r3, #0]
 8001756:	605a      	str	r2, [r3, #4]
 8001758:	609a      	str	r2, [r3, #8]
 800175a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800175c:	f107 0320 	add.w	r3, r7, #32
 8001760:	2200      	movs	r2, #0
 8001762:	601a      	str	r2, [r3, #0]
 8001764:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001766:	1d3b      	adds	r3, r7, #4
 8001768:	2200      	movs	r2, #0
 800176a:	601a      	str	r2, [r3, #0]
 800176c:	605a      	str	r2, [r3, #4]
 800176e:	609a      	str	r2, [r3, #8]
 8001770:	60da      	str	r2, [r3, #12]
 8001772:	611a      	str	r2, [r3, #16]
 8001774:	615a      	str	r2, [r3, #20]
 8001776:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001778:	4b2d      	ldr	r3, [pc, #180]	; (8001830 <MX_TIM3_Init+0xe8>)
 800177a:	4a2e      	ldr	r2, [pc, #184]	; (8001834 <MX_TIM3_Init+0xec>)
 800177c:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 3000-1;
 800177e:	4b2c      	ldr	r3, [pc, #176]	; (8001830 <MX_TIM3_Init+0xe8>)
 8001780:	f640 32b7 	movw	r2, #2999	; 0xbb7
 8001784:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001786:	4b2a      	ldr	r3, [pc, #168]	; (8001830 <MX_TIM3_Init+0xe8>)
 8001788:	2200      	movs	r2, #0
 800178a:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 800178c:	4b28      	ldr	r3, [pc, #160]	; (8001830 <MX_TIM3_Init+0xe8>)
 800178e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001792:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001794:	4b26      	ldr	r3, [pc, #152]	; (8001830 <MX_TIM3_Init+0xe8>)
 8001796:	2200      	movs	r2, #0
 8001798:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 800179a:	4b25      	ldr	r3, [pc, #148]	; (8001830 <MX_TIM3_Init+0xe8>)
 800179c:	2280      	movs	r2, #128	; 0x80
 800179e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 80017a0:	4823      	ldr	r0, [pc, #140]	; (8001830 <MX_TIM3_Init+0xe8>)
 80017a2:	f001 ff77 	bl	8003694 <HAL_TIM_Base_Init>
 80017a6:	4603      	mov	r3, r0
 80017a8:	2b00      	cmp	r3, #0
 80017aa:	d001      	beq.n	80017b0 <MX_TIM3_Init+0x68>
  {
    Error_Handler();
 80017ac:	f000 fb06 	bl	8001dbc <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80017b0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80017b4:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 80017b6:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80017ba:	4619      	mov	r1, r3
 80017bc:	481c      	ldr	r0, [pc, #112]	; (8001830 <MX_TIM3_Init+0xe8>)
 80017be:	f002 fd29 	bl	8004214 <HAL_TIM_ConfigClockSource>
 80017c2:	4603      	mov	r3, r0
 80017c4:	2b00      	cmp	r3, #0
 80017c6:	d001      	beq.n	80017cc <MX_TIM3_Init+0x84>
  {
    Error_Handler();
 80017c8:	f000 faf8 	bl	8001dbc <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 80017cc:	4818      	ldr	r0, [pc, #96]	; (8001830 <MX_TIM3_Init+0xe8>)
 80017ce:	f002 f821 	bl	8003814 <HAL_TIM_PWM_Init>
 80017d2:	4603      	mov	r3, r0
 80017d4:	2b00      	cmp	r3, #0
 80017d6:	d001      	beq.n	80017dc <MX_TIM3_Init+0x94>
  {
    Error_Handler();
 80017d8:	f000 faf0 	bl	8001dbc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80017dc:	2300      	movs	r3, #0
 80017de:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80017e0:	2300      	movs	r3, #0
 80017e2:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80017e4:	f107 0320 	add.w	r3, r7, #32
 80017e8:	4619      	mov	r1, r3
 80017ea:	4811      	ldr	r0, [pc, #68]	; (8001830 <MX_TIM3_Init+0xe8>)
 80017ec:	f003 fa76 	bl	8004cdc <HAL_TIMEx_MasterConfigSynchronization>
 80017f0:	4603      	mov	r3, r0
 80017f2:	2b00      	cmp	r3, #0
 80017f4:	d001      	beq.n	80017fa <MX_TIM3_Init+0xb2>
  {
    Error_Handler();
 80017f6:	f000 fae1 	bl	8001dbc <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80017fa:	2360      	movs	r3, #96	; 0x60
 80017fc:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 100;
 80017fe:	2364      	movs	r3, #100	; 0x64
 8001800:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001802:	2300      	movs	r3, #0
 8001804:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001806:	2300      	movs	r3, #0
 8001808:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800180a:	1d3b      	adds	r3, r7, #4
 800180c:	2200      	movs	r2, #0
 800180e:	4619      	mov	r1, r3
 8001810:	4807      	ldr	r0, [pc, #28]	; (8001830 <MX_TIM3_Init+0xe8>)
 8001812:	f002 fc3d 	bl	8004090 <HAL_TIM_PWM_ConfigChannel>
 8001816:	4603      	mov	r3, r0
 8001818:	2b00      	cmp	r3, #0
 800181a:	d001      	beq.n	8001820 <MX_TIM3_Init+0xd8>
  {
    Error_Handler();
 800181c:	f000 face 	bl	8001dbc <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8001820:	4803      	ldr	r0, [pc, #12]	; (8001830 <MX_TIM3_Init+0xe8>)
 8001822:	f000 fbf9 	bl	8002018 <HAL_TIM_MspPostInit>

}
 8001826:	bf00      	nop
 8001828:	3738      	adds	r7, #56	; 0x38
 800182a:	46bd      	mov	sp, r7
 800182c:	bd80      	pop	{r7, pc}
 800182e:	bf00      	nop
 8001830:	200003cc 	.word	0x200003cc
 8001834:	40000400 	.word	0x40000400

08001838 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8001838:	b580      	push	{r7, lr}
 800183a:	b08e      	sub	sp, #56	; 0x38
 800183c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800183e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001842:	2200      	movs	r2, #0
 8001844:	601a      	str	r2, [r3, #0]
 8001846:	605a      	str	r2, [r3, #4]
 8001848:	609a      	str	r2, [r3, #8]
 800184a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800184c:	f107 0320 	add.w	r3, r7, #32
 8001850:	2200      	movs	r2, #0
 8001852:	601a      	str	r2, [r3, #0]
 8001854:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001856:	1d3b      	adds	r3, r7, #4
 8001858:	2200      	movs	r2, #0
 800185a:	601a      	str	r2, [r3, #0]
 800185c:	605a      	str	r2, [r3, #4]
 800185e:	609a      	str	r2, [r3, #8]
 8001860:	60da      	str	r2, [r3, #12]
 8001862:	611a      	str	r2, [r3, #16]
 8001864:	615a      	str	r2, [r3, #20]
 8001866:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8001868:	4b2d      	ldr	r3, [pc, #180]	; (8001920 <MX_TIM4_Init+0xe8>)
 800186a:	4a2e      	ldr	r2, [pc, #184]	; (8001924 <MX_TIM4_Init+0xec>)
 800186c:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 3000-1;
 800186e:	4b2c      	ldr	r3, [pc, #176]	; (8001920 <MX_TIM4_Init+0xe8>)
 8001870:	f640 32b7 	movw	r2, #2999	; 0xbb7
 8001874:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001876:	4b2a      	ldr	r3, [pc, #168]	; (8001920 <MX_TIM4_Init+0xe8>)
 8001878:	2200      	movs	r2, #0
 800187a:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65535;
 800187c:	4b28      	ldr	r3, [pc, #160]	; (8001920 <MX_TIM4_Init+0xe8>)
 800187e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001882:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001884:	4b26      	ldr	r3, [pc, #152]	; (8001920 <MX_TIM4_Init+0xe8>)
 8001886:	2200      	movs	r2, #0
 8001888:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 800188a:	4b25      	ldr	r3, [pc, #148]	; (8001920 <MX_TIM4_Init+0xe8>)
 800188c:	2280      	movs	r2, #128	; 0x80
 800188e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8001890:	4823      	ldr	r0, [pc, #140]	; (8001920 <MX_TIM4_Init+0xe8>)
 8001892:	f001 feff 	bl	8003694 <HAL_TIM_Base_Init>
 8001896:	4603      	mov	r3, r0
 8001898:	2b00      	cmp	r3, #0
 800189a:	d001      	beq.n	80018a0 <MX_TIM4_Init+0x68>
  {
    Error_Handler();
 800189c:	f000 fa8e 	bl	8001dbc <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80018a0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80018a4:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 80018a6:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80018aa:	4619      	mov	r1, r3
 80018ac:	481c      	ldr	r0, [pc, #112]	; (8001920 <MX_TIM4_Init+0xe8>)
 80018ae:	f002 fcb1 	bl	8004214 <HAL_TIM_ConfigClockSource>
 80018b2:	4603      	mov	r3, r0
 80018b4:	2b00      	cmp	r3, #0
 80018b6:	d001      	beq.n	80018bc <MX_TIM4_Init+0x84>
  {
    Error_Handler();
 80018b8:	f000 fa80 	bl	8001dbc <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 80018bc:	4818      	ldr	r0, [pc, #96]	; (8001920 <MX_TIM4_Init+0xe8>)
 80018be:	f001 ffa9 	bl	8003814 <HAL_TIM_PWM_Init>
 80018c2:	4603      	mov	r3, r0
 80018c4:	2b00      	cmp	r3, #0
 80018c6:	d001      	beq.n	80018cc <MX_TIM4_Init+0x94>
  {
    Error_Handler();
 80018c8:	f000 fa78 	bl	8001dbc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80018cc:	2300      	movs	r3, #0
 80018ce:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80018d0:	2300      	movs	r3, #0
 80018d2:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 80018d4:	f107 0320 	add.w	r3, r7, #32
 80018d8:	4619      	mov	r1, r3
 80018da:	4811      	ldr	r0, [pc, #68]	; (8001920 <MX_TIM4_Init+0xe8>)
 80018dc:	f003 f9fe 	bl	8004cdc <HAL_TIMEx_MasterConfigSynchronization>
 80018e0:	4603      	mov	r3, r0
 80018e2:	2b00      	cmp	r3, #0
 80018e4:	d001      	beq.n	80018ea <MX_TIM4_Init+0xb2>
  {
    Error_Handler();
 80018e6:	f000 fa69 	bl	8001dbc <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80018ea:	2360      	movs	r3, #96	; 0x60
 80018ec:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 100;
 80018ee:	2364      	movs	r3, #100	; 0x64
 80018f0:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80018f2:	2300      	movs	r3, #0
 80018f4:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80018f6:	2300      	movs	r3, #0
 80018f8:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80018fa:	1d3b      	adds	r3, r7, #4
 80018fc:	2200      	movs	r2, #0
 80018fe:	4619      	mov	r1, r3
 8001900:	4807      	ldr	r0, [pc, #28]	; (8001920 <MX_TIM4_Init+0xe8>)
 8001902:	f002 fbc5 	bl	8004090 <HAL_TIM_PWM_ConfigChannel>
 8001906:	4603      	mov	r3, r0
 8001908:	2b00      	cmp	r3, #0
 800190a:	d001      	beq.n	8001910 <MX_TIM4_Init+0xd8>
  {
    Error_Handler();
 800190c:	f000 fa56 	bl	8001dbc <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 8001910:	4803      	ldr	r0, [pc, #12]	; (8001920 <MX_TIM4_Init+0xe8>)
 8001912:	f000 fb81 	bl	8002018 <HAL_TIM_MspPostInit>

}
 8001916:	bf00      	nop
 8001918:	3738      	adds	r7, #56	; 0x38
 800191a:	46bd      	mov	sp, r7
 800191c:	bd80      	pop	{r7, pc}
 800191e:	bf00      	nop
 8001920:	20000308 	.word	0x20000308
 8001924:	40000800 	.word	0x40000800

08001928 <MX_TIM5_Init>:
  * @brief TIM5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM5_Init(void)
{
 8001928:	b580      	push	{r7, lr}
 800192a:	b08a      	sub	sp, #40	; 0x28
 800192c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800192e:	f107 0320 	add.w	r3, r7, #32
 8001932:	2200      	movs	r2, #0
 8001934:	601a      	str	r2, [r3, #0]
 8001936:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001938:	1d3b      	adds	r3, r7, #4
 800193a:	2200      	movs	r2, #0
 800193c:	601a      	str	r2, [r3, #0]
 800193e:	605a      	str	r2, [r3, #4]
 8001940:	609a      	str	r2, [r3, #8]
 8001942:	60da      	str	r2, [r3, #12]
 8001944:	611a      	str	r2, [r3, #16]
 8001946:	615a      	str	r2, [r3, #20]
 8001948:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 800194a:	4b22      	ldr	r3, [pc, #136]	; (80019d4 <MX_TIM5_Init+0xac>)
 800194c:	4a22      	ldr	r2, [pc, #136]	; (80019d8 <MX_TIM5_Init+0xb0>)
 800194e:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 3000-1;
 8001950:	4b20      	ldr	r3, [pc, #128]	; (80019d4 <MX_TIM5_Init+0xac>)
 8001952:	f640 32b7 	movw	r2, #2999	; 0xbb7
 8001956:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001958:	4b1e      	ldr	r3, [pc, #120]	; (80019d4 <MX_TIM5_Init+0xac>)
 800195a:	2200      	movs	r2, #0
 800195c:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 4294967295;
 800195e:	4b1d      	ldr	r3, [pc, #116]	; (80019d4 <MX_TIM5_Init+0xac>)
 8001960:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001964:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001966:	4b1b      	ldr	r3, [pc, #108]	; (80019d4 <MX_TIM5_Init+0xac>)
 8001968:	2200      	movs	r2, #0
 800196a:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 800196c:	4b19      	ldr	r3, [pc, #100]	; (80019d4 <MX_TIM5_Init+0xac>)
 800196e:	2280      	movs	r2, #128	; 0x80
 8001970:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim5) != HAL_OK)
 8001972:	4818      	ldr	r0, [pc, #96]	; (80019d4 <MX_TIM5_Init+0xac>)
 8001974:	f001 ff4e 	bl	8003814 <HAL_TIM_PWM_Init>
 8001978:	4603      	mov	r3, r0
 800197a:	2b00      	cmp	r3, #0
 800197c:	d001      	beq.n	8001982 <MX_TIM5_Init+0x5a>
  {
    Error_Handler();
 800197e:	f000 fa1d 	bl	8001dbc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001982:	2300      	movs	r3, #0
 8001984:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001986:	2300      	movs	r3, #0
 8001988:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 800198a:	f107 0320 	add.w	r3, r7, #32
 800198e:	4619      	mov	r1, r3
 8001990:	4810      	ldr	r0, [pc, #64]	; (80019d4 <MX_TIM5_Init+0xac>)
 8001992:	f003 f9a3 	bl	8004cdc <HAL_TIMEx_MasterConfigSynchronization>
 8001996:	4603      	mov	r3, r0
 8001998:	2b00      	cmp	r3, #0
 800199a:	d001      	beq.n	80019a0 <MX_TIM5_Init+0x78>
  {
    Error_Handler();
 800199c:	f000 fa0e 	bl	8001dbc <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80019a0:	2360      	movs	r3, #96	; 0x60
 80019a2:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 100;
 80019a4:	2364      	movs	r3, #100	; 0x64
 80019a6:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80019a8:	2300      	movs	r3, #0
 80019aa:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80019ac:	2300      	movs	r3, #0
 80019ae:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim5, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80019b0:	1d3b      	adds	r3, r7, #4
 80019b2:	2200      	movs	r2, #0
 80019b4:	4619      	mov	r1, r3
 80019b6:	4807      	ldr	r0, [pc, #28]	; (80019d4 <MX_TIM5_Init+0xac>)
 80019b8:	f002 fb6a 	bl	8004090 <HAL_TIM_PWM_ConfigChannel>
 80019bc:	4603      	mov	r3, r0
 80019be:	2b00      	cmp	r3, #0
 80019c0:	d001      	beq.n	80019c6 <MX_TIM5_Init+0x9e>
  {
    Error_Handler();
 80019c2:	f000 f9fb 	bl	8001dbc <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */
  HAL_TIM_MspPostInit(&htim5);
 80019c6:	4803      	ldr	r0, [pc, #12]	; (80019d4 <MX_TIM5_Init+0xac>)
 80019c8:	f000 fb26 	bl	8002018 <HAL_TIM_MspPostInit>

}
 80019cc:	bf00      	nop
 80019ce:	3728      	adds	r7, #40	; 0x28
 80019d0:	46bd      	mov	sp, r7
 80019d2:	bd80      	pop	{r7, pc}
 80019d4:	20000384 	.word	0x20000384
 80019d8:	40000c00 	.word	0x40000c00

080019dc <MX_TIM8_Init>:
  * @brief TIM8 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM8_Init(void)
{
 80019dc:	b580      	push	{r7, lr}
 80019de:	b096      	sub	sp, #88	; 0x58
 80019e0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80019e2:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80019e6:	2200      	movs	r2, #0
 80019e8:	601a      	str	r2, [r3, #0]
 80019ea:	605a      	str	r2, [r3, #4]
 80019ec:	609a      	str	r2, [r3, #8]
 80019ee:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80019f0:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80019f4:	2200      	movs	r2, #0
 80019f6:	601a      	str	r2, [r3, #0]
 80019f8:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80019fa:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80019fe:	2200      	movs	r2, #0
 8001a00:	601a      	str	r2, [r3, #0]
 8001a02:	605a      	str	r2, [r3, #4]
 8001a04:	609a      	str	r2, [r3, #8]
 8001a06:	60da      	str	r2, [r3, #12]
 8001a08:	611a      	str	r2, [r3, #16]
 8001a0a:	615a      	str	r2, [r3, #20]
 8001a0c:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8001a0e:	1d3b      	adds	r3, r7, #4
 8001a10:	2220      	movs	r2, #32
 8001a12:	2100      	movs	r1, #0
 8001a14:	4618      	mov	r0, r3
 8001a16:	f004 fa9f 	bl	8005f58 <memset>

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 8001a1a:	4b3f      	ldr	r3, [pc, #252]	; (8001b18 <MX_TIM8_Init+0x13c>)
 8001a1c:	4a3f      	ldr	r2, [pc, #252]	; (8001b1c <MX_TIM8_Init+0x140>)
 8001a1e:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 3000-1;
 8001a20:	4b3d      	ldr	r3, [pc, #244]	; (8001b18 <MX_TIM8_Init+0x13c>)
 8001a22:	f640 32b7 	movw	r2, #2999	; 0xbb7
 8001a26:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001a28:	4b3b      	ldr	r3, [pc, #236]	; (8001b18 <MX_TIM8_Init+0x13c>)
 8001a2a:	2200      	movs	r2, #0
 8001a2c:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 65535;
 8001a2e:	4b3a      	ldr	r3, [pc, #232]	; (8001b18 <MX_TIM8_Init+0x13c>)
 8001a30:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001a34:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001a36:	4b38      	ldr	r3, [pc, #224]	; (8001b18 <MX_TIM8_Init+0x13c>)
 8001a38:	2200      	movs	r2, #0
 8001a3a:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 8001a3c:	4b36      	ldr	r3, [pc, #216]	; (8001b18 <MX_TIM8_Init+0x13c>)
 8001a3e:	2200      	movs	r2, #0
 8001a40:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001a42:	4b35      	ldr	r3, [pc, #212]	; (8001b18 <MX_TIM8_Init+0x13c>)
 8001a44:	2280      	movs	r2, #128	; 0x80
 8001a46:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim8) != HAL_OK)
 8001a48:	4833      	ldr	r0, [pc, #204]	; (8001b18 <MX_TIM8_Init+0x13c>)
 8001a4a:	f001 fe23 	bl	8003694 <HAL_TIM_Base_Init>
 8001a4e:	4603      	mov	r3, r0
 8001a50:	2b00      	cmp	r3, #0
 8001a52:	d001      	beq.n	8001a58 <MX_TIM8_Init+0x7c>
  {
    Error_Handler();
 8001a54:	f000 f9b2 	bl	8001dbc <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001a58:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001a5c:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_ConfigClockSource(&htim8, &sClockSourceConfig) != HAL_OK)
 8001a5e:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8001a62:	4619      	mov	r1, r3
 8001a64:	482c      	ldr	r0, [pc, #176]	; (8001b18 <MX_TIM8_Init+0x13c>)
 8001a66:	f002 fbd5 	bl	8004214 <HAL_TIM_ConfigClockSource>
 8001a6a:	4603      	mov	r3, r0
 8001a6c:	2b00      	cmp	r3, #0
 8001a6e:	d001      	beq.n	8001a74 <MX_TIM8_Init+0x98>
  {
    Error_Handler();
 8001a70:	f000 f9a4 	bl	8001dbc <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim8) != HAL_OK)
 8001a74:	4828      	ldr	r0, [pc, #160]	; (8001b18 <MX_TIM8_Init+0x13c>)
 8001a76:	f001 fecd 	bl	8003814 <HAL_TIM_PWM_Init>
 8001a7a:	4603      	mov	r3, r0
 8001a7c:	2b00      	cmp	r3, #0
 8001a7e:	d001      	beq.n	8001a84 <MX_TIM8_Init+0xa8>
  {
    Error_Handler();
 8001a80:	f000 f99c 	bl	8001dbc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001a84:	2300      	movs	r3, #0
 8001a86:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001a88:	2300      	movs	r3, #0
 8001a8a:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 8001a8c:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8001a90:	4619      	mov	r1, r3
 8001a92:	4821      	ldr	r0, [pc, #132]	; (8001b18 <MX_TIM8_Init+0x13c>)
 8001a94:	f003 f922 	bl	8004cdc <HAL_TIMEx_MasterConfigSynchronization>
 8001a98:	4603      	mov	r3, r0
 8001a9a:	2b00      	cmp	r3, #0
 8001a9c:	d001      	beq.n	8001aa2 <MX_TIM8_Init+0xc6>
  {
    Error_Handler();
 8001a9e:	f000 f98d 	bl	8001dbc <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001aa2:	2360      	movs	r3, #96	; 0x60
 8001aa4:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 100;
 8001aa6:	2364      	movs	r3, #100	; 0x64
 8001aa8:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001aaa:	2300      	movs	r3, #0
 8001aac:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8001aae:	2300      	movs	r3, #0
 8001ab0:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001ab2:	2300      	movs	r3, #0
 8001ab4:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8001ab6:	2300      	movs	r3, #0
 8001ab8:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8001aba:	2300      	movs	r3, #0
 8001abc:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001abe:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001ac2:	2200      	movs	r2, #0
 8001ac4:	4619      	mov	r1, r3
 8001ac6:	4814      	ldr	r0, [pc, #80]	; (8001b18 <MX_TIM8_Init+0x13c>)
 8001ac8:	f002 fae2 	bl	8004090 <HAL_TIM_PWM_ConfigChannel>
 8001acc:	4603      	mov	r3, r0
 8001ace:	2b00      	cmp	r3, #0
 8001ad0:	d001      	beq.n	8001ad6 <MX_TIM8_Init+0xfa>
  {
    Error_Handler();
 8001ad2:	f000 f973 	bl	8001dbc <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8001ad6:	2300      	movs	r3, #0
 8001ad8:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8001ada:	2300      	movs	r3, #0
 8001adc:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8001ade:	2300      	movs	r3, #0
 8001ae0:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8001ae2:	2300      	movs	r3, #0
 8001ae4:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8001ae6:	2300      	movs	r3, #0
 8001ae8:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8001aea:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001aee:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8001af0:	2300      	movs	r3, #0
 8001af2:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim8, &sBreakDeadTimeConfig) != HAL_OK)
 8001af4:	1d3b      	adds	r3, r7, #4
 8001af6:	4619      	mov	r1, r3
 8001af8:	4807      	ldr	r0, [pc, #28]	; (8001b18 <MX_TIM8_Init+0x13c>)
 8001afa:	f003 f96b 	bl	8004dd4 <HAL_TIMEx_ConfigBreakDeadTime>
 8001afe:	4603      	mov	r3, r0
 8001b00:	2b00      	cmp	r3, #0
 8001b02:	d001      	beq.n	8001b08 <MX_TIM8_Init+0x12c>
  {
    Error_Handler();
 8001b04:	f000 f95a 	bl	8001dbc <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */
  HAL_TIM_MspPostInit(&htim8);
 8001b08:	4803      	ldr	r0, [pc, #12]	; (8001b18 <MX_TIM8_Init+0x13c>)
 8001b0a:	f000 fa85 	bl	8002018 <HAL_TIM_MspPostInit>

}
 8001b0e:	bf00      	nop
 8001b10:	3758      	adds	r7, #88	; 0x58
 8001b12:	46bd      	mov	sp, r7
 8001b14:	bd80      	pop	{r7, pc}
 8001b16:	bf00      	nop
 8001b18:	200002c0 	.word	0x200002c0
 8001b1c:	40010400 	.word	0x40010400

08001b20 <MX_TIM12_Init>:
  * @brief TIM12 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM12_Init(void)
{
 8001b20:	b580      	push	{r7, lr}
 8001b22:	b08c      	sub	sp, #48	; 0x30
 8001b24:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM12_Init 0 */

  /* USER CODE END TIM12_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001b26:	f107 0320 	add.w	r3, r7, #32
 8001b2a:	2200      	movs	r2, #0
 8001b2c:	601a      	str	r2, [r3, #0]
 8001b2e:	605a      	str	r2, [r3, #4]
 8001b30:	609a      	str	r2, [r3, #8]
 8001b32:	60da      	str	r2, [r3, #12]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001b34:	1d3b      	adds	r3, r7, #4
 8001b36:	2200      	movs	r2, #0
 8001b38:	601a      	str	r2, [r3, #0]
 8001b3a:	605a      	str	r2, [r3, #4]
 8001b3c:	609a      	str	r2, [r3, #8]
 8001b3e:	60da      	str	r2, [r3, #12]
 8001b40:	611a      	str	r2, [r3, #16]
 8001b42:	615a      	str	r2, [r3, #20]
 8001b44:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM12_Init 1 */

  /* USER CODE END TIM12_Init 1 */
  htim12.Instance = TIM12;
 8001b46:	4b26      	ldr	r3, [pc, #152]	; (8001be0 <MX_TIM12_Init+0xc0>)
 8001b48:	4a26      	ldr	r2, [pc, #152]	; (8001be4 <MX_TIM12_Init+0xc4>)
 8001b4a:	601a      	str	r2, [r3, #0]
  htim12.Init.Prescaler = 3000-1;
 8001b4c:	4b24      	ldr	r3, [pc, #144]	; (8001be0 <MX_TIM12_Init+0xc0>)
 8001b4e:	f640 32b7 	movw	r2, #2999	; 0xbb7
 8001b52:	605a      	str	r2, [r3, #4]
  htim12.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001b54:	4b22      	ldr	r3, [pc, #136]	; (8001be0 <MX_TIM12_Init+0xc0>)
 8001b56:	2200      	movs	r2, #0
 8001b58:	609a      	str	r2, [r3, #8]
  htim12.Init.Period = 65535;
 8001b5a:	4b21      	ldr	r3, [pc, #132]	; (8001be0 <MX_TIM12_Init+0xc0>)
 8001b5c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001b60:	60da      	str	r2, [r3, #12]
  htim12.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001b62:	4b1f      	ldr	r3, [pc, #124]	; (8001be0 <MX_TIM12_Init+0xc0>)
 8001b64:	2200      	movs	r2, #0
 8001b66:	611a      	str	r2, [r3, #16]
  htim12.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001b68:	4b1d      	ldr	r3, [pc, #116]	; (8001be0 <MX_TIM12_Init+0xc0>)
 8001b6a:	2280      	movs	r2, #128	; 0x80
 8001b6c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim12) != HAL_OK)
 8001b6e:	481c      	ldr	r0, [pc, #112]	; (8001be0 <MX_TIM12_Init+0xc0>)
 8001b70:	f001 fd90 	bl	8003694 <HAL_TIM_Base_Init>
 8001b74:	4603      	mov	r3, r0
 8001b76:	2b00      	cmp	r3, #0
 8001b78:	d001      	beq.n	8001b7e <MX_TIM12_Init+0x5e>
  {
    Error_Handler();
 8001b7a:	f000 f91f 	bl	8001dbc <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001b7e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001b82:	623b      	str	r3, [r7, #32]
  if (HAL_TIM_ConfigClockSource(&htim12, &sClockSourceConfig) != HAL_OK)
 8001b84:	f107 0320 	add.w	r3, r7, #32
 8001b88:	4619      	mov	r1, r3
 8001b8a:	4815      	ldr	r0, [pc, #84]	; (8001be0 <MX_TIM12_Init+0xc0>)
 8001b8c:	f002 fb42 	bl	8004214 <HAL_TIM_ConfigClockSource>
 8001b90:	4603      	mov	r3, r0
 8001b92:	2b00      	cmp	r3, #0
 8001b94:	d001      	beq.n	8001b9a <MX_TIM12_Init+0x7a>
  {
    Error_Handler();
 8001b96:	f000 f911 	bl	8001dbc <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim12) != HAL_OK)
 8001b9a:	4811      	ldr	r0, [pc, #68]	; (8001be0 <MX_TIM12_Init+0xc0>)
 8001b9c:	f001 fe3a 	bl	8003814 <HAL_TIM_PWM_Init>
 8001ba0:	4603      	mov	r3, r0
 8001ba2:	2b00      	cmp	r3, #0
 8001ba4:	d001      	beq.n	8001baa <MX_TIM12_Init+0x8a>
  {
    Error_Handler();
 8001ba6:	f000 f909 	bl	8001dbc <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001baa:	2360      	movs	r3, #96	; 0x60
 8001bac:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 100;
 8001bae:	2364      	movs	r3, #100	; 0x64
 8001bb0:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001bb2:	2300      	movs	r3, #0
 8001bb4:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001bb6:	2300      	movs	r3, #0
 8001bb8:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim12, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001bba:	1d3b      	adds	r3, r7, #4
 8001bbc:	2200      	movs	r2, #0
 8001bbe:	4619      	mov	r1, r3
 8001bc0:	4807      	ldr	r0, [pc, #28]	; (8001be0 <MX_TIM12_Init+0xc0>)
 8001bc2:	f002 fa65 	bl	8004090 <HAL_TIM_PWM_ConfigChannel>
 8001bc6:	4603      	mov	r3, r0
 8001bc8:	2b00      	cmp	r3, #0
 8001bca:	d001      	beq.n	8001bd0 <MX_TIM12_Init+0xb0>
  {
    Error_Handler();
 8001bcc:	f000 f8f6 	bl	8001dbc <Error_Handler>
  }
  /* USER CODE BEGIN TIM12_Init 2 */

  /* USER CODE END TIM12_Init 2 */
  HAL_TIM_MspPostInit(&htim12);
 8001bd0:	4803      	ldr	r0, [pc, #12]	; (8001be0 <MX_TIM12_Init+0xc0>)
 8001bd2:	f000 fa21 	bl	8002018 <HAL_TIM_MspPostInit>

}
 8001bd6:	bf00      	nop
 8001bd8:	3730      	adds	r7, #48	; 0x30
 8001bda:	46bd      	mov	sp, r7
 8001bdc:	bd80      	pop	{r7, pc}
 8001bde:	bf00      	nop
 8001be0:	20000500 	.word	0x20000500
 8001be4:	40001800 	.word	0x40001800

08001be8 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001be8:	b580      	push	{r7, lr}
 8001bea:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001bec:	4b11      	ldr	r3, [pc, #68]	; (8001c34 <MX_USART2_UART_Init+0x4c>)
 8001bee:	4a12      	ldr	r2, [pc, #72]	; (8001c38 <MX_USART2_UART_Init+0x50>)
 8001bf0:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8001bf2:	4b10      	ldr	r3, [pc, #64]	; (8001c34 <MX_USART2_UART_Init+0x4c>)
 8001bf4:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001bf8:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001bfa:	4b0e      	ldr	r3, [pc, #56]	; (8001c34 <MX_USART2_UART_Init+0x4c>)
 8001bfc:	2200      	movs	r2, #0
 8001bfe:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001c00:	4b0c      	ldr	r3, [pc, #48]	; (8001c34 <MX_USART2_UART_Init+0x4c>)
 8001c02:	2200      	movs	r2, #0
 8001c04:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001c06:	4b0b      	ldr	r3, [pc, #44]	; (8001c34 <MX_USART2_UART_Init+0x4c>)
 8001c08:	2200      	movs	r2, #0
 8001c0a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001c0c:	4b09      	ldr	r3, [pc, #36]	; (8001c34 <MX_USART2_UART_Init+0x4c>)
 8001c0e:	220c      	movs	r2, #12
 8001c10:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001c12:	4b08      	ldr	r3, [pc, #32]	; (8001c34 <MX_USART2_UART_Init+0x4c>)
 8001c14:	2200      	movs	r2, #0
 8001c16:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001c18:	4b06      	ldr	r3, [pc, #24]	; (8001c34 <MX_USART2_UART_Init+0x4c>)
 8001c1a:	2200      	movs	r2, #0
 8001c1c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001c1e:	4805      	ldr	r0, [pc, #20]	; (8001c34 <MX_USART2_UART_Init+0x4c>)
 8001c20:	f003 f93e 	bl	8004ea0 <HAL_UART_Init>
 8001c24:	4603      	mov	r3, r0
 8001c26:	2b00      	cmp	r3, #0
 8001c28:	d001      	beq.n	8001c2e <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8001c2a:	f000 f8c7 	bl	8001dbc <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001c2e:	bf00      	nop
 8001c30:	bd80      	pop	{r7, pc}
 8001c32:	bf00      	nop
 8001c34:	200004a8 	.word	0x200004a8
 8001c38:	40004400 	.word	0x40004400

08001c3c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001c3c:	b580      	push	{r7, lr}
 8001c3e:	b08a      	sub	sp, #40	; 0x28
 8001c40:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001c42:	f107 0314 	add.w	r3, r7, #20
 8001c46:	2200      	movs	r2, #0
 8001c48:	601a      	str	r2, [r3, #0]
 8001c4a:	605a      	str	r2, [r3, #4]
 8001c4c:	609a      	str	r2, [r3, #8]
 8001c4e:	60da      	str	r2, [r3, #12]
 8001c50:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001c52:	2300      	movs	r3, #0
 8001c54:	613b      	str	r3, [r7, #16]
 8001c56:	4b2d      	ldr	r3, [pc, #180]	; (8001d0c <MX_GPIO_Init+0xd0>)
 8001c58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c5a:	4a2c      	ldr	r2, [pc, #176]	; (8001d0c <MX_GPIO_Init+0xd0>)
 8001c5c:	f043 0304 	orr.w	r3, r3, #4
 8001c60:	6313      	str	r3, [r2, #48]	; 0x30
 8001c62:	4b2a      	ldr	r3, [pc, #168]	; (8001d0c <MX_GPIO_Init+0xd0>)
 8001c64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c66:	f003 0304 	and.w	r3, r3, #4
 8001c6a:	613b      	str	r3, [r7, #16]
 8001c6c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001c6e:	2300      	movs	r3, #0
 8001c70:	60fb      	str	r3, [r7, #12]
 8001c72:	4b26      	ldr	r3, [pc, #152]	; (8001d0c <MX_GPIO_Init+0xd0>)
 8001c74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c76:	4a25      	ldr	r2, [pc, #148]	; (8001d0c <MX_GPIO_Init+0xd0>)
 8001c78:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001c7c:	6313      	str	r3, [r2, #48]	; 0x30
 8001c7e:	4b23      	ldr	r3, [pc, #140]	; (8001d0c <MX_GPIO_Init+0xd0>)
 8001c80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c82:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001c86:	60fb      	str	r3, [r7, #12]
 8001c88:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001c8a:	2300      	movs	r3, #0
 8001c8c:	60bb      	str	r3, [r7, #8]
 8001c8e:	4b1f      	ldr	r3, [pc, #124]	; (8001d0c <MX_GPIO_Init+0xd0>)
 8001c90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c92:	4a1e      	ldr	r2, [pc, #120]	; (8001d0c <MX_GPIO_Init+0xd0>)
 8001c94:	f043 0301 	orr.w	r3, r3, #1
 8001c98:	6313      	str	r3, [r2, #48]	; 0x30
 8001c9a:	4b1c      	ldr	r3, [pc, #112]	; (8001d0c <MX_GPIO_Init+0xd0>)
 8001c9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c9e:	f003 0301 	and.w	r3, r3, #1
 8001ca2:	60bb      	str	r3, [r7, #8]
 8001ca4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001ca6:	2300      	movs	r3, #0
 8001ca8:	607b      	str	r3, [r7, #4]
 8001caa:	4b18      	ldr	r3, [pc, #96]	; (8001d0c <MX_GPIO_Init+0xd0>)
 8001cac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001cae:	4a17      	ldr	r2, [pc, #92]	; (8001d0c <MX_GPIO_Init+0xd0>)
 8001cb0:	f043 0302 	orr.w	r3, r3, #2
 8001cb4:	6313      	str	r3, [r2, #48]	; 0x30
 8001cb6:	4b15      	ldr	r3, [pc, #84]	; (8001d0c <MX_GPIO_Init+0xd0>)
 8001cb8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001cba:	f003 0302 	and.w	r3, r3, #2
 8001cbe:	607b      	str	r3, [r7, #4]
 8001cc0:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8001cc2:	2200      	movs	r2, #0
 8001cc4:	2120      	movs	r1, #32
 8001cc6:	4812      	ldr	r0, [pc, #72]	; (8001d10 <MX_GPIO_Init+0xd4>)
 8001cc8:	f000 ff60 	bl	8002b8c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8001ccc:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001cd0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8001cd2:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8001cd6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001cd8:	2300      	movs	r3, #0
 8001cda:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8001cdc:	f107 0314 	add.w	r3, r7, #20
 8001ce0:	4619      	mov	r1, r3
 8001ce2:	480c      	ldr	r0, [pc, #48]	; (8001d14 <MX_GPIO_Init+0xd8>)
 8001ce4:	f000 fdbe 	bl	8002864 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8001ce8:	2320      	movs	r3, #32
 8001cea:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001cec:	2301      	movs	r3, #1
 8001cee:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001cf0:	2300      	movs	r3, #0
 8001cf2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001cf4:	2300      	movs	r3, #0
 8001cf6:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8001cf8:	f107 0314 	add.w	r3, r7, #20
 8001cfc:	4619      	mov	r1, r3
 8001cfe:	4804      	ldr	r0, [pc, #16]	; (8001d10 <MX_GPIO_Init+0xd4>)
 8001d00:	f000 fdb0 	bl	8002864 <HAL_GPIO_Init>

}
 8001d04:	bf00      	nop
 8001d06:	3728      	adds	r7, #40	; 0x28
 8001d08:	46bd      	mov	sp, r7
 8001d0a:	bd80      	pop	{r7, pc}
 8001d0c:	40023800 	.word	0x40023800
 8001d10:	40020000 	.word	0x40020000
 8001d14:	40020800 	.word	0x40020800

08001d18 <HAL_TIM_IC_CaptureCallback>:

/* USER CODE BEGIN 4 */
void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8001d18:	b580      	push	{r7, lr}
 8001d1a:	b082      	sub	sp, #8
 8001d1c:	af00      	add	r7, sp, #0
 8001d1e:	6078      	str	r0, [r7, #4]
    HCSR04_TMR_IC_ISR(htim);
 8001d20:	6878      	ldr	r0, [r7, #4]
 8001d22:	f003 fe25 	bl	8005970 <HCSR04_TMR_IC_ISR>
}
 8001d26:	bf00      	nop
 8001d28:	3708      	adds	r7, #8
 8001d2a:	46bd      	mov	sp, r7
 8001d2c:	bd80      	pop	{r7, pc}

08001d2e <HAL_TIM_PeriodElapsedCallback>:
 
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef* htim)
{
 8001d2e:	b580      	push	{r7, lr}
 8001d30:	b082      	sub	sp, #8
 8001d32:	af00      	add	r7, sp, #0
 8001d34:	6078      	str	r0, [r7, #4]
    HCSR04_TMR_OVF_ISR(htim);
 8001d36:	6878      	ldr	r0, [r7, #4]
 8001d38:	f003 fddc 	bl	80058f4 <HCSR04_TMR_OVF_ISR>
}
 8001d3c:	bf00      	nop
 8001d3e:	3708      	adds	r7, #8
 8001d40:	46bd      	mov	sp, r7
 8001d42:	bd80      	pop	{r7, pc}

08001d44 <SysTick_CallBack>:

uint8_t TRIG_Ticks;
uint16_t MOTOR_Ticks;
void SysTick_CallBack(void)
{
 8001d44:	b580      	push	{r7, lr}
 8001d46:	af00      	add	r7, sp, #0
    TRIG_Ticks++;
 8001d48:	4b16      	ldr	r3, [pc, #88]	; (8001da4 <SysTick_CallBack+0x60>)
 8001d4a:	781b      	ldrb	r3, [r3, #0]
 8001d4c:	3301      	adds	r3, #1
 8001d4e:	b2da      	uxtb	r2, r3
 8001d50:	4b14      	ldr	r3, [pc, #80]	; (8001da4 <SysTick_CallBack+0x60>)
 8001d52:	701a      	strb	r2, [r3, #0]
    MOTOR_Ticks++;
 8001d54:	4b14      	ldr	r3, [pc, #80]	; (8001da8 <SysTick_CallBack+0x64>)
 8001d56:	881b      	ldrh	r3, [r3, #0]
 8001d58:	3301      	adds	r3, #1
 8001d5a:	b29a      	uxth	r2, r3
 8001d5c:	4b12      	ldr	r3, [pc, #72]	; (8001da8 <SysTick_CallBack+0x64>)
 8001d5e:	801a      	strh	r2, [r3, #0]
    if(TRIG_Ticks >= 15) // Each 15msec
 8001d60:	4b10      	ldr	r3, [pc, #64]	; (8001da4 <SysTick_CallBack+0x60>)
 8001d62:	781b      	ldrb	r3, [r3, #0]
 8001d64:	2b0e      	cmp	r3, #14
 8001d66:	d90e      	bls.n	8001d86 <SysTick_CallBack+0x42>
    {
        HCSR04_Trigger(HCSR04_SENSOR1);
 8001d68:	2000      	movs	r0, #0
 8001d6a:	f004 f863 	bl	8005e34 <HCSR04_Trigger>
        HCSR04_Trigger(HCSR04_SENSOR2);
 8001d6e:	2001      	movs	r0, #1
 8001d70:	f004 f860 	bl	8005e34 <HCSR04_Trigger>
        HCSR04_Trigger(HCSR04_SENSOR3);
 8001d74:	2002      	movs	r0, #2
 8001d76:	f004 f85d 	bl	8005e34 <HCSR04_Trigger>
        HCSR04_Trigger(HCSR04_SENSOR4);
 8001d7a:	2003      	movs	r0, #3
 8001d7c:	f004 f85a 	bl	8005e34 <HCSR04_Trigger>
        TRIG_Ticks = 0;
 8001d80:	4b08      	ldr	r3, [pc, #32]	; (8001da4 <SysTick_CallBack+0x60>)
 8001d82:	2200      	movs	r2, #0
 8001d84:	701a      	strb	r2, [r3, #0]
    }
    if(MOTOR_Ticks >= 100){
 8001d86:	4b08      	ldr	r3, [pc, #32]	; (8001da8 <SysTick_CallBack+0x64>)
 8001d88:	881b      	ldrh	r3, [r3, #0]
 8001d8a:	2b63      	cmp	r3, #99	; 0x63
 8001d8c:	d908      	bls.n	8001da0 <SysTick_CallBack+0x5c>
      UpdateMotorsFreq(motors, motors_num, motors_channel, distances);
 8001d8e:	4b07      	ldr	r3, [pc, #28]	; (8001dac <SysTick_CallBack+0x68>)
 8001d90:	4a07      	ldr	r2, [pc, #28]	; (8001db0 <SysTick_CallBack+0x6c>)
 8001d92:	4908      	ldr	r1, [pc, #32]	; (8001db4 <SysTick_CallBack+0x70>)
 8001d94:	4808      	ldr	r0, [pc, #32]	; (8001db8 <SysTick_CallBack+0x74>)
 8001d96:	f7ff fa7b 	bl	8001290 <UpdateMotorsFreq>
      MOTOR_Ticks = 0;
 8001d9a:	4b03      	ldr	r3, [pc, #12]	; (8001da8 <SysTick_CallBack+0x64>)
 8001d9c:	2200      	movs	r2, #0
 8001d9e:	801a      	strh	r2, [r3, #0]
    }
}
 8001da0:	bf00      	nop
 8001da2:	bd80      	pop	{r7, pc}
 8001da4:	200004fc 	.word	0x200004fc
 8001da8:	20000414 	.word	0x20000414
 8001dac:	200004ec 	.word	0x200004ec
 8001db0:	20000014 	.word	0x20000014
 8001db4:	20000010 	.word	0x20000010
 8001db8:	20000000 	.word	0x20000000

08001dbc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001dbc:	b480      	push	{r7}
 8001dbe:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001dc0:	b672      	cpsid	i
}
 8001dc2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001dc4:	e7fe      	b.n	8001dc4 <Error_Handler+0x8>
	...

08001dc8 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                                                                                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001dc8:	b580      	push	{r7, lr}
 8001dca:	b082      	sub	sp, #8
 8001dcc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001dce:	2300      	movs	r3, #0
 8001dd0:	607b      	str	r3, [r7, #4]
 8001dd2:	4b10      	ldr	r3, [pc, #64]	; (8001e14 <HAL_MspInit+0x4c>)
 8001dd4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001dd6:	4a0f      	ldr	r2, [pc, #60]	; (8001e14 <HAL_MspInit+0x4c>)
 8001dd8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001ddc:	6453      	str	r3, [r2, #68]	; 0x44
 8001dde:	4b0d      	ldr	r3, [pc, #52]	; (8001e14 <HAL_MspInit+0x4c>)
 8001de0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001de2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001de6:	607b      	str	r3, [r7, #4]
 8001de8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001dea:	2300      	movs	r3, #0
 8001dec:	603b      	str	r3, [r7, #0]
 8001dee:	4b09      	ldr	r3, [pc, #36]	; (8001e14 <HAL_MspInit+0x4c>)
 8001df0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001df2:	4a08      	ldr	r2, [pc, #32]	; (8001e14 <HAL_MspInit+0x4c>)
 8001df4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001df8:	6413      	str	r3, [r2, #64]	; 0x40
 8001dfa:	4b06      	ldr	r3, [pc, #24]	; (8001e14 <HAL_MspInit+0x4c>)
 8001dfc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001dfe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001e02:	603b      	str	r3, [r7, #0]
 8001e04:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8001e06:	2007      	movs	r0, #7
 8001e08:	f000 fcea 	bl	80027e0 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001e0c:	bf00      	nop
 8001e0e:	3708      	adds	r7, #8
 8001e10:	46bd      	mov	sp, r7
 8001e12:	bd80      	pop	{r7, pc}
 8001e14:	40023800 	.word	0x40023800

08001e18 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001e18:	b580      	push	{r7, lr}
 8001e1a:	b090      	sub	sp, #64	; 0x40
 8001e1c:	af00      	add	r7, sp, #0
 8001e1e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001e20:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001e24:	2200      	movs	r2, #0
 8001e26:	601a      	str	r2, [r3, #0]
 8001e28:	605a      	str	r2, [r3, #4]
 8001e2a:	609a      	str	r2, [r3, #8]
 8001e2c:	60da      	str	r2, [r3, #12]
 8001e2e:	611a      	str	r2, [r3, #16]
  if(htim_base->Instance==TIM1)
 8001e30:	687b      	ldr	r3, [r7, #4]
 8001e32:	681b      	ldr	r3, [r3, #0]
 8001e34:	4a5f      	ldr	r2, [pc, #380]	; (8001fb4 <HAL_TIM_Base_MspInit+0x19c>)
 8001e36:	4293      	cmp	r3, r2
 8001e38:	d10e      	bne.n	8001e58 <HAL_TIM_Base_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001e3a:	2300      	movs	r3, #0
 8001e3c:	62bb      	str	r3, [r7, #40]	; 0x28
 8001e3e:	4b5e      	ldr	r3, [pc, #376]	; (8001fb8 <HAL_TIM_Base_MspInit+0x1a0>)
 8001e40:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001e42:	4a5d      	ldr	r2, [pc, #372]	; (8001fb8 <HAL_TIM_Base_MspInit+0x1a0>)
 8001e44:	f043 0301 	orr.w	r3, r3, #1
 8001e48:	6453      	str	r3, [r2, #68]	; 0x44
 8001e4a:	4b5b      	ldr	r3, [pc, #364]	; (8001fb8 <HAL_TIM_Base_MspInit+0x1a0>)
 8001e4c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001e4e:	f003 0301 	and.w	r3, r3, #1
 8001e52:	62bb      	str	r3, [r7, #40]	; 0x28
 8001e54:	6abb      	ldr	r3, [r7, #40]	; 0x28
  /* USER CODE BEGIN TIM12_MspInit 1 */

  /* USER CODE END TIM12_MspInit 1 */
  }

}
 8001e56:	e0a8      	b.n	8001faa <HAL_TIM_Base_MspInit+0x192>
  else if(htim_base->Instance==TIM2)
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	681b      	ldr	r3, [r3, #0]
 8001e5c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001e60:	d154      	bne.n	8001f0c <HAL_TIM_Base_MspInit+0xf4>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001e62:	2300      	movs	r3, #0
 8001e64:	627b      	str	r3, [r7, #36]	; 0x24
 8001e66:	4b54      	ldr	r3, [pc, #336]	; (8001fb8 <HAL_TIM_Base_MspInit+0x1a0>)
 8001e68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e6a:	4a53      	ldr	r2, [pc, #332]	; (8001fb8 <HAL_TIM_Base_MspInit+0x1a0>)
 8001e6c:	f043 0301 	orr.w	r3, r3, #1
 8001e70:	6413      	str	r3, [r2, #64]	; 0x40
 8001e72:	4b51      	ldr	r3, [pc, #324]	; (8001fb8 <HAL_TIM_Base_MspInit+0x1a0>)
 8001e74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e76:	f003 0301 	and.w	r3, r3, #1
 8001e7a:	627b      	str	r3, [r7, #36]	; 0x24
 8001e7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001e7e:	2300      	movs	r3, #0
 8001e80:	623b      	str	r3, [r7, #32]
 8001e82:	4b4d      	ldr	r3, [pc, #308]	; (8001fb8 <HAL_TIM_Base_MspInit+0x1a0>)
 8001e84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e86:	4a4c      	ldr	r2, [pc, #304]	; (8001fb8 <HAL_TIM_Base_MspInit+0x1a0>)
 8001e88:	f043 0301 	orr.w	r3, r3, #1
 8001e8c:	6313      	str	r3, [r2, #48]	; 0x30
 8001e8e:	4b4a      	ldr	r3, [pc, #296]	; (8001fb8 <HAL_TIM_Base_MspInit+0x1a0>)
 8001e90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e92:	f003 0301 	and.w	r3, r3, #1
 8001e96:	623b      	str	r3, [r7, #32]
 8001e98:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001e9a:	2300      	movs	r3, #0
 8001e9c:	61fb      	str	r3, [r7, #28]
 8001e9e:	4b46      	ldr	r3, [pc, #280]	; (8001fb8 <HAL_TIM_Base_MspInit+0x1a0>)
 8001ea0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ea2:	4a45      	ldr	r2, [pc, #276]	; (8001fb8 <HAL_TIM_Base_MspInit+0x1a0>)
 8001ea4:	f043 0302 	orr.w	r3, r3, #2
 8001ea8:	6313      	str	r3, [r2, #48]	; 0x30
 8001eaa:	4b43      	ldr	r3, [pc, #268]	; (8001fb8 <HAL_TIM_Base_MspInit+0x1a0>)
 8001eac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001eae:	f003 0302 	and.w	r3, r3, #2
 8001eb2:	61fb      	str	r3, [r7, #28]
 8001eb4:	69fb      	ldr	r3, [r7, #28]
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_15;
 8001eb6:	f248 0302 	movw	r3, #32770	; 0x8002
 8001eba:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ebc:	2302      	movs	r3, #2
 8001ebe:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ec0:	2300      	movs	r3, #0
 8001ec2:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001ec4:	2300      	movs	r3, #0
 8001ec6:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8001ec8:	2301      	movs	r3, #1
 8001eca:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001ecc:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001ed0:	4619      	mov	r1, r3
 8001ed2:	483a      	ldr	r0, [pc, #232]	; (8001fbc <HAL_TIM_Base_MspInit+0x1a4>)
 8001ed4:	f000 fcc6 	bl	8002864 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_10;
 8001ed8:	f240 4304 	movw	r3, #1028	; 0x404
 8001edc:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ede:	2302      	movs	r3, #2
 8001ee0:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ee2:	2300      	movs	r3, #0
 8001ee4:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001ee6:	2300      	movs	r3, #0
 8001ee8:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8001eea:	2301      	movs	r3, #1
 8001eec:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001eee:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001ef2:	4619      	mov	r1, r3
 8001ef4:	4832      	ldr	r0, [pc, #200]	; (8001fc0 <HAL_TIM_Base_MspInit+0x1a8>)
 8001ef6:	f000 fcb5 	bl	8002864 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8001efa:	2200      	movs	r2, #0
 8001efc:	2100      	movs	r1, #0
 8001efe:	201c      	movs	r0, #28
 8001f00:	f000 fc79 	bl	80027f6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8001f04:	201c      	movs	r0, #28
 8001f06:	f000 fc92 	bl	800282e <HAL_NVIC_EnableIRQ>
}
 8001f0a:	e04e      	b.n	8001faa <HAL_TIM_Base_MspInit+0x192>
  else if(htim_base->Instance==TIM3)
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	681b      	ldr	r3, [r3, #0]
 8001f10:	4a2c      	ldr	r2, [pc, #176]	; (8001fc4 <HAL_TIM_Base_MspInit+0x1ac>)
 8001f12:	4293      	cmp	r3, r2
 8001f14:	d10e      	bne.n	8001f34 <HAL_TIM_Base_MspInit+0x11c>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001f16:	2300      	movs	r3, #0
 8001f18:	61bb      	str	r3, [r7, #24]
 8001f1a:	4b27      	ldr	r3, [pc, #156]	; (8001fb8 <HAL_TIM_Base_MspInit+0x1a0>)
 8001f1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f1e:	4a26      	ldr	r2, [pc, #152]	; (8001fb8 <HAL_TIM_Base_MspInit+0x1a0>)
 8001f20:	f043 0302 	orr.w	r3, r3, #2
 8001f24:	6413      	str	r3, [r2, #64]	; 0x40
 8001f26:	4b24      	ldr	r3, [pc, #144]	; (8001fb8 <HAL_TIM_Base_MspInit+0x1a0>)
 8001f28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f2a:	f003 0302 	and.w	r3, r3, #2
 8001f2e:	61bb      	str	r3, [r7, #24]
 8001f30:	69bb      	ldr	r3, [r7, #24]
}
 8001f32:	e03a      	b.n	8001faa <HAL_TIM_Base_MspInit+0x192>
  else if(htim_base->Instance==TIM4)
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	681b      	ldr	r3, [r3, #0]
 8001f38:	4a23      	ldr	r2, [pc, #140]	; (8001fc8 <HAL_TIM_Base_MspInit+0x1b0>)
 8001f3a:	4293      	cmp	r3, r2
 8001f3c:	d10e      	bne.n	8001f5c <HAL_TIM_Base_MspInit+0x144>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8001f3e:	2300      	movs	r3, #0
 8001f40:	617b      	str	r3, [r7, #20]
 8001f42:	4b1d      	ldr	r3, [pc, #116]	; (8001fb8 <HAL_TIM_Base_MspInit+0x1a0>)
 8001f44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f46:	4a1c      	ldr	r2, [pc, #112]	; (8001fb8 <HAL_TIM_Base_MspInit+0x1a0>)
 8001f48:	f043 0304 	orr.w	r3, r3, #4
 8001f4c:	6413      	str	r3, [r2, #64]	; 0x40
 8001f4e:	4b1a      	ldr	r3, [pc, #104]	; (8001fb8 <HAL_TIM_Base_MspInit+0x1a0>)
 8001f50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f52:	f003 0304 	and.w	r3, r3, #4
 8001f56:	617b      	str	r3, [r7, #20]
 8001f58:	697b      	ldr	r3, [r7, #20]
}
 8001f5a:	e026      	b.n	8001faa <HAL_TIM_Base_MspInit+0x192>
  else if(htim_base->Instance==TIM8)
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	681b      	ldr	r3, [r3, #0]
 8001f60:	4a1a      	ldr	r2, [pc, #104]	; (8001fcc <HAL_TIM_Base_MspInit+0x1b4>)
 8001f62:	4293      	cmp	r3, r2
 8001f64:	d10e      	bne.n	8001f84 <HAL_TIM_Base_MspInit+0x16c>
    __HAL_RCC_TIM8_CLK_ENABLE();
 8001f66:	2300      	movs	r3, #0
 8001f68:	613b      	str	r3, [r7, #16]
 8001f6a:	4b13      	ldr	r3, [pc, #76]	; (8001fb8 <HAL_TIM_Base_MspInit+0x1a0>)
 8001f6c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001f6e:	4a12      	ldr	r2, [pc, #72]	; (8001fb8 <HAL_TIM_Base_MspInit+0x1a0>)
 8001f70:	f043 0302 	orr.w	r3, r3, #2
 8001f74:	6453      	str	r3, [r2, #68]	; 0x44
 8001f76:	4b10      	ldr	r3, [pc, #64]	; (8001fb8 <HAL_TIM_Base_MspInit+0x1a0>)
 8001f78:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001f7a:	f003 0302 	and.w	r3, r3, #2
 8001f7e:	613b      	str	r3, [r7, #16]
 8001f80:	693b      	ldr	r3, [r7, #16]
}
 8001f82:	e012      	b.n	8001faa <HAL_TIM_Base_MspInit+0x192>
  else if(htim_base->Instance==TIM12)
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	681b      	ldr	r3, [r3, #0]
 8001f88:	4a11      	ldr	r2, [pc, #68]	; (8001fd0 <HAL_TIM_Base_MspInit+0x1b8>)
 8001f8a:	4293      	cmp	r3, r2
 8001f8c:	d10d      	bne.n	8001faa <HAL_TIM_Base_MspInit+0x192>
    __HAL_RCC_TIM12_CLK_ENABLE();
 8001f8e:	2300      	movs	r3, #0
 8001f90:	60fb      	str	r3, [r7, #12]
 8001f92:	4b09      	ldr	r3, [pc, #36]	; (8001fb8 <HAL_TIM_Base_MspInit+0x1a0>)
 8001f94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f96:	4a08      	ldr	r2, [pc, #32]	; (8001fb8 <HAL_TIM_Base_MspInit+0x1a0>)
 8001f98:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001f9c:	6413      	str	r3, [r2, #64]	; 0x40
 8001f9e:	4b06      	ldr	r3, [pc, #24]	; (8001fb8 <HAL_TIM_Base_MspInit+0x1a0>)
 8001fa0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001fa2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001fa6:	60fb      	str	r3, [r7, #12]
 8001fa8:	68fb      	ldr	r3, [r7, #12]
}
 8001faa:	bf00      	nop
 8001fac:	3740      	adds	r7, #64	; 0x40
 8001fae:	46bd      	mov	sp, r7
 8001fb0:	bd80      	pop	{r7, pc}
 8001fb2:	bf00      	nop
 8001fb4:	40010000 	.word	0x40010000
 8001fb8:	40023800 	.word	0x40023800
 8001fbc:	40020000 	.word	0x40020000
 8001fc0:	40020400 	.word	0x40020400
 8001fc4:	40000400 	.word	0x40000400
 8001fc8:	40000800 	.word	0x40000800
 8001fcc:	40010400 	.word	0x40010400
 8001fd0:	40001800 	.word	0x40001800

08001fd4 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8001fd4:	b480      	push	{r7}
 8001fd6:	b085      	sub	sp, #20
 8001fd8:	af00      	add	r7, sp, #0
 8001fda:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM5)
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	681b      	ldr	r3, [r3, #0]
 8001fe0:	4a0b      	ldr	r2, [pc, #44]	; (8002010 <HAL_TIM_PWM_MspInit+0x3c>)
 8001fe2:	4293      	cmp	r3, r2
 8001fe4:	d10d      	bne.n	8002002 <HAL_TIM_PWM_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM5_MspInit 0 */

  /* USER CODE END TIM5_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM5_CLK_ENABLE();
 8001fe6:	2300      	movs	r3, #0
 8001fe8:	60fb      	str	r3, [r7, #12]
 8001fea:	4b0a      	ldr	r3, [pc, #40]	; (8002014 <HAL_TIM_PWM_MspInit+0x40>)
 8001fec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001fee:	4a09      	ldr	r2, [pc, #36]	; (8002014 <HAL_TIM_PWM_MspInit+0x40>)
 8001ff0:	f043 0308 	orr.w	r3, r3, #8
 8001ff4:	6413      	str	r3, [r2, #64]	; 0x40
 8001ff6:	4b07      	ldr	r3, [pc, #28]	; (8002014 <HAL_TIM_PWM_MspInit+0x40>)
 8001ff8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ffa:	f003 0308 	and.w	r3, r3, #8
 8001ffe:	60fb      	str	r3, [r7, #12]
 8002000:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM5_MspInit 1 */

  /* USER CODE END TIM5_MspInit 1 */
  }

}
 8002002:	bf00      	nop
 8002004:	3714      	adds	r7, #20
 8002006:	46bd      	mov	sp, r7
 8002008:	f85d 7b04 	ldr.w	r7, [sp], #4
 800200c:	4770      	bx	lr
 800200e:	bf00      	nop
 8002010:	40000c00 	.word	0x40000c00
 8002014:	40023800 	.word	0x40023800

08002018 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8002018:	b580      	push	{r7, lr}
 800201a:	b08e      	sub	sp, #56	; 0x38
 800201c:	af00      	add	r7, sp, #0
 800201e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002020:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002024:	2200      	movs	r2, #0
 8002026:	601a      	str	r2, [r3, #0]
 8002028:	605a      	str	r2, [r3, #4]
 800202a:	609a      	str	r2, [r3, #8]
 800202c:	60da      	str	r2, [r3, #12]
 800202e:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	681b      	ldr	r3, [r3, #0]
 8002034:	4a6d      	ldr	r2, [pc, #436]	; (80021ec <HAL_TIM_MspPostInit+0x1d4>)
 8002036:	4293      	cmp	r3, r2
 8002038:	d11f      	bne.n	800207a <HAL_TIM_MspPostInit+0x62>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800203a:	2300      	movs	r3, #0
 800203c:	623b      	str	r3, [r7, #32]
 800203e:	4b6c      	ldr	r3, [pc, #432]	; (80021f0 <HAL_TIM_MspPostInit+0x1d8>)
 8002040:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002042:	4a6b      	ldr	r2, [pc, #428]	; (80021f0 <HAL_TIM_MspPostInit+0x1d8>)
 8002044:	f043 0301 	orr.w	r3, r3, #1
 8002048:	6313      	str	r3, [r2, #48]	; 0x30
 800204a:	4b69      	ldr	r3, [pc, #420]	; (80021f0 <HAL_TIM_MspPostInit+0x1d8>)
 800204c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800204e:	f003 0301 	and.w	r3, r3, #1
 8002052:	623b      	str	r3, [r7, #32]
 8002054:	6a3b      	ldr	r3, [r7, #32]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8002056:	f44f 7380 	mov.w	r3, #256	; 0x100
 800205a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800205c:	2302      	movs	r3, #2
 800205e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002060:	2300      	movs	r3, #0
 8002062:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002064:	2300      	movs	r3, #0
 8002066:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8002068:	2301      	movs	r3, #1
 800206a:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800206c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002070:	4619      	mov	r1, r3
 8002072:	4860      	ldr	r0, [pc, #384]	; (80021f4 <HAL_TIM_MspPostInit+0x1dc>)
 8002074:	f000 fbf6 	bl	8002864 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM12_MspPostInit 1 */

  /* USER CODE END TIM12_MspPostInit 1 */
  }

}
 8002078:	e0b3      	b.n	80021e2 <HAL_TIM_MspPostInit+0x1ca>
  else if(htim->Instance==TIM3)
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	681b      	ldr	r3, [r3, #0]
 800207e:	4a5e      	ldr	r2, [pc, #376]	; (80021f8 <HAL_TIM_MspPostInit+0x1e0>)
 8002080:	4293      	cmp	r3, r2
 8002082:	d11e      	bne.n	80020c2 <HAL_TIM_MspPostInit+0xaa>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002084:	2300      	movs	r3, #0
 8002086:	61fb      	str	r3, [r7, #28]
 8002088:	4b59      	ldr	r3, [pc, #356]	; (80021f0 <HAL_TIM_MspPostInit+0x1d8>)
 800208a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800208c:	4a58      	ldr	r2, [pc, #352]	; (80021f0 <HAL_TIM_MspPostInit+0x1d8>)
 800208e:	f043 0301 	orr.w	r3, r3, #1
 8002092:	6313      	str	r3, [r2, #48]	; 0x30
 8002094:	4b56      	ldr	r3, [pc, #344]	; (80021f0 <HAL_TIM_MspPostInit+0x1d8>)
 8002096:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002098:	f003 0301 	and.w	r3, r3, #1
 800209c:	61fb      	str	r3, [r7, #28]
 800209e:	69fb      	ldr	r3, [r7, #28]
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 80020a0:	2340      	movs	r3, #64	; 0x40
 80020a2:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80020a4:	2302      	movs	r3, #2
 80020a6:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80020a8:	2300      	movs	r3, #0
 80020aa:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80020ac:	2300      	movs	r3, #0
 80020ae:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 80020b0:	2302      	movs	r3, #2
 80020b2:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80020b4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80020b8:	4619      	mov	r1, r3
 80020ba:	484e      	ldr	r0, [pc, #312]	; (80021f4 <HAL_TIM_MspPostInit+0x1dc>)
 80020bc:	f000 fbd2 	bl	8002864 <HAL_GPIO_Init>
}
 80020c0:	e08f      	b.n	80021e2 <HAL_TIM_MspPostInit+0x1ca>
  else if(htim->Instance==TIM4)
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	681b      	ldr	r3, [r3, #0]
 80020c6:	4a4d      	ldr	r2, [pc, #308]	; (80021fc <HAL_TIM_MspPostInit+0x1e4>)
 80020c8:	4293      	cmp	r3, r2
 80020ca:	d11e      	bne.n	800210a <HAL_TIM_MspPostInit+0xf2>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80020cc:	2300      	movs	r3, #0
 80020ce:	61bb      	str	r3, [r7, #24]
 80020d0:	4b47      	ldr	r3, [pc, #284]	; (80021f0 <HAL_TIM_MspPostInit+0x1d8>)
 80020d2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020d4:	4a46      	ldr	r2, [pc, #280]	; (80021f0 <HAL_TIM_MspPostInit+0x1d8>)
 80020d6:	f043 0302 	orr.w	r3, r3, #2
 80020da:	6313      	str	r3, [r2, #48]	; 0x30
 80020dc:	4b44      	ldr	r3, [pc, #272]	; (80021f0 <HAL_TIM_MspPostInit+0x1d8>)
 80020de:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020e0:	f003 0302 	and.w	r3, r3, #2
 80020e4:	61bb      	str	r3, [r7, #24]
 80020e6:	69bb      	ldr	r3, [r7, #24]
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 80020e8:	2340      	movs	r3, #64	; 0x40
 80020ea:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80020ec:	2302      	movs	r3, #2
 80020ee:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80020f0:	2300      	movs	r3, #0
 80020f2:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80020f4:	2300      	movs	r3, #0
 80020f6:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 80020f8:	2302      	movs	r3, #2
 80020fa:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80020fc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002100:	4619      	mov	r1, r3
 8002102:	483f      	ldr	r0, [pc, #252]	; (8002200 <HAL_TIM_MspPostInit+0x1e8>)
 8002104:	f000 fbae 	bl	8002864 <HAL_GPIO_Init>
}
 8002108:	e06b      	b.n	80021e2 <HAL_TIM_MspPostInit+0x1ca>
  else if(htim->Instance==TIM5)
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	681b      	ldr	r3, [r3, #0]
 800210e:	4a3d      	ldr	r2, [pc, #244]	; (8002204 <HAL_TIM_MspPostInit+0x1ec>)
 8002110:	4293      	cmp	r3, r2
 8002112:	d11e      	bne.n	8002152 <HAL_TIM_MspPostInit+0x13a>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002114:	2300      	movs	r3, #0
 8002116:	617b      	str	r3, [r7, #20]
 8002118:	4b35      	ldr	r3, [pc, #212]	; (80021f0 <HAL_TIM_MspPostInit+0x1d8>)
 800211a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800211c:	4a34      	ldr	r2, [pc, #208]	; (80021f0 <HAL_TIM_MspPostInit+0x1d8>)
 800211e:	f043 0301 	orr.w	r3, r3, #1
 8002122:	6313      	str	r3, [r2, #48]	; 0x30
 8002124:	4b32      	ldr	r3, [pc, #200]	; (80021f0 <HAL_TIM_MspPostInit+0x1d8>)
 8002126:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002128:	f003 0301 	and.w	r3, r3, #1
 800212c:	617b      	str	r3, [r7, #20]
 800212e:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8002130:	2301      	movs	r3, #1
 8002132:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002134:	2302      	movs	r3, #2
 8002136:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002138:	2300      	movs	r3, #0
 800213a:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800213c:	2300      	movs	r3, #0
 800213e:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM5;
 8002140:	2302      	movs	r3, #2
 8002142:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002144:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002148:	4619      	mov	r1, r3
 800214a:	482a      	ldr	r0, [pc, #168]	; (80021f4 <HAL_TIM_MspPostInit+0x1dc>)
 800214c:	f000 fb8a 	bl	8002864 <HAL_GPIO_Init>
}
 8002150:	e047      	b.n	80021e2 <HAL_TIM_MspPostInit+0x1ca>
  else if(htim->Instance==TIM8)
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	681b      	ldr	r3, [r3, #0]
 8002156:	4a2c      	ldr	r2, [pc, #176]	; (8002208 <HAL_TIM_MspPostInit+0x1f0>)
 8002158:	4293      	cmp	r3, r2
 800215a:	d11e      	bne.n	800219a <HAL_TIM_MspPostInit+0x182>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800215c:	2300      	movs	r3, #0
 800215e:	613b      	str	r3, [r7, #16]
 8002160:	4b23      	ldr	r3, [pc, #140]	; (80021f0 <HAL_TIM_MspPostInit+0x1d8>)
 8002162:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002164:	4a22      	ldr	r2, [pc, #136]	; (80021f0 <HAL_TIM_MspPostInit+0x1d8>)
 8002166:	f043 0304 	orr.w	r3, r3, #4
 800216a:	6313      	str	r3, [r2, #48]	; 0x30
 800216c:	4b20      	ldr	r3, [pc, #128]	; (80021f0 <HAL_TIM_MspPostInit+0x1d8>)
 800216e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002170:	f003 0304 	and.w	r3, r3, #4
 8002174:	613b      	str	r3, [r7, #16]
 8002176:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8002178:	2340      	movs	r3, #64	; 0x40
 800217a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800217c:	2302      	movs	r3, #2
 800217e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002180:	2300      	movs	r3, #0
 8002182:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002184:	2300      	movs	r3, #0
 8002186:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM8;
 8002188:	2303      	movs	r3, #3
 800218a:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800218c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002190:	4619      	mov	r1, r3
 8002192:	481e      	ldr	r0, [pc, #120]	; (800220c <HAL_TIM_MspPostInit+0x1f4>)
 8002194:	f000 fb66 	bl	8002864 <HAL_GPIO_Init>
}
 8002198:	e023      	b.n	80021e2 <HAL_TIM_MspPostInit+0x1ca>
  else if(htim->Instance==TIM12)
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	681b      	ldr	r3, [r3, #0]
 800219e:	4a1c      	ldr	r2, [pc, #112]	; (8002210 <HAL_TIM_MspPostInit+0x1f8>)
 80021a0:	4293      	cmp	r3, r2
 80021a2:	d11e      	bne.n	80021e2 <HAL_TIM_MspPostInit+0x1ca>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80021a4:	2300      	movs	r3, #0
 80021a6:	60fb      	str	r3, [r7, #12]
 80021a8:	4b11      	ldr	r3, [pc, #68]	; (80021f0 <HAL_TIM_MspPostInit+0x1d8>)
 80021aa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021ac:	4a10      	ldr	r2, [pc, #64]	; (80021f0 <HAL_TIM_MspPostInit+0x1d8>)
 80021ae:	f043 0302 	orr.w	r3, r3, #2
 80021b2:	6313      	str	r3, [r2, #48]	; 0x30
 80021b4:	4b0e      	ldr	r3, [pc, #56]	; (80021f0 <HAL_TIM_MspPostInit+0x1d8>)
 80021b6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021b8:	f003 0302 	and.w	r3, r3, #2
 80021bc:	60fb      	str	r3, [r7, #12]
 80021be:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_14;
 80021c0:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80021c4:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80021c6:	2302      	movs	r3, #2
 80021c8:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80021ca:	2300      	movs	r3, #0
 80021cc:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80021ce:	2300      	movs	r3, #0
 80021d0:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF9_TIM12;
 80021d2:	2309      	movs	r3, #9
 80021d4:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80021d6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80021da:	4619      	mov	r1, r3
 80021dc:	4808      	ldr	r0, [pc, #32]	; (8002200 <HAL_TIM_MspPostInit+0x1e8>)
 80021de:	f000 fb41 	bl	8002864 <HAL_GPIO_Init>
}
 80021e2:	bf00      	nop
 80021e4:	3738      	adds	r7, #56	; 0x38
 80021e6:	46bd      	mov	sp, r7
 80021e8:	bd80      	pop	{r7, pc}
 80021ea:	bf00      	nop
 80021ec:	40010000 	.word	0x40010000
 80021f0:	40023800 	.word	0x40023800
 80021f4:	40020000 	.word	0x40020000
 80021f8:	40000400 	.word	0x40000400
 80021fc:	40000800 	.word	0x40000800
 8002200:	40020400 	.word	0x40020400
 8002204:	40000c00 	.word	0x40000c00
 8002208:	40010400 	.word	0x40010400
 800220c:	40020800 	.word	0x40020800
 8002210:	40001800 	.word	0x40001800

08002214 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002214:	b580      	push	{r7, lr}
 8002216:	b08a      	sub	sp, #40	; 0x28
 8002218:	af00      	add	r7, sp, #0
 800221a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800221c:	f107 0314 	add.w	r3, r7, #20
 8002220:	2200      	movs	r2, #0
 8002222:	601a      	str	r2, [r3, #0]
 8002224:	605a      	str	r2, [r3, #4]
 8002226:	609a      	str	r2, [r3, #8]
 8002228:	60da      	str	r2, [r3, #12]
 800222a:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	681b      	ldr	r3, [r3, #0]
 8002230:	4a19      	ldr	r2, [pc, #100]	; (8002298 <HAL_UART_MspInit+0x84>)
 8002232:	4293      	cmp	r3, r2
 8002234:	d12b      	bne.n	800228e <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8002236:	2300      	movs	r3, #0
 8002238:	613b      	str	r3, [r7, #16]
 800223a:	4b18      	ldr	r3, [pc, #96]	; (800229c <HAL_UART_MspInit+0x88>)
 800223c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800223e:	4a17      	ldr	r2, [pc, #92]	; (800229c <HAL_UART_MspInit+0x88>)
 8002240:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002244:	6413      	str	r3, [r2, #64]	; 0x40
 8002246:	4b15      	ldr	r3, [pc, #84]	; (800229c <HAL_UART_MspInit+0x88>)
 8002248:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800224a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800224e:	613b      	str	r3, [r7, #16]
 8002250:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002252:	2300      	movs	r3, #0
 8002254:	60fb      	str	r3, [r7, #12]
 8002256:	4b11      	ldr	r3, [pc, #68]	; (800229c <HAL_UART_MspInit+0x88>)
 8002258:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800225a:	4a10      	ldr	r2, [pc, #64]	; (800229c <HAL_UART_MspInit+0x88>)
 800225c:	f043 0301 	orr.w	r3, r3, #1
 8002260:	6313      	str	r3, [r2, #48]	; 0x30
 8002262:	4b0e      	ldr	r3, [pc, #56]	; (800229c <HAL_UART_MspInit+0x88>)
 8002264:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002266:	f003 0301 	and.w	r3, r3, #1
 800226a:	60fb      	str	r3, [r7, #12]
 800226c:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 800226e:	230c      	movs	r3, #12
 8002270:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002272:	2302      	movs	r3, #2
 8002274:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002276:	2300      	movs	r3, #0
 8002278:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800227a:	2303      	movs	r3, #3
 800227c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800227e:	2307      	movs	r3, #7
 8002280:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002282:	f107 0314 	add.w	r3, r7, #20
 8002286:	4619      	mov	r1, r3
 8002288:	4805      	ldr	r0, [pc, #20]	; (80022a0 <HAL_UART_MspInit+0x8c>)
 800228a:	f000 faeb 	bl	8002864 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 800228e:	bf00      	nop
 8002290:	3728      	adds	r7, #40	; 0x28
 8002292:	46bd      	mov	sp, r7
 8002294:	bd80      	pop	{r7, pc}
 8002296:	bf00      	nop
 8002298:	40004400 	.word	0x40004400
 800229c:	40023800 	.word	0x40023800
 80022a0:	40020000 	.word	0x40020000

080022a4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80022a4:	b480      	push	{r7}
 80022a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80022a8:	e7fe      	b.n	80022a8 <NMI_Handler+0x4>

080022aa <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80022aa:	b480      	push	{r7}
 80022ac:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80022ae:	e7fe      	b.n	80022ae <HardFault_Handler+0x4>

080022b0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80022b0:	b480      	push	{r7}
 80022b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80022b4:	e7fe      	b.n	80022b4 <MemManage_Handler+0x4>

080022b6 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80022b6:	b480      	push	{r7}
 80022b8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80022ba:	e7fe      	b.n	80022ba <BusFault_Handler+0x4>

080022bc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80022bc:	b480      	push	{r7}
 80022be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80022c0:	e7fe      	b.n	80022c0 <UsageFault_Handler+0x4>

080022c2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80022c2:	b480      	push	{r7}
 80022c4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80022c6:	bf00      	nop
 80022c8:	46bd      	mov	sp, r7
 80022ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022ce:	4770      	bx	lr

080022d0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80022d0:	b480      	push	{r7}
 80022d2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80022d4:	bf00      	nop
 80022d6:	46bd      	mov	sp, r7
 80022d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022dc:	4770      	bx	lr

080022de <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80022de:	b480      	push	{r7}
 80022e0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80022e2:	bf00      	nop
 80022e4:	46bd      	mov	sp, r7
 80022e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022ea:	4770      	bx	lr

080022ec <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80022ec:	b580      	push	{r7, lr}
 80022ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80022f0:	f000 f962 	bl	80025b8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */
  SysTick_CallBack();
 80022f4:	f7ff fd26 	bl	8001d44 <SysTick_CallBack>
  /* USER CODE END SysTick_IRQn 1 */
}
 80022f8:	bf00      	nop
 80022fa:	bd80      	pop	{r7, pc}

080022fc <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 80022fc:	b580      	push	{r7, lr}
 80022fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8002300:	4802      	ldr	r0, [pc, #8]	; (800230c <TIM2_IRQHandler+0x10>)
 8002302:	f001 fd21 	bl	8003d48 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8002306:	bf00      	nop
 8002308:	bd80      	pop	{r7, pc}
 800230a:	bf00      	nop
 800230c:	20000460 	.word	0x20000460

08002310 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8002310:	b480      	push	{r7}
 8002312:	af00      	add	r7, sp, #0
	return 1;
 8002314:	2301      	movs	r3, #1
}
 8002316:	4618      	mov	r0, r3
 8002318:	46bd      	mov	sp, r7
 800231a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800231e:	4770      	bx	lr

08002320 <_kill>:

int _kill(int pid, int sig)
{
 8002320:	b580      	push	{r7, lr}
 8002322:	b082      	sub	sp, #8
 8002324:	af00      	add	r7, sp, #0
 8002326:	6078      	str	r0, [r7, #4]
 8002328:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 800232a:	f003 fdeb 	bl	8005f04 <__errno>
 800232e:	4603      	mov	r3, r0
 8002330:	2216      	movs	r2, #22
 8002332:	601a      	str	r2, [r3, #0]
	return -1;
 8002334:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8002338:	4618      	mov	r0, r3
 800233a:	3708      	adds	r7, #8
 800233c:	46bd      	mov	sp, r7
 800233e:	bd80      	pop	{r7, pc}

08002340 <_exit>:

void _exit (int status)
{
 8002340:	b580      	push	{r7, lr}
 8002342:	b082      	sub	sp, #8
 8002344:	af00      	add	r7, sp, #0
 8002346:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8002348:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 800234c:	6878      	ldr	r0, [r7, #4]
 800234e:	f7ff ffe7 	bl	8002320 <_kill>
	while (1) {}		/* Make sure we hang here */
 8002352:	e7fe      	b.n	8002352 <_exit+0x12>

08002354 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002354:	b580      	push	{r7, lr}
 8002356:	b086      	sub	sp, #24
 8002358:	af00      	add	r7, sp, #0
 800235a:	60f8      	str	r0, [r7, #12]
 800235c:	60b9      	str	r1, [r7, #8]
 800235e:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002360:	2300      	movs	r3, #0
 8002362:	617b      	str	r3, [r7, #20]
 8002364:	e00a      	b.n	800237c <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8002366:	f3af 8000 	nop.w
 800236a:	4601      	mov	r1, r0
 800236c:	68bb      	ldr	r3, [r7, #8]
 800236e:	1c5a      	adds	r2, r3, #1
 8002370:	60ba      	str	r2, [r7, #8]
 8002372:	b2ca      	uxtb	r2, r1
 8002374:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002376:	697b      	ldr	r3, [r7, #20]
 8002378:	3301      	adds	r3, #1
 800237a:	617b      	str	r3, [r7, #20]
 800237c:	697a      	ldr	r2, [r7, #20]
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	429a      	cmp	r2, r3
 8002382:	dbf0      	blt.n	8002366 <_read+0x12>
	}

return len;
 8002384:	687b      	ldr	r3, [r7, #4]
}
 8002386:	4618      	mov	r0, r3
 8002388:	3718      	adds	r7, #24
 800238a:	46bd      	mov	sp, r7
 800238c:	bd80      	pop	{r7, pc}

0800238e <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800238e:	b580      	push	{r7, lr}
 8002390:	b086      	sub	sp, #24
 8002392:	af00      	add	r7, sp, #0
 8002394:	60f8      	str	r0, [r7, #12]
 8002396:	60b9      	str	r1, [r7, #8]
 8002398:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800239a:	2300      	movs	r3, #0
 800239c:	617b      	str	r3, [r7, #20]
 800239e:	e009      	b.n	80023b4 <_write+0x26>
	{
		__io_putchar(*ptr++);
 80023a0:	68bb      	ldr	r3, [r7, #8]
 80023a2:	1c5a      	adds	r2, r3, #1
 80023a4:	60ba      	str	r2, [r7, #8]
 80023a6:	781b      	ldrb	r3, [r3, #0]
 80023a8:	4618      	mov	r0, r3
 80023aa:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80023ae:	697b      	ldr	r3, [r7, #20]
 80023b0:	3301      	adds	r3, #1
 80023b2:	617b      	str	r3, [r7, #20]
 80023b4:	697a      	ldr	r2, [r7, #20]
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	429a      	cmp	r2, r3
 80023ba:	dbf1      	blt.n	80023a0 <_write+0x12>
	}
	return len;
 80023bc:	687b      	ldr	r3, [r7, #4]
}
 80023be:	4618      	mov	r0, r3
 80023c0:	3718      	adds	r7, #24
 80023c2:	46bd      	mov	sp, r7
 80023c4:	bd80      	pop	{r7, pc}

080023c6 <_close>:

int _close(int file)
{
 80023c6:	b480      	push	{r7}
 80023c8:	b083      	sub	sp, #12
 80023ca:	af00      	add	r7, sp, #0
 80023cc:	6078      	str	r0, [r7, #4]
	return -1;
 80023ce:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 80023d2:	4618      	mov	r0, r3
 80023d4:	370c      	adds	r7, #12
 80023d6:	46bd      	mov	sp, r7
 80023d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023dc:	4770      	bx	lr

080023de <_fstat>:


int _fstat(int file, struct stat *st)
{
 80023de:	b480      	push	{r7}
 80023e0:	b083      	sub	sp, #12
 80023e2:	af00      	add	r7, sp, #0
 80023e4:	6078      	str	r0, [r7, #4]
 80023e6:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 80023e8:	683b      	ldr	r3, [r7, #0]
 80023ea:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80023ee:	605a      	str	r2, [r3, #4]
	return 0;
 80023f0:	2300      	movs	r3, #0
}
 80023f2:	4618      	mov	r0, r3
 80023f4:	370c      	adds	r7, #12
 80023f6:	46bd      	mov	sp, r7
 80023f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023fc:	4770      	bx	lr

080023fe <_isatty>:

int _isatty(int file)
{
 80023fe:	b480      	push	{r7}
 8002400:	b083      	sub	sp, #12
 8002402:	af00      	add	r7, sp, #0
 8002404:	6078      	str	r0, [r7, #4]
	return 1;
 8002406:	2301      	movs	r3, #1
}
 8002408:	4618      	mov	r0, r3
 800240a:	370c      	adds	r7, #12
 800240c:	46bd      	mov	sp, r7
 800240e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002412:	4770      	bx	lr

08002414 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002414:	b480      	push	{r7}
 8002416:	b085      	sub	sp, #20
 8002418:	af00      	add	r7, sp, #0
 800241a:	60f8      	str	r0, [r7, #12]
 800241c:	60b9      	str	r1, [r7, #8]
 800241e:	607a      	str	r2, [r7, #4]
	return 0;
 8002420:	2300      	movs	r3, #0
}
 8002422:	4618      	mov	r0, r3
 8002424:	3714      	adds	r7, #20
 8002426:	46bd      	mov	sp, r7
 8002428:	f85d 7b04 	ldr.w	r7, [sp], #4
 800242c:	4770      	bx	lr
	...

08002430 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002430:	b580      	push	{r7, lr}
 8002432:	b086      	sub	sp, #24
 8002434:	af00      	add	r7, sp, #0
 8002436:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002438:	4a14      	ldr	r2, [pc, #80]	; (800248c <_sbrk+0x5c>)
 800243a:	4b15      	ldr	r3, [pc, #84]	; (8002490 <_sbrk+0x60>)
 800243c:	1ad3      	subs	r3, r2, r3
 800243e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002440:	697b      	ldr	r3, [r7, #20]
 8002442:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002444:	4b13      	ldr	r3, [pc, #76]	; (8002494 <_sbrk+0x64>)
 8002446:	681b      	ldr	r3, [r3, #0]
 8002448:	2b00      	cmp	r3, #0
 800244a:	d102      	bne.n	8002452 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800244c:	4b11      	ldr	r3, [pc, #68]	; (8002494 <_sbrk+0x64>)
 800244e:	4a12      	ldr	r2, [pc, #72]	; (8002498 <_sbrk+0x68>)
 8002450:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002452:	4b10      	ldr	r3, [pc, #64]	; (8002494 <_sbrk+0x64>)
 8002454:	681a      	ldr	r2, [r3, #0]
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	4413      	add	r3, r2
 800245a:	693a      	ldr	r2, [r7, #16]
 800245c:	429a      	cmp	r2, r3
 800245e:	d207      	bcs.n	8002470 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002460:	f003 fd50 	bl	8005f04 <__errno>
 8002464:	4603      	mov	r3, r0
 8002466:	220c      	movs	r2, #12
 8002468:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800246a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800246e:	e009      	b.n	8002484 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002470:	4b08      	ldr	r3, [pc, #32]	; (8002494 <_sbrk+0x64>)
 8002472:	681b      	ldr	r3, [r3, #0]
 8002474:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002476:	4b07      	ldr	r3, [pc, #28]	; (8002494 <_sbrk+0x64>)
 8002478:	681a      	ldr	r2, [r3, #0]
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	4413      	add	r3, r2
 800247e:	4a05      	ldr	r2, [pc, #20]	; (8002494 <_sbrk+0x64>)
 8002480:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002482:	68fb      	ldr	r3, [r7, #12]
}
 8002484:	4618      	mov	r0, r3
 8002486:	3718      	adds	r7, #24
 8002488:	46bd      	mov	sp, r7
 800248a:	bd80      	pop	{r7, pc}
 800248c:	20020000 	.word	0x20020000
 8002490:	00000400 	.word	0x00000400
 8002494:	20000224 	.word	0x20000224
 8002498:	20000560 	.word	0x20000560

0800249c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800249c:	b480      	push	{r7}
 800249e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80024a0:	4b06      	ldr	r3, [pc, #24]	; (80024bc <SystemInit+0x20>)
 80024a2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80024a6:	4a05      	ldr	r2, [pc, #20]	; (80024bc <SystemInit+0x20>)
 80024a8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80024ac:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80024b0:	bf00      	nop
 80024b2:	46bd      	mov	sp, r7
 80024b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024b8:	4770      	bx	lr
 80024ba:	bf00      	nop
 80024bc:	e000ed00 	.word	0xe000ed00

080024c0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 80024c0:	f8df d034 	ldr.w	sp, [pc, #52]	; 80024f8 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80024c4:	480d      	ldr	r0, [pc, #52]	; (80024fc <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80024c6:	490e      	ldr	r1, [pc, #56]	; (8002500 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80024c8:	4a0e      	ldr	r2, [pc, #56]	; (8002504 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80024ca:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80024cc:	e002      	b.n	80024d4 <LoopCopyDataInit>

080024ce <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80024ce:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80024d0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80024d2:	3304      	adds	r3, #4

080024d4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80024d4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80024d6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80024d8:	d3f9      	bcc.n	80024ce <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80024da:	4a0b      	ldr	r2, [pc, #44]	; (8002508 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80024dc:	4c0b      	ldr	r4, [pc, #44]	; (800250c <LoopFillZerobss+0x26>)
  movs r3, #0
 80024de:	2300      	movs	r3, #0
  b LoopFillZerobss
 80024e0:	e001      	b.n	80024e6 <LoopFillZerobss>

080024e2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80024e2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80024e4:	3204      	adds	r2, #4

080024e6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80024e6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80024e8:	d3fb      	bcc.n	80024e2 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 80024ea:	f7ff ffd7 	bl	800249c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80024ee:	f003 fd0f 	bl	8005f10 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80024f2:	f7fe ff3b 	bl	800136c <main>
  bx  lr    
 80024f6:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80024f8:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80024fc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002500:	200001f8 	.word	0x200001f8
  ldr r2, =_sidata
 8002504:	0800919c 	.word	0x0800919c
  ldr r2, =_sbss
 8002508:	200001f8 	.word	0x200001f8
  ldr r4, =_ebss
 800250c:	2000055c 	.word	0x2000055c

08002510 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002510:	e7fe      	b.n	8002510 <ADC_IRQHandler>
	...

08002514 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002514:	b580      	push	{r7, lr}
 8002516:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002518:	4b0e      	ldr	r3, [pc, #56]	; (8002554 <HAL_Init+0x40>)
 800251a:	681b      	ldr	r3, [r3, #0]
 800251c:	4a0d      	ldr	r2, [pc, #52]	; (8002554 <HAL_Init+0x40>)
 800251e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002522:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8002524:	4b0b      	ldr	r3, [pc, #44]	; (8002554 <HAL_Init+0x40>)
 8002526:	681b      	ldr	r3, [r3, #0]
 8002528:	4a0a      	ldr	r2, [pc, #40]	; (8002554 <HAL_Init+0x40>)
 800252a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800252e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002530:	4b08      	ldr	r3, [pc, #32]	; (8002554 <HAL_Init+0x40>)
 8002532:	681b      	ldr	r3, [r3, #0]
 8002534:	4a07      	ldr	r2, [pc, #28]	; (8002554 <HAL_Init+0x40>)
 8002536:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800253a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800253c:	2003      	movs	r0, #3
 800253e:	f000 f94f 	bl	80027e0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002542:	2000      	movs	r0, #0
 8002544:	f000 f808 	bl	8002558 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002548:	f7ff fc3e 	bl	8001dc8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800254c:	2300      	movs	r3, #0
}
 800254e:	4618      	mov	r0, r3
 8002550:	bd80      	pop	{r7, pc}
 8002552:	bf00      	nop
 8002554:	40023c00 	.word	0x40023c00

08002558 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002558:	b580      	push	{r7, lr}
 800255a:	b082      	sub	sp, #8
 800255c:	af00      	add	r7, sp, #0
 800255e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002560:	4b12      	ldr	r3, [pc, #72]	; (80025ac <HAL_InitTick+0x54>)
 8002562:	681a      	ldr	r2, [r3, #0]
 8002564:	4b12      	ldr	r3, [pc, #72]	; (80025b0 <HAL_InitTick+0x58>)
 8002566:	781b      	ldrb	r3, [r3, #0]
 8002568:	4619      	mov	r1, r3
 800256a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800256e:	fbb3 f3f1 	udiv	r3, r3, r1
 8002572:	fbb2 f3f3 	udiv	r3, r2, r3
 8002576:	4618      	mov	r0, r3
 8002578:	f000 f967 	bl	800284a <HAL_SYSTICK_Config>
 800257c:	4603      	mov	r3, r0
 800257e:	2b00      	cmp	r3, #0
 8002580:	d001      	beq.n	8002586 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002582:	2301      	movs	r3, #1
 8002584:	e00e      	b.n	80025a4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	2b0f      	cmp	r3, #15
 800258a:	d80a      	bhi.n	80025a2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800258c:	2200      	movs	r2, #0
 800258e:	6879      	ldr	r1, [r7, #4]
 8002590:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8002594:	f000 f92f 	bl	80027f6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002598:	4a06      	ldr	r2, [pc, #24]	; (80025b4 <HAL_InitTick+0x5c>)
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800259e:	2300      	movs	r3, #0
 80025a0:	e000      	b.n	80025a4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80025a2:	2301      	movs	r3, #1
}
 80025a4:	4618      	mov	r0, r3
 80025a6:	3708      	adds	r7, #8
 80025a8:	46bd      	mov	sp, r7
 80025aa:	bd80      	pop	{r7, pc}
 80025ac:	2000001c 	.word	0x2000001c
 80025b0:	20000024 	.word	0x20000024
 80025b4:	20000020 	.word	0x20000020

080025b8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80025b8:	b480      	push	{r7}
 80025ba:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80025bc:	4b06      	ldr	r3, [pc, #24]	; (80025d8 <HAL_IncTick+0x20>)
 80025be:	781b      	ldrb	r3, [r3, #0]
 80025c0:	461a      	mov	r2, r3
 80025c2:	4b06      	ldr	r3, [pc, #24]	; (80025dc <HAL_IncTick+0x24>)
 80025c4:	681b      	ldr	r3, [r3, #0]
 80025c6:	4413      	add	r3, r2
 80025c8:	4a04      	ldr	r2, [pc, #16]	; (80025dc <HAL_IncTick+0x24>)
 80025ca:	6013      	str	r3, [r2, #0]
}
 80025cc:	bf00      	nop
 80025ce:	46bd      	mov	sp, r7
 80025d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025d4:	4770      	bx	lr
 80025d6:	bf00      	nop
 80025d8:	20000024 	.word	0x20000024
 80025dc:	20000548 	.word	0x20000548

080025e0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80025e0:	b480      	push	{r7}
 80025e2:	af00      	add	r7, sp, #0
  return uwTick;
 80025e4:	4b03      	ldr	r3, [pc, #12]	; (80025f4 <HAL_GetTick+0x14>)
 80025e6:	681b      	ldr	r3, [r3, #0]
}
 80025e8:	4618      	mov	r0, r3
 80025ea:	46bd      	mov	sp, r7
 80025ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025f0:	4770      	bx	lr
 80025f2:	bf00      	nop
 80025f4:	20000548 	.word	0x20000548

080025f8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80025f8:	b580      	push	{r7, lr}
 80025fa:	b084      	sub	sp, #16
 80025fc:	af00      	add	r7, sp, #0
 80025fe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002600:	f7ff ffee 	bl	80025e0 <HAL_GetTick>
 8002604:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800260a:	68fb      	ldr	r3, [r7, #12]
 800260c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002610:	d005      	beq.n	800261e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002612:	4b0a      	ldr	r3, [pc, #40]	; (800263c <HAL_Delay+0x44>)
 8002614:	781b      	ldrb	r3, [r3, #0]
 8002616:	461a      	mov	r2, r3
 8002618:	68fb      	ldr	r3, [r7, #12]
 800261a:	4413      	add	r3, r2
 800261c:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800261e:	bf00      	nop
 8002620:	f7ff ffde 	bl	80025e0 <HAL_GetTick>
 8002624:	4602      	mov	r2, r0
 8002626:	68bb      	ldr	r3, [r7, #8]
 8002628:	1ad3      	subs	r3, r2, r3
 800262a:	68fa      	ldr	r2, [r7, #12]
 800262c:	429a      	cmp	r2, r3
 800262e:	d8f7      	bhi.n	8002620 <HAL_Delay+0x28>
  {
  }
}
 8002630:	bf00      	nop
 8002632:	bf00      	nop
 8002634:	3710      	adds	r7, #16
 8002636:	46bd      	mov	sp, r7
 8002638:	bd80      	pop	{r7, pc}
 800263a:	bf00      	nop
 800263c:	20000024 	.word	0x20000024

08002640 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002640:	b480      	push	{r7}
 8002642:	b085      	sub	sp, #20
 8002644:	af00      	add	r7, sp, #0
 8002646:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	f003 0307 	and.w	r3, r3, #7
 800264e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002650:	4b0c      	ldr	r3, [pc, #48]	; (8002684 <__NVIC_SetPriorityGrouping+0x44>)
 8002652:	68db      	ldr	r3, [r3, #12]
 8002654:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002656:	68ba      	ldr	r2, [r7, #8]
 8002658:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800265c:	4013      	ands	r3, r2
 800265e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002660:	68fb      	ldr	r3, [r7, #12]
 8002662:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002664:	68bb      	ldr	r3, [r7, #8]
 8002666:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002668:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800266c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002670:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002672:	4a04      	ldr	r2, [pc, #16]	; (8002684 <__NVIC_SetPriorityGrouping+0x44>)
 8002674:	68bb      	ldr	r3, [r7, #8]
 8002676:	60d3      	str	r3, [r2, #12]
}
 8002678:	bf00      	nop
 800267a:	3714      	adds	r7, #20
 800267c:	46bd      	mov	sp, r7
 800267e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002682:	4770      	bx	lr
 8002684:	e000ed00 	.word	0xe000ed00

08002688 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002688:	b480      	push	{r7}
 800268a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800268c:	4b04      	ldr	r3, [pc, #16]	; (80026a0 <__NVIC_GetPriorityGrouping+0x18>)
 800268e:	68db      	ldr	r3, [r3, #12]
 8002690:	0a1b      	lsrs	r3, r3, #8
 8002692:	f003 0307 	and.w	r3, r3, #7
}
 8002696:	4618      	mov	r0, r3
 8002698:	46bd      	mov	sp, r7
 800269a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800269e:	4770      	bx	lr
 80026a0:	e000ed00 	.word	0xe000ed00

080026a4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80026a4:	b480      	push	{r7}
 80026a6:	b083      	sub	sp, #12
 80026a8:	af00      	add	r7, sp, #0
 80026aa:	4603      	mov	r3, r0
 80026ac:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80026ae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80026b2:	2b00      	cmp	r3, #0
 80026b4:	db0b      	blt.n	80026ce <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80026b6:	79fb      	ldrb	r3, [r7, #7]
 80026b8:	f003 021f 	and.w	r2, r3, #31
 80026bc:	4907      	ldr	r1, [pc, #28]	; (80026dc <__NVIC_EnableIRQ+0x38>)
 80026be:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80026c2:	095b      	lsrs	r3, r3, #5
 80026c4:	2001      	movs	r0, #1
 80026c6:	fa00 f202 	lsl.w	r2, r0, r2
 80026ca:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80026ce:	bf00      	nop
 80026d0:	370c      	adds	r7, #12
 80026d2:	46bd      	mov	sp, r7
 80026d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026d8:	4770      	bx	lr
 80026da:	bf00      	nop
 80026dc:	e000e100 	.word	0xe000e100

080026e0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80026e0:	b480      	push	{r7}
 80026e2:	b083      	sub	sp, #12
 80026e4:	af00      	add	r7, sp, #0
 80026e6:	4603      	mov	r3, r0
 80026e8:	6039      	str	r1, [r7, #0]
 80026ea:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80026ec:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80026f0:	2b00      	cmp	r3, #0
 80026f2:	db0a      	blt.n	800270a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80026f4:	683b      	ldr	r3, [r7, #0]
 80026f6:	b2da      	uxtb	r2, r3
 80026f8:	490c      	ldr	r1, [pc, #48]	; (800272c <__NVIC_SetPriority+0x4c>)
 80026fa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80026fe:	0112      	lsls	r2, r2, #4
 8002700:	b2d2      	uxtb	r2, r2
 8002702:	440b      	add	r3, r1
 8002704:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002708:	e00a      	b.n	8002720 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800270a:	683b      	ldr	r3, [r7, #0]
 800270c:	b2da      	uxtb	r2, r3
 800270e:	4908      	ldr	r1, [pc, #32]	; (8002730 <__NVIC_SetPriority+0x50>)
 8002710:	79fb      	ldrb	r3, [r7, #7]
 8002712:	f003 030f 	and.w	r3, r3, #15
 8002716:	3b04      	subs	r3, #4
 8002718:	0112      	lsls	r2, r2, #4
 800271a:	b2d2      	uxtb	r2, r2
 800271c:	440b      	add	r3, r1
 800271e:	761a      	strb	r2, [r3, #24]
}
 8002720:	bf00      	nop
 8002722:	370c      	adds	r7, #12
 8002724:	46bd      	mov	sp, r7
 8002726:	f85d 7b04 	ldr.w	r7, [sp], #4
 800272a:	4770      	bx	lr
 800272c:	e000e100 	.word	0xe000e100
 8002730:	e000ed00 	.word	0xe000ed00

08002734 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002734:	b480      	push	{r7}
 8002736:	b089      	sub	sp, #36	; 0x24
 8002738:	af00      	add	r7, sp, #0
 800273a:	60f8      	str	r0, [r7, #12]
 800273c:	60b9      	str	r1, [r7, #8]
 800273e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002740:	68fb      	ldr	r3, [r7, #12]
 8002742:	f003 0307 	and.w	r3, r3, #7
 8002746:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002748:	69fb      	ldr	r3, [r7, #28]
 800274a:	f1c3 0307 	rsb	r3, r3, #7
 800274e:	2b04      	cmp	r3, #4
 8002750:	bf28      	it	cs
 8002752:	2304      	movcs	r3, #4
 8002754:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002756:	69fb      	ldr	r3, [r7, #28]
 8002758:	3304      	adds	r3, #4
 800275a:	2b06      	cmp	r3, #6
 800275c:	d902      	bls.n	8002764 <NVIC_EncodePriority+0x30>
 800275e:	69fb      	ldr	r3, [r7, #28]
 8002760:	3b03      	subs	r3, #3
 8002762:	e000      	b.n	8002766 <NVIC_EncodePriority+0x32>
 8002764:	2300      	movs	r3, #0
 8002766:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002768:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800276c:	69bb      	ldr	r3, [r7, #24]
 800276e:	fa02 f303 	lsl.w	r3, r2, r3
 8002772:	43da      	mvns	r2, r3
 8002774:	68bb      	ldr	r3, [r7, #8]
 8002776:	401a      	ands	r2, r3
 8002778:	697b      	ldr	r3, [r7, #20]
 800277a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800277c:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8002780:	697b      	ldr	r3, [r7, #20]
 8002782:	fa01 f303 	lsl.w	r3, r1, r3
 8002786:	43d9      	mvns	r1, r3
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800278c:	4313      	orrs	r3, r2
         );
}
 800278e:	4618      	mov	r0, r3
 8002790:	3724      	adds	r7, #36	; 0x24
 8002792:	46bd      	mov	sp, r7
 8002794:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002798:	4770      	bx	lr
	...

0800279c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800279c:	b580      	push	{r7, lr}
 800279e:	b082      	sub	sp, #8
 80027a0:	af00      	add	r7, sp, #0
 80027a2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	3b01      	subs	r3, #1
 80027a8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80027ac:	d301      	bcc.n	80027b2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80027ae:	2301      	movs	r3, #1
 80027b0:	e00f      	b.n	80027d2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80027b2:	4a0a      	ldr	r2, [pc, #40]	; (80027dc <SysTick_Config+0x40>)
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	3b01      	subs	r3, #1
 80027b8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80027ba:	210f      	movs	r1, #15
 80027bc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80027c0:	f7ff ff8e 	bl	80026e0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80027c4:	4b05      	ldr	r3, [pc, #20]	; (80027dc <SysTick_Config+0x40>)
 80027c6:	2200      	movs	r2, #0
 80027c8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80027ca:	4b04      	ldr	r3, [pc, #16]	; (80027dc <SysTick_Config+0x40>)
 80027cc:	2207      	movs	r2, #7
 80027ce:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80027d0:	2300      	movs	r3, #0
}
 80027d2:	4618      	mov	r0, r3
 80027d4:	3708      	adds	r7, #8
 80027d6:	46bd      	mov	sp, r7
 80027d8:	bd80      	pop	{r7, pc}
 80027da:	bf00      	nop
 80027dc:	e000e010 	.word	0xe000e010

080027e0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80027e0:	b580      	push	{r7, lr}
 80027e2:	b082      	sub	sp, #8
 80027e4:	af00      	add	r7, sp, #0
 80027e6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80027e8:	6878      	ldr	r0, [r7, #4]
 80027ea:	f7ff ff29 	bl	8002640 <__NVIC_SetPriorityGrouping>
}
 80027ee:	bf00      	nop
 80027f0:	3708      	adds	r7, #8
 80027f2:	46bd      	mov	sp, r7
 80027f4:	bd80      	pop	{r7, pc}

080027f6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80027f6:	b580      	push	{r7, lr}
 80027f8:	b086      	sub	sp, #24
 80027fa:	af00      	add	r7, sp, #0
 80027fc:	4603      	mov	r3, r0
 80027fe:	60b9      	str	r1, [r7, #8]
 8002800:	607a      	str	r2, [r7, #4]
 8002802:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002804:	2300      	movs	r3, #0
 8002806:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002808:	f7ff ff3e 	bl	8002688 <__NVIC_GetPriorityGrouping>
 800280c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800280e:	687a      	ldr	r2, [r7, #4]
 8002810:	68b9      	ldr	r1, [r7, #8]
 8002812:	6978      	ldr	r0, [r7, #20]
 8002814:	f7ff ff8e 	bl	8002734 <NVIC_EncodePriority>
 8002818:	4602      	mov	r2, r0
 800281a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800281e:	4611      	mov	r1, r2
 8002820:	4618      	mov	r0, r3
 8002822:	f7ff ff5d 	bl	80026e0 <__NVIC_SetPriority>
}
 8002826:	bf00      	nop
 8002828:	3718      	adds	r7, #24
 800282a:	46bd      	mov	sp, r7
 800282c:	bd80      	pop	{r7, pc}

0800282e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800282e:	b580      	push	{r7, lr}
 8002830:	b082      	sub	sp, #8
 8002832:	af00      	add	r7, sp, #0
 8002834:	4603      	mov	r3, r0
 8002836:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002838:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800283c:	4618      	mov	r0, r3
 800283e:	f7ff ff31 	bl	80026a4 <__NVIC_EnableIRQ>
}
 8002842:	bf00      	nop
 8002844:	3708      	adds	r7, #8
 8002846:	46bd      	mov	sp, r7
 8002848:	bd80      	pop	{r7, pc}

0800284a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800284a:	b580      	push	{r7, lr}
 800284c:	b082      	sub	sp, #8
 800284e:	af00      	add	r7, sp, #0
 8002850:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002852:	6878      	ldr	r0, [r7, #4]
 8002854:	f7ff ffa2 	bl	800279c <SysTick_Config>
 8002858:	4603      	mov	r3, r0
}
 800285a:	4618      	mov	r0, r3
 800285c:	3708      	adds	r7, #8
 800285e:	46bd      	mov	sp, r7
 8002860:	bd80      	pop	{r7, pc}
	...

08002864 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002864:	b480      	push	{r7}
 8002866:	b089      	sub	sp, #36	; 0x24
 8002868:	af00      	add	r7, sp, #0
 800286a:	6078      	str	r0, [r7, #4]
 800286c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800286e:	2300      	movs	r3, #0
 8002870:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002872:	2300      	movs	r3, #0
 8002874:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002876:	2300      	movs	r3, #0
 8002878:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800287a:	2300      	movs	r3, #0
 800287c:	61fb      	str	r3, [r7, #28]
 800287e:	e165      	b.n	8002b4c <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002880:	2201      	movs	r2, #1
 8002882:	69fb      	ldr	r3, [r7, #28]
 8002884:	fa02 f303 	lsl.w	r3, r2, r3
 8002888:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800288a:	683b      	ldr	r3, [r7, #0]
 800288c:	681b      	ldr	r3, [r3, #0]
 800288e:	697a      	ldr	r2, [r7, #20]
 8002890:	4013      	ands	r3, r2
 8002892:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002894:	693a      	ldr	r2, [r7, #16]
 8002896:	697b      	ldr	r3, [r7, #20]
 8002898:	429a      	cmp	r2, r3
 800289a:	f040 8154 	bne.w	8002b46 <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800289e:	683b      	ldr	r3, [r7, #0]
 80028a0:	685b      	ldr	r3, [r3, #4]
 80028a2:	f003 0303 	and.w	r3, r3, #3
 80028a6:	2b01      	cmp	r3, #1
 80028a8:	d005      	beq.n	80028b6 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80028aa:	683b      	ldr	r3, [r7, #0]
 80028ac:	685b      	ldr	r3, [r3, #4]
 80028ae:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80028b2:	2b02      	cmp	r3, #2
 80028b4:	d130      	bne.n	8002918 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	689b      	ldr	r3, [r3, #8]
 80028ba:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80028bc:	69fb      	ldr	r3, [r7, #28]
 80028be:	005b      	lsls	r3, r3, #1
 80028c0:	2203      	movs	r2, #3
 80028c2:	fa02 f303 	lsl.w	r3, r2, r3
 80028c6:	43db      	mvns	r3, r3
 80028c8:	69ba      	ldr	r2, [r7, #24]
 80028ca:	4013      	ands	r3, r2
 80028cc:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80028ce:	683b      	ldr	r3, [r7, #0]
 80028d0:	68da      	ldr	r2, [r3, #12]
 80028d2:	69fb      	ldr	r3, [r7, #28]
 80028d4:	005b      	lsls	r3, r3, #1
 80028d6:	fa02 f303 	lsl.w	r3, r2, r3
 80028da:	69ba      	ldr	r2, [r7, #24]
 80028dc:	4313      	orrs	r3, r2
 80028de:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	69ba      	ldr	r2, [r7, #24]
 80028e4:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	685b      	ldr	r3, [r3, #4]
 80028ea:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80028ec:	2201      	movs	r2, #1
 80028ee:	69fb      	ldr	r3, [r7, #28]
 80028f0:	fa02 f303 	lsl.w	r3, r2, r3
 80028f4:	43db      	mvns	r3, r3
 80028f6:	69ba      	ldr	r2, [r7, #24]
 80028f8:	4013      	ands	r3, r2
 80028fa:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80028fc:	683b      	ldr	r3, [r7, #0]
 80028fe:	685b      	ldr	r3, [r3, #4]
 8002900:	091b      	lsrs	r3, r3, #4
 8002902:	f003 0201 	and.w	r2, r3, #1
 8002906:	69fb      	ldr	r3, [r7, #28]
 8002908:	fa02 f303 	lsl.w	r3, r2, r3
 800290c:	69ba      	ldr	r2, [r7, #24]
 800290e:	4313      	orrs	r3, r2
 8002910:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	69ba      	ldr	r2, [r7, #24]
 8002916:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002918:	683b      	ldr	r3, [r7, #0]
 800291a:	685b      	ldr	r3, [r3, #4]
 800291c:	f003 0303 	and.w	r3, r3, #3
 8002920:	2b03      	cmp	r3, #3
 8002922:	d017      	beq.n	8002954 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	68db      	ldr	r3, [r3, #12]
 8002928:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800292a:	69fb      	ldr	r3, [r7, #28]
 800292c:	005b      	lsls	r3, r3, #1
 800292e:	2203      	movs	r2, #3
 8002930:	fa02 f303 	lsl.w	r3, r2, r3
 8002934:	43db      	mvns	r3, r3
 8002936:	69ba      	ldr	r2, [r7, #24]
 8002938:	4013      	ands	r3, r2
 800293a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800293c:	683b      	ldr	r3, [r7, #0]
 800293e:	689a      	ldr	r2, [r3, #8]
 8002940:	69fb      	ldr	r3, [r7, #28]
 8002942:	005b      	lsls	r3, r3, #1
 8002944:	fa02 f303 	lsl.w	r3, r2, r3
 8002948:	69ba      	ldr	r2, [r7, #24]
 800294a:	4313      	orrs	r3, r2
 800294c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	69ba      	ldr	r2, [r7, #24]
 8002952:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002954:	683b      	ldr	r3, [r7, #0]
 8002956:	685b      	ldr	r3, [r3, #4]
 8002958:	f003 0303 	and.w	r3, r3, #3
 800295c:	2b02      	cmp	r3, #2
 800295e:	d123      	bne.n	80029a8 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002960:	69fb      	ldr	r3, [r7, #28]
 8002962:	08da      	lsrs	r2, r3, #3
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	3208      	adds	r2, #8
 8002968:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800296c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800296e:	69fb      	ldr	r3, [r7, #28]
 8002970:	f003 0307 	and.w	r3, r3, #7
 8002974:	009b      	lsls	r3, r3, #2
 8002976:	220f      	movs	r2, #15
 8002978:	fa02 f303 	lsl.w	r3, r2, r3
 800297c:	43db      	mvns	r3, r3
 800297e:	69ba      	ldr	r2, [r7, #24]
 8002980:	4013      	ands	r3, r2
 8002982:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002984:	683b      	ldr	r3, [r7, #0]
 8002986:	691a      	ldr	r2, [r3, #16]
 8002988:	69fb      	ldr	r3, [r7, #28]
 800298a:	f003 0307 	and.w	r3, r3, #7
 800298e:	009b      	lsls	r3, r3, #2
 8002990:	fa02 f303 	lsl.w	r3, r2, r3
 8002994:	69ba      	ldr	r2, [r7, #24]
 8002996:	4313      	orrs	r3, r2
 8002998:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800299a:	69fb      	ldr	r3, [r7, #28]
 800299c:	08da      	lsrs	r2, r3, #3
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	3208      	adds	r2, #8
 80029a2:	69b9      	ldr	r1, [r7, #24]
 80029a4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	681b      	ldr	r3, [r3, #0]
 80029ac:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80029ae:	69fb      	ldr	r3, [r7, #28]
 80029b0:	005b      	lsls	r3, r3, #1
 80029b2:	2203      	movs	r2, #3
 80029b4:	fa02 f303 	lsl.w	r3, r2, r3
 80029b8:	43db      	mvns	r3, r3
 80029ba:	69ba      	ldr	r2, [r7, #24]
 80029bc:	4013      	ands	r3, r2
 80029be:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80029c0:	683b      	ldr	r3, [r7, #0]
 80029c2:	685b      	ldr	r3, [r3, #4]
 80029c4:	f003 0203 	and.w	r2, r3, #3
 80029c8:	69fb      	ldr	r3, [r7, #28]
 80029ca:	005b      	lsls	r3, r3, #1
 80029cc:	fa02 f303 	lsl.w	r3, r2, r3
 80029d0:	69ba      	ldr	r2, [r7, #24]
 80029d2:	4313      	orrs	r3, r2
 80029d4:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	69ba      	ldr	r2, [r7, #24]
 80029da:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80029dc:	683b      	ldr	r3, [r7, #0]
 80029de:	685b      	ldr	r3, [r3, #4]
 80029e0:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80029e4:	2b00      	cmp	r3, #0
 80029e6:	f000 80ae 	beq.w	8002b46 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80029ea:	2300      	movs	r3, #0
 80029ec:	60fb      	str	r3, [r7, #12]
 80029ee:	4b5d      	ldr	r3, [pc, #372]	; (8002b64 <HAL_GPIO_Init+0x300>)
 80029f0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80029f2:	4a5c      	ldr	r2, [pc, #368]	; (8002b64 <HAL_GPIO_Init+0x300>)
 80029f4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80029f8:	6453      	str	r3, [r2, #68]	; 0x44
 80029fa:	4b5a      	ldr	r3, [pc, #360]	; (8002b64 <HAL_GPIO_Init+0x300>)
 80029fc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80029fe:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002a02:	60fb      	str	r3, [r7, #12]
 8002a04:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002a06:	4a58      	ldr	r2, [pc, #352]	; (8002b68 <HAL_GPIO_Init+0x304>)
 8002a08:	69fb      	ldr	r3, [r7, #28]
 8002a0a:	089b      	lsrs	r3, r3, #2
 8002a0c:	3302      	adds	r3, #2
 8002a0e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002a12:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002a14:	69fb      	ldr	r3, [r7, #28]
 8002a16:	f003 0303 	and.w	r3, r3, #3
 8002a1a:	009b      	lsls	r3, r3, #2
 8002a1c:	220f      	movs	r2, #15
 8002a1e:	fa02 f303 	lsl.w	r3, r2, r3
 8002a22:	43db      	mvns	r3, r3
 8002a24:	69ba      	ldr	r2, [r7, #24]
 8002a26:	4013      	ands	r3, r2
 8002a28:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	4a4f      	ldr	r2, [pc, #316]	; (8002b6c <HAL_GPIO_Init+0x308>)
 8002a2e:	4293      	cmp	r3, r2
 8002a30:	d025      	beq.n	8002a7e <HAL_GPIO_Init+0x21a>
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	4a4e      	ldr	r2, [pc, #312]	; (8002b70 <HAL_GPIO_Init+0x30c>)
 8002a36:	4293      	cmp	r3, r2
 8002a38:	d01f      	beq.n	8002a7a <HAL_GPIO_Init+0x216>
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	4a4d      	ldr	r2, [pc, #308]	; (8002b74 <HAL_GPIO_Init+0x310>)
 8002a3e:	4293      	cmp	r3, r2
 8002a40:	d019      	beq.n	8002a76 <HAL_GPIO_Init+0x212>
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	4a4c      	ldr	r2, [pc, #304]	; (8002b78 <HAL_GPIO_Init+0x314>)
 8002a46:	4293      	cmp	r3, r2
 8002a48:	d013      	beq.n	8002a72 <HAL_GPIO_Init+0x20e>
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	4a4b      	ldr	r2, [pc, #300]	; (8002b7c <HAL_GPIO_Init+0x318>)
 8002a4e:	4293      	cmp	r3, r2
 8002a50:	d00d      	beq.n	8002a6e <HAL_GPIO_Init+0x20a>
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	4a4a      	ldr	r2, [pc, #296]	; (8002b80 <HAL_GPIO_Init+0x31c>)
 8002a56:	4293      	cmp	r3, r2
 8002a58:	d007      	beq.n	8002a6a <HAL_GPIO_Init+0x206>
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	4a49      	ldr	r2, [pc, #292]	; (8002b84 <HAL_GPIO_Init+0x320>)
 8002a5e:	4293      	cmp	r3, r2
 8002a60:	d101      	bne.n	8002a66 <HAL_GPIO_Init+0x202>
 8002a62:	2306      	movs	r3, #6
 8002a64:	e00c      	b.n	8002a80 <HAL_GPIO_Init+0x21c>
 8002a66:	2307      	movs	r3, #7
 8002a68:	e00a      	b.n	8002a80 <HAL_GPIO_Init+0x21c>
 8002a6a:	2305      	movs	r3, #5
 8002a6c:	e008      	b.n	8002a80 <HAL_GPIO_Init+0x21c>
 8002a6e:	2304      	movs	r3, #4
 8002a70:	e006      	b.n	8002a80 <HAL_GPIO_Init+0x21c>
 8002a72:	2303      	movs	r3, #3
 8002a74:	e004      	b.n	8002a80 <HAL_GPIO_Init+0x21c>
 8002a76:	2302      	movs	r3, #2
 8002a78:	e002      	b.n	8002a80 <HAL_GPIO_Init+0x21c>
 8002a7a:	2301      	movs	r3, #1
 8002a7c:	e000      	b.n	8002a80 <HAL_GPIO_Init+0x21c>
 8002a7e:	2300      	movs	r3, #0
 8002a80:	69fa      	ldr	r2, [r7, #28]
 8002a82:	f002 0203 	and.w	r2, r2, #3
 8002a86:	0092      	lsls	r2, r2, #2
 8002a88:	4093      	lsls	r3, r2
 8002a8a:	69ba      	ldr	r2, [r7, #24]
 8002a8c:	4313      	orrs	r3, r2
 8002a8e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002a90:	4935      	ldr	r1, [pc, #212]	; (8002b68 <HAL_GPIO_Init+0x304>)
 8002a92:	69fb      	ldr	r3, [r7, #28]
 8002a94:	089b      	lsrs	r3, r3, #2
 8002a96:	3302      	adds	r3, #2
 8002a98:	69ba      	ldr	r2, [r7, #24]
 8002a9a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002a9e:	4b3a      	ldr	r3, [pc, #232]	; (8002b88 <HAL_GPIO_Init+0x324>)
 8002aa0:	681b      	ldr	r3, [r3, #0]
 8002aa2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002aa4:	693b      	ldr	r3, [r7, #16]
 8002aa6:	43db      	mvns	r3, r3
 8002aa8:	69ba      	ldr	r2, [r7, #24]
 8002aaa:	4013      	ands	r3, r2
 8002aac:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002aae:	683b      	ldr	r3, [r7, #0]
 8002ab0:	685b      	ldr	r3, [r3, #4]
 8002ab2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002ab6:	2b00      	cmp	r3, #0
 8002ab8:	d003      	beq.n	8002ac2 <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 8002aba:	69ba      	ldr	r2, [r7, #24]
 8002abc:	693b      	ldr	r3, [r7, #16]
 8002abe:	4313      	orrs	r3, r2
 8002ac0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002ac2:	4a31      	ldr	r2, [pc, #196]	; (8002b88 <HAL_GPIO_Init+0x324>)
 8002ac4:	69bb      	ldr	r3, [r7, #24]
 8002ac6:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8002ac8:	4b2f      	ldr	r3, [pc, #188]	; (8002b88 <HAL_GPIO_Init+0x324>)
 8002aca:	685b      	ldr	r3, [r3, #4]
 8002acc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002ace:	693b      	ldr	r3, [r7, #16]
 8002ad0:	43db      	mvns	r3, r3
 8002ad2:	69ba      	ldr	r2, [r7, #24]
 8002ad4:	4013      	ands	r3, r2
 8002ad6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002ad8:	683b      	ldr	r3, [r7, #0]
 8002ada:	685b      	ldr	r3, [r3, #4]
 8002adc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002ae0:	2b00      	cmp	r3, #0
 8002ae2:	d003      	beq.n	8002aec <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8002ae4:	69ba      	ldr	r2, [r7, #24]
 8002ae6:	693b      	ldr	r3, [r7, #16]
 8002ae8:	4313      	orrs	r3, r2
 8002aea:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002aec:	4a26      	ldr	r2, [pc, #152]	; (8002b88 <HAL_GPIO_Init+0x324>)
 8002aee:	69bb      	ldr	r3, [r7, #24]
 8002af0:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002af2:	4b25      	ldr	r3, [pc, #148]	; (8002b88 <HAL_GPIO_Init+0x324>)
 8002af4:	689b      	ldr	r3, [r3, #8]
 8002af6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002af8:	693b      	ldr	r3, [r7, #16]
 8002afa:	43db      	mvns	r3, r3
 8002afc:	69ba      	ldr	r2, [r7, #24]
 8002afe:	4013      	ands	r3, r2
 8002b00:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002b02:	683b      	ldr	r3, [r7, #0]
 8002b04:	685b      	ldr	r3, [r3, #4]
 8002b06:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002b0a:	2b00      	cmp	r3, #0
 8002b0c:	d003      	beq.n	8002b16 <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 8002b0e:	69ba      	ldr	r2, [r7, #24]
 8002b10:	693b      	ldr	r3, [r7, #16]
 8002b12:	4313      	orrs	r3, r2
 8002b14:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002b16:	4a1c      	ldr	r2, [pc, #112]	; (8002b88 <HAL_GPIO_Init+0x324>)
 8002b18:	69bb      	ldr	r3, [r7, #24]
 8002b1a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002b1c:	4b1a      	ldr	r3, [pc, #104]	; (8002b88 <HAL_GPIO_Init+0x324>)
 8002b1e:	68db      	ldr	r3, [r3, #12]
 8002b20:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002b22:	693b      	ldr	r3, [r7, #16]
 8002b24:	43db      	mvns	r3, r3
 8002b26:	69ba      	ldr	r2, [r7, #24]
 8002b28:	4013      	ands	r3, r2
 8002b2a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002b2c:	683b      	ldr	r3, [r7, #0]
 8002b2e:	685b      	ldr	r3, [r3, #4]
 8002b30:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002b34:	2b00      	cmp	r3, #0
 8002b36:	d003      	beq.n	8002b40 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8002b38:	69ba      	ldr	r2, [r7, #24]
 8002b3a:	693b      	ldr	r3, [r7, #16]
 8002b3c:	4313      	orrs	r3, r2
 8002b3e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002b40:	4a11      	ldr	r2, [pc, #68]	; (8002b88 <HAL_GPIO_Init+0x324>)
 8002b42:	69bb      	ldr	r3, [r7, #24]
 8002b44:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002b46:	69fb      	ldr	r3, [r7, #28]
 8002b48:	3301      	adds	r3, #1
 8002b4a:	61fb      	str	r3, [r7, #28]
 8002b4c:	69fb      	ldr	r3, [r7, #28]
 8002b4e:	2b0f      	cmp	r3, #15
 8002b50:	f67f ae96 	bls.w	8002880 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002b54:	bf00      	nop
 8002b56:	bf00      	nop
 8002b58:	3724      	adds	r7, #36	; 0x24
 8002b5a:	46bd      	mov	sp, r7
 8002b5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b60:	4770      	bx	lr
 8002b62:	bf00      	nop
 8002b64:	40023800 	.word	0x40023800
 8002b68:	40013800 	.word	0x40013800
 8002b6c:	40020000 	.word	0x40020000
 8002b70:	40020400 	.word	0x40020400
 8002b74:	40020800 	.word	0x40020800
 8002b78:	40020c00 	.word	0x40020c00
 8002b7c:	40021000 	.word	0x40021000
 8002b80:	40021400 	.word	0x40021400
 8002b84:	40021800 	.word	0x40021800
 8002b88:	40013c00 	.word	0x40013c00

08002b8c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002b8c:	b480      	push	{r7}
 8002b8e:	b083      	sub	sp, #12
 8002b90:	af00      	add	r7, sp, #0
 8002b92:	6078      	str	r0, [r7, #4]
 8002b94:	460b      	mov	r3, r1
 8002b96:	807b      	strh	r3, [r7, #2]
 8002b98:	4613      	mov	r3, r2
 8002b9a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002b9c:	787b      	ldrb	r3, [r7, #1]
 8002b9e:	2b00      	cmp	r3, #0
 8002ba0:	d003      	beq.n	8002baa <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002ba2:	887a      	ldrh	r2, [r7, #2]
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002ba8:	e003      	b.n	8002bb2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002baa:	887b      	ldrh	r3, [r7, #2]
 8002bac:	041a      	lsls	r2, r3, #16
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	619a      	str	r2, [r3, #24]
}
 8002bb2:	bf00      	nop
 8002bb4:	370c      	adds	r7, #12
 8002bb6:	46bd      	mov	sp, r7
 8002bb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bbc:	4770      	bx	lr
	...

08002bc0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002bc0:	b580      	push	{r7, lr}
 8002bc2:	b084      	sub	sp, #16
 8002bc4:	af00      	add	r7, sp, #0
 8002bc6:	6078      	str	r0, [r7, #4]
 8002bc8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	2b00      	cmp	r3, #0
 8002bce:	d101      	bne.n	8002bd4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002bd0:	2301      	movs	r3, #1
 8002bd2:	e0cc      	b.n	8002d6e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002bd4:	4b68      	ldr	r3, [pc, #416]	; (8002d78 <HAL_RCC_ClockConfig+0x1b8>)
 8002bd6:	681b      	ldr	r3, [r3, #0]
 8002bd8:	f003 030f 	and.w	r3, r3, #15
 8002bdc:	683a      	ldr	r2, [r7, #0]
 8002bde:	429a      	cmp	r2, r3
 8002be0:	d90c      	bls.n	8002bfc <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002be2:	4b65      	ldr	r3, [pc, #404]	; (8002d78 <HAL_RCC_ClockConfig+0x1b8>)
 8002be4:	683a      	ldr	r2, [r7, #0]
 8002be6:	b2d2      	uxtb	r2, r2
 8002be8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002bea:	4b63      	ldr	r3, [pc, #396]	; (8002d78 <HAL_RCC_ClockConfig+0x1b8>)
 8002bec:	681b      	ldr	r3, [r3, #0]
 8002bee:	f003 030f 	and.w	r3, r3, #15
 8002bf2:	683a      	ldr	r2, [r7, #0]
 8002bf4:	429a      	cmp	r2, r3
 8002bf6:	d001      	beq.n	8002bfc <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002bf8:	2301      	movs	r3, #1
 8002bfa:	e0b8      	b.n	8002d6e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	681b      	ldr	r3, [r3, #0]
 8002c00:	f003 0302 	and.w	r3, r3, #2
 8002c04:	2b00      	cmp	r3, #0
 8002c06:	d020      	beq.n	8002c4a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	681b      	ldr	r3, [r3, #0]
 8002c0c:	f003 0304 	and.w	r3, r3, #4
 8002c10:	2b00      	cmp	r3, #0
 8002c12:	d005      	beq.n	8002c20 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002c14:	4b59      	ldr	r3, [pc, #356]	; (8002d7c <HAL_RCC_ClockConfig+0x1bc>)
 8002c16:	689b      	ldr	r3, [r3, #8]
 8002c18:	4a58      	ldr	r2, [pc, #352]	; (8002d7c <HAL_RCC_ClockConfig+0x1bc>)
 8002c1a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8002c1e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	681b      	ldr	r3, [r3, #0]
 8002c24:	f003 0308 	and.w	r3, r3, #8
 8002c28:	2b00      	cmp	r3, #0
 8002c2a:	d005      	beq.n	8002c38 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002c2c:	4b53      	ldr	r3, [pc, #332]	; (8002d7c <HAL_RCC_ClockConfig+0x1bc>)
 8002c2e:	689b      	ldr	r3, [r3, #8]
 8002c30:	4a52      	ldr	r2, [pc, #328]	; (8002d7c <HAL_RCC_ClockConfig+0x1bc>)
 8002c32:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8002c36:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002c38:	4b50      	ldr	r3, [pc, #320]	; (8002d7c <HAL_RCC_ClockConfig+0x1bc>)
 8002c3a:	689b      	ldr	r3, [r3, #8]
 8002c3c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	689b      	ldr	r3, [r3, #8]
 8002c44:	494d      	ldr	r1, [pc, #308]	; (8002d7c <HAL_RCC_ClockConfig+0x1bc>)
 8002c46:	4313      	orrs	r3, r2
 8002c48:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	681b      	ldr	r3, [r3, #0]
 8002c4e:	f003 0301 	and.w	r3, r3, #1
 8002c52:	2b00      	cmp	r3, #0
 8002c54:	d044      	beq.n	8002ce0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	685b      	ldr	r3, [r3, #4]
 8002c5a:	2b01      	cmp	r3, #1
 8002c5c:	d107      	bne.n	8002c6e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002c5e:	4b47      	ldr	r3, [pc, #284]	; (8002d7c <HAL_RCC_ClockConfig+0x1bc>)
 8002c60:	681b      	ldr	r3, [r3, #0]
 8002c62:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002c66:	2b00      	cmp	r3, #0
 8002c68:	d119      	bne.n	8002c9e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002c6a:	2301      	movs	r3, #1
 8002c6c:	e07f      	b.n	8002d6e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	685b      	ldr	r3, [r3, #4]
 8002c72:	2b02      	cmp	r3, #2
 8002c74:	d003      	beq.n	8002c7e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002c7a:	2b03      	cmp	r3, #3
 8002c7c:	d107      	bne.n	8002c8e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002c7e:	4b3f      	ldr	r3, [pc, #252]	; (8002d7c <HAL_RCC_ClockConfig+0x1bc>)
 8002c80:	681b      	ldr	r3, [r3, #0]
 8002c82:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002c86:	2b00      	cmp	r3, #0
 8002c88:	d109      	bne.n	8002c9e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002c8a:	2301      	movs	r3, #1
 8002c8c:	e06f      	b.n	8002d6e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002c8e:	4b3b      	ldr	r3, [pc, #236]	; (8002d7c <HAL_RCC_ClockConfig+0x1bc>)
 8002c90:	681b      	ldr	r3, [r3, #0]
 8002c92:	f003 0302 	and.w	r3, r3, #2
 8002c96:	2b00      	cmp	r3, #0
 8002c98:	d101      	bne.n	8002c9e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002c9a:	2301      	movs	r3, #1
 8002c9c:	e067      	b.n	8002d6e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002c9e:	4b37      	ldr	r3, [pc, #220]	; (8002d7c <HAL_RCC_ClockConfig+0x1bc>)
 8002ca0:	689b      	ldr	r3, [r3, #8]
 8002ca2:	f023 0203 	bic.w	r2, r3, #3
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	685b      	ldr	r3, [r3, #4]
 8002caa:	4934      	ldr	r1, [pc, #208]	; (8002d7c <HAL_RCC_ClockConfig+0x1bc>)
 8002cac:	4313      	orrs	r3, r2
 8002cae:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002cb0:	f7ff fc96 	bl	80025e0 <HAL_GetTick>
 8002cb4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002cb6:	e00a      	b.n	8002cce <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002cb8:	f7ff fc92 	bl	80025e0 <HAL_GetTick>
 8002cbc:	4602      	mov	r2, r0
 8002cbe:	68fb      	ldr	r3, [r7, #12]
 8002cc0:	1ad3      	subs	r3, r2, r3
 8002cc2:	f241 3288 	movw	r2, #5000	; 0x1388
 8002cc6:	4293      	cmp	r3, r2
 8002cc8:	d901      	bls.n	8002cce <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002cca:	2303      	movs	r3, #3
 8002ccc:	e04f      	b.n	8002d6e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002cce:	4b2b      	ldr	r3, [pc, #172]	; (8002d7c <HAL_RCC_ClockConfig+0x1bc>)
 8002cd0:	689b      	ldr	r3, [r3, #8]
 8002cd2:	f003 020c 	and.w	r2, r3, #12
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	685b      	ldr	r3, [r3, #4]
 8002cda:	009b      	lsls	r3, r3, #2
 8002cdc:	429a      	cmp	r2, r3
 8002cde:	d1eb      	bne.n	8002cb8 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002ce0:	4b25      	ldr	r3, [pc, #148]	; (8002d78 <HAL_RCC_ClockConfig+0x1b8>)
 8002ce2:	681b      	ldr	r3, [r3, #0]
 8002ce4:	f003 030f 	and.w	r3, r3, #15
 8002ce8:	683a      	ldr	r2, [r7, #0]
 8002cea:	429a      	cmp	r2, r3
 8002cec:	d20c      	bcs.n	8002d08 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002cee:	4b22      	ldr	r3, [pc, #136]	; (8002d78 <HAL_RCC_ClockConfig+0x1b8>)
 8002cf0:	683a      	ldr	r2, [r7, #0]
 8002cf2:	b2d2      	uxtb	r2, r2
 8002cf4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002cf6:	4b20      	ldr	r3, [pc, #128]	; (8002d78 <HAL_RCC_ClockConfig+0x1b8>)
 8002cf8:	681b      	ldr	r3, [r3, #0]
 8002cfa:	f003 030f 	and.w	r3, r3, #15
 8002cfe:	683a      	ldr	r2, [r7, #0]
 8002d00:	429a      	cmp	r2, r3
 8002d02:	d001      	beq.n	8002d08 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002d04:	2301      	movs	r3, #1
 8002d06:	e032      	b.n	8002d6e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	681b      	ldr	r3, [r3, #0]
 8002d0c:	f003 0304 	and.w	r3, r3, #4
 8002d10:	2b00      	cmp	r3, #0
 8002d12:	d008      	beq.n	8002d26 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002d14:	4b19      	ldr	r3, [pc, #100]	; (8002d7c <HAL_RCC_ClockConfig+0x1bc>)
 8002d16:	689b      	ldr	r3, [r3, #8]
 8002d18:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	68db      	ldr	r3, [r3, #12]
 8002d20:	4916      	ldr	r1, [pc, #88]	; (8002d7c <HAL_RCC_ClockConfig+0x1bc>)
 8002d22:	4313      	orrs	r3, r2
 8002d24:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	681b      	ldr	r3, [r3, #0]
 8002d2a:	f003 0308 	and.w	r3, r3, #8
 8002d2e:	2b00      	cmp	r3, #0
 8002d30:	d009      	beq.n	8002d46 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002d32:	4b12      	ldr	r3, [pc, #72]	; (8002d7c <HAL_RCC_ClockConfig+0x1bc>)
 8002d34:	689b      	ldr	r3, [r3, #8]
 8002d36:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	691b      	ldr	r3, [r3, #16]
 8002d3e:	00db      	lsls	r3, r3, #3
 8002d40:	490e      	ldr	r1, [pc, #56]	; (8002d7c <HAL_RCC_ClockConfig+0x1bc>)
 8002d42:	4313      	orrs	r3, r2
 8002d44:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002d46:	f000 f855 	bl	8002df4 <HAL_RCC_GetSysClockFreq>
 8002d4a:	4602      	mov	r2, r0
 8002d4c:	4b0b      	ldr	r3, [pc, #44]	; (8002d7c <HAL_RCC_ClockConfig+0x1bc>)
 8002d4e:	689b      	ldr	r3, [r3, #8]
 8002d50:	091b      	lsrs	r3, r3, #4
 8002d52:	f003 030f 	and.w	r3, r3, #15
 8002d56:	490a      	ldr	r1, [pc, #40]	; (8002d80 <HAL_RCC_ClockConfig+0x1c0>)
 8002d58:	5ccb      	ldrb	r3, [r1, r3]
 8002d5a:	fa22 f303 	lsr.w	r3, r2, r3
 8002d5e:	4a09      	ldr	r2, [pc, #36]	; (8002d84 <HAL_RCC_ClockConfig+0x1c4>)
 8002d60:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8002d62:	4b09      	ldr	r3, [pc, #36]	; (8002d88 <HAL_RCC_ClockConfig+0x1c8>)
 8002d64:	681b      	ldr	r3, [r3, #0]
 8002d66:	4618      	mov	r0, r3
 8002d68:	f7ff fbf6 	bl	8002558 <HAL_InitTick>

  return HAL_OK;
 8002d6c:	2300      	movs	r3, #0
}
 8002d6e:	4618      	mov	r0, r3
 8002d70:	3710      	adds	r7, #16
 8002d72:	46bd      	mov	sp, r7
 8002d74:	bd80      	pop	{r7, pc}
 8002d76:	bf00      	nop
 8002d78:	40023c00 	.word	0x40023c00
 8002d7c:	40023800 	.word	0x40023800
 8002d80:	08008d44 	.word	0x08008d44
 8002d84:	2000001c 	.word	0x2000001c
 8002d88:	20000020 	.word	0x20000020

08002d8c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002d8c:	b480      	push	{r7}
 8002d8e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002d90:	4b03      	ldr	r3, [pc, #12]	; (8002da0 <HAL_RCC_GetHCLKFreq+0x14>)
 8002d92:	681b      	ldr	r3, [r3, #0]
}
 8002d94:	4618      	mov	r0, r3
 8002d96:	46bd      	mov	sp, r7
 8002d98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d9c:	4770      	bx	lr
 8002d9e:	bf00      	nop
 8002da0:	2000001c 	.word	0x2000001c

08002da4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002da4:	b580      	push	{r7, lr}
 8002da6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8002da8:	f7ff fff0 	bl	8002d8c <HAL_RCC_GetHCLKFreq>
 8002dac:	4602      	mov	r2, r0
 8002dae:	4b05      	ldr	r3, [pc, #20]	; (8002dc4 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002db0:	689b      	ldr	r3, [r3, #8]
 8002db2:	0a9b      	lsrs	r3, r3, #10
 8002db4:	f003 0307 	and.w	r3, r3, #7
 8002db8:	4903      	ldr	r1, [pc, #12]	; (8002dc8 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002dba:	5ccb      	ldrb	r3, [r1, r3]
 8002dbc:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002dc0:	4618      	mov	r0, r3
 8002dc2:	bd80      	pop	{r7, pc}
 8002dc4:	40023800 	.word	0x40023800
 8002dc8:	08008d54 	.word	0x08008d54

08002dcc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002dcc:	b580      	push	{r7, lr}
 8002dce:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8002dd0:	f7ff ffdc 	bl	8002d8c <HAL_RCC_GetHCLKFreq>
 8002dd4:	4602      	mov	r2, r0
 8002dd6:	4b05      	ldr	r3, [pc, #20]	; (8002dec <HAL_RCC_GetPCLK2Freq+0x20>)
 8002dd8:	689b      	ldr	r3, [r3, #8]
 8002dda:	0b5b      	lsrs	r3, r3, #13
 8002ddc:	f003 0307 	and.w	r3, r3, #7
 8002de0:	4903      	ldr	r1, [pc, #12]	; (8002df0 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002de2:	5ccb      	ldrb	r3, [r1, r3]
 8002de4:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002de8:	4618      	mov	r0, r3
 8002dea:	bd80      	pop	{r7, pc}
 8002dec:	40023800 	.word	0x40023800
 8002df0:	08008d54 	.word	0x08008d54

08002df4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002df4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002df8:	b088      	sub	sp, #32
 8002dfa:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8002dfc:	2300      	movs	r3, #0
 8002dfe:	617b      	str	r3, [r7, #20]
  uint32_t pllvco = 0U;
 8002e00:	2300      	movs	r3, #0
 8002e02:	61fb      	str	r3, [r7, #28]
  uint32_t pllp = 0U;
 8002e04:	2300      	movs	r3, #0
 8002e06:	613b      	str	r3, [r7, #16]
  uint32_t pllr = 0U;
 8002e08:	2300      	movs	r3, #0
 8002e0a:	60fb      	str	r3, [r7, #12]
  uint32_t sysclockfreq = 0U;
 8002e0c:	2300      	movs	r3, #0
 8002e0e:	61bb      	str	r3, [r7, #24]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002e10:	4bce      	ldr	r3, [pc, #824]	; (800314c <HAL_RCC_GetSysClockFreq+0x358>)
 8002e12:	689b      	ldr	r3, [r3, #8]
 8002e14:	f003 030c 	and.w	r3, r3, #12
 8002e18:	2b0c      	cmp	r3, #12
 8002e1a:	f200 818d 	bhi.w	8003138 <HAL_RCC_GetSysClockFreq+0x344>
 8002e1e:	a201      	add	r2, pc, #4	; (adr r2, 8002e24 <HAL_RCC_GetSysClockFreq+0x30>)
 8002e20:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002e24:	08002e59 	.word	0x08002e59
 8002e28:	08003139 	.word	0x08003139
 8002e2c:	08003139 	.word	0x08003139
 8002e30:	08003139 	.word	0x08003139
 8002e34:	08002e5f 	.word	0x08002e5f
 8002e38:	08003139 	.word	0x08003139
 8002e3c:	08003139 	.word	0x08003139
 8002e40:	08003139 	.word	0x08003139
 8002e44:	08002e65 	.word	0x08002e65
 8002e48:	08003139 	.word	0x08003139
 8002e4c:	08003139 	.word	0x08003139
 8002e50:	08003139 	.word	0x08003139
 8002e54:	08002fd9 	.word	0x08002fd9
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002e58:	4bbd      	ldr	r3, [pc, #756]	; (8003150 <HAL_RCC_GetSysClockFreq+0x35c>)
 8002e5a:	61bb      	str	r3, [r7, #24]
       break;
 8002e5c:	e16f      	b.n	800313e <HAL_RCC_GetSysClockFreq+0x34a>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002e5e:	4bbd      	ldr	r3, [pc, #756]	; (8003154 <HAL_RCC_GetSysClockFreq+0x360>)
 8002e60:	61bb      	str	r3, [r7, #24]
      break;
 8002e62:	e16c      	b.n	800313e <HAL_RCC_GetSysClockFreq+0x34a>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002e64:	4bb9      	ldr	r3, [pc, #740]	; (800314c <HAL_RCC_GetSysClockFreq+0x358>)
 8002e66:	685b      	ldr	r3, [r3, #4]
 8002e68:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002e6c:	617b      	str	r3, [r7, #20]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002e6e:	4bb7      	ldr	r3, [pc, #732]	; (800314c <HAL_RCC_GetSysClockFreq+0x358>)
 8002e70:	685b      	ldr	r3, [r3, #4]
 8002e72:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002e76:	2b00      	cmp	r3, #0
 8002e78:	d053      	beq.n	8002f22 <HAL_RCC_GetSysClockFreq+0x12e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002e7a:	4bb4      	ldr	r3, [pc, #720]	; (800314c <HAL_RCC_GetSysClockFreq+0x358>)
 8002e7c:	685b      	ldr	r3, [r3, #4]
 8002e7e:	099b      	lsrs	r3, r3, #6
 8002e80:	461a      	mov	r2, r3
 8002e82:	f04f 0300 	mov.w	r3, #0
 8002e86:	f240 10ff 	movw	r0, #511	; 0x1ff
 8002e8a:	f04f 0100 	mov.w	r1, #0
 8002e8e:	ea02 0400 	and.w	r4, r2, r0
 8002e92:	603c      	str	r4, [r7, #0]
 8002e94:	400b      	ands	r3, r1
 8002e96:	607b      	str	r3, [r7, #4]
 8002e98:	e9d7 4500 	ldrd	r4, r5, [r7]
 8002e9c:	4620      	mov	r0, r4
 8002e9e:	4629      	mov	r1, r5
 8002ea0:	f04f 0200 	mov.w	r2, #0
 8002ea4:	f04f 0300 	mov.w	r3, #0
 8002ea8:	014b      	lsls	r3, r1, #5
 8002eaa:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8002eae:	0142      	lsls	r2, r0, #5
 8002eb0:	4610      	mov	r0, r2
 8002eb2:	4619      	mov	r1, r3
 8002eb4:	4623      	mov	r3, r4
 8002eb6:	1ac0      	subs	r0, r0, r3
 8002eb8:	462b      	mov	r3, r5
 8002eba:	eb61 0103 	sbc.w	r1, r1, r3
 8002ebe:	f04f 0200 	mov.w	r2, #0
 8002ec2:	f04f 0300 	mov.w	r3, #0
 8002ec6:	018b      	lsls	r3, r1, #6
 8002ec8:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8002ecc:	0182      	lsls	r2, r0, #6
 8002ece:	1a12      	subs	r2, r2, r0
 8002ed0:	eb63 0301 	sbc.w	r3, r3, r1
 8002ed4:	f04f 0000 	mov.w	r0, #0
 8002ed8:	f04f 0100 	mov.w	r1, #0
 8002edc:	00d9      	lsls	r1, r3, #3
 8002ede:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8002ee2:	00d0      	lsls	r0, r2, #3
 8002ee4:	4602      	mov	r2, r0
 8002ee6:	460b      	mov	r3, r1
 8002ee8:	4621      	mov	r1, r4
 8002eea:	1852      	adds	r2, r2, r1
 8002eec:	4629      	mov	r1, r5
 8002eee:	eb43 0101 	adc.w	r1, r3, r1
 8002ef2:	460b      	mov	r3, r1
 8002ef4:	f04f 0000 	mov.w	r0, #0
 8002ef8:	f04f 0100 	mov.w	r1, #0
 8002efc:	0259      	lsls	r1, r3, #9
 8002efe:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 8002f02:	0250      	lsls	r0, r2, #9
 8002f04:	4602      	mov	r2, r0
 8002f06:	460b      	mov	r3, r1
 8002f08:	4610      	mov	r0, r2
 8002f0a:	4619      	mov	r1, r3
 8002f0c:	697b      	ldr	r3, [r7, #20]
 8002f0e:	461a      	mov	r2, r3
 8002f10:	f04f 0300 	mov.w	r3, #0
 8002f14:	f7fd feb8 	bl	8000c88 <__aeabi_uldivmod>
 8002f18:	4602      	mov	r2, r0
 8002f1a:	460b      	mov	r3, r1
 8002f1c:	4613      	mov	r3, r2
 8002f1e:	61fb      	str	r3, [r7, #28]
 8002f20:	e04c      	b.n	8002fbc <HAL_RCC_GetSysClockFreq+0x1c8>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002f22:	4b8a      	ldr	r3, [pc, #552]	; (800314c <HAL_RCC_GetSysClockFreq+0x358>)
 8002f24:	685b      	ldr	r3, [r3, #4]
 8002f26:	099b      	lsrs	r3, r3, #6
 8002f28:	461a      	mov	r2, r3
 8002f2a:	f04f 0300 	mov.w	r3, #0
 8002f2e:	f240 10ff 	movw	r0, #511	; 0x1ff
 8002f32:	f04f 0100 	mov.w	r1, #0
 8002f36:	ea02 0a00 	and.w	sl, r2, r0
 8002f3a:	ea03 0b01 	and.w	fp, r3, r1
 8002f3e:	4650      	mov	r0, sl
 8002f40:	4659      	mov	r1, fp
 8002f42:	f04f 0200 	mov.w	r2, #0
 8002f46:	f04f 0300 	mov.w	r3, #0
 8002f4a:	014b      	lsls	r3, r1, #5
 8002f4c:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8002f50:	0142      	lsls	r2, r0, #5
 8002f52:	4610      	mov	r0, r2
 8002f54:	4619      	mov	r1, r3
 8002f56:	ebb0 000a 	subs.w	r0, r0, sl
 8002f5a:	eb61 010b 	sbc.w	r1, r1, fp
 8002f5e:	f04f 0200 	mov.w	r2, #0
 8002f62:	f04f 0300 	mov.w	r3, #0
 8002f66:	018b      	lsls	r3, r1, #6
 8002f68:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8002f6c:	0182      	lsls	r2, r0, #6
 8002f6e:	1a12      	subs	r2, r2, r0
 8002f70:	eb63 0301 	sbc.w	r3, r3, r1
 8002f74:	f04f 0000 	mov.w	r0, #0
 8002f78:	f04f 0100 	mov.w	r1, #0
 8002f7c:	00d9      	lsls	r1, r3, #3
 8002f7e:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8002f82:	00d0      	lsls	r0, r2, #3
 8002f84:	4602      	mov	r2, r0
 8002f86:	460b      	mov	r3, r1
 8002f88:	eb12 020a 	adds.w	r2, r2, sl
 8002f8c:	eb43 030b 	adc.w	r3, r3, fp
 8002f90:	f04f 0000 	mov.w	r0, #0
 8002f94:	f04f 0100 	mov.w	r1, #0
 8002f98:	0299      	lsls	r1, r3, #10
 8002f9a:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8002f9e:	0290      	lsls	r0, r2, #10
 8002fa0:	4602      	mov	r2, r0
 8002fa2:	460b      	mov	r3, r1
 8002fa4:	4610      	mov	r0, r2
 8002fa6:	4619      	mov	r1, r3
 8002fa8:	697b      	ldr	r3, [r7, #20]
 8002faa:	461a      	mov	r2, r3
 8002fac:	f04f 0300 	mov.w	r3, #0
 8002fb0:	f7fd fe6a 	bl	8000c88 <__aeabi_uldivmod>
 8002fb4:	4602      	mov	r2, r0
 8002fb6:	460b      	mov	r3, r1
 8002fb8:	4613      	mov	r3, r2
 8002fba:	61fb      	str	r3, [r7, #28]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8002fbc:	4b63      	ldr	r3, [pc, #396]	; (800314c <HAL_RCC_GetSysClockFreq+0x358>)
 8002fbe:	685b      	ldr	r3, [r3, #4]
 8002fc0:	0c1b      	lsrs	r3, r3, #16
 8002fc2:	f003 0303 	and.w	r3, r3, #3
 8002fc6:	3301      	adds	r3, #1
 8002fc8:	005b      	lsls	r3, r3, #1
 8002fca:	613b      	str	r3, [r7, #16]

      sysclockfreq = pllvco/pllp;
 8002fcc:	69fa      	ldr	r2, [r7, #28]
 8002fce:	693b      	ldr	r3, [r7, #16]
 8002fd0:	fbb2 f3f3 	udiv	r3, r2, r3
 8002fd4:	61bb      	str	r3, [r7, #24]
      break;
 8002fd6:	e0b2      	b.n	800313e <HAL_RCC_GetSysClockFreq+0x34a>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002fd8:	4b5c      	ldr	r3, [pc, #368]	; (800314c <HAL_RCC_GetSysClockFreq+0x358>)
 8002fda:	685b      	ldr	r3, [r3, #4]
 8002fdc:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002fe0:	617b      	str	r3, [r7, #20]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002fe2:	4b5a      	ldr	r3, [pc, #360]	; (800314c <HAL_RCC_GetSysClockFreq+0x358>)
 8002fe4:	685b      	ldr	r3, [r3, #4]
 8002fe6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002fea:	2b00      	cmp	r3, #0
 8002fec:	d04d      	beq.n	800308a <HAL_RCC_GetSysClockFreq+0x296>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002fee:	4b57      	ldr	r3, [pc, #348]	; (800314c <HAL_RCC_GetSysClockFreq+0x358>)
 8002ff0:	685b      	ldr	r3, [r3, #4]
 8002ff2:	099b      	lsrs	r3, r3, #6
 8002ff4:	461a      	mov	r2, r3
 8002ff6:	f04f 0300 	mov.w	r3, #0
 8002ffa:	f240 10ff 	movw	r0, #511	; 0x1ff
 8002ffe:	f04f 0100 	mov.w	r1, #0
 8003002:	ea02 0800 	and.w	r8, r2, r0
 8003006:	ea03 0901 	and.w	r9, r3, r1
 800300a:	4640      	mov	r0, r8
 800300c:	4649      	mov	r1, r9
 800300e:	f04f 0200 	mov.w	r2, #0
 8003012:	f04f 0300 	mov.w	r3, #0
 8003016:	014b      	lsls	r3, r1, #5
 8003018:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 800301c:	0142      	lsls	r2, r0, #5
 800301e:	4610      	mov	r0, r2
 8003020:	4619      	mov	r1, r3
 8003022:	ebb0 0008 	subs.w	r0, r0, r8
 8003026:	eb61 0109 	sbc.w	r1, r1, r9
 800302a:	f04f 0200 	mov.w	r2, #0
 800302e:	f04f 0300 	mov.w	r3, #0
 8003032:	018b      	lsls	r3, r1, #6
 8003034:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8003038:	0182      	lsls	r2, r0, #6
 800303a:	1a12      	subs	r2, r2, r0
 800303c:	eb63 0301 	sbc.w	r3, r3, r1
 8003040:	f04f 0000 	mov.w	r0, #0
 8003044:	f04f 0100 	mov.w	r1, #0
 8003048:	00d9      	lsls	r1, r3, #3
 800304a:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800304e:	00d0      	lsls	r0, r2, #3
 8003050:	4602      	mov	r2, r0
 8003052:	460b      	mov	r3, r1
 8003054:	eb12 0208 	adds.w	r2, r2, r8
 8003058:	eb43 0309 	adc.w	r3, r3, r9
 800305c:	f04f 0000 	mov.w	r0, #0
 8003060:	f04f 0100 	mov.w	r1, #0
 8003064:	0259      	lsls	r1, r3, #9
 8003066:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 800306a:	0250      	lsls	r0, r2, #9
 800306c:	4602      	mov	r2, r0
 800306e:	460b      	mov	r3, r1
 8003070:	4610      	mov	r0, r2
 8003072:	4619      	mov	r1, r3
 8003074:	697b      	ldr	r3, [r7, #20]
 8003076:	461a      	mov	r2, r3
 8003078:	f04f 0300 	mov.w	r3, #0
 800307c:	f7fd fe04 	bl	8000c88 <__aeabi_uldivmod>
 8003080:	4602      	mov	r2, r0
 8003082:	460b      	mov	r3, r1
 8003084:	4613      	mov	r3, r2
 8003086:	61fb      	str	r3, [r7, #28]
 8003088:	e04a      	b.n	8003120 <HAL_RCC_GetSysClockFreq+0x32c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800308a:	4b30      	ldr	r3, [pc, #192]	; (800314c <HAL_RCC_GetSysClockFreq+0x358>)
 800308c:	685b      	ldr	r3, [r3, #4]
 800308e:	099b      	lsrs	r3, r3, #6
 8003090:	461a      	mov	r2, r3
 8003092:	f04f 0300 	mov.w	r3, #0
 8003096:	f240 10ff 	movw	r0, #511	; 0x1ff
 800309a:	f04f 0100 	mov.w	r1, #0
 800309e:	ea02 0400 	and.w	r4, r2, r0
 80030a2:	ea03 0501 	and.w	r5, r3, r1
 80030a6:	4620      	mov	r0, r4
 80030a8:	4629      	mov	r1, r5
 80030aa:	f04f 0200 	mov.w	r2, #0
 80030ae:	f04f 0300 	mov.w	r3, #0
 80030b2:	014b      	lsls	r3, r1, #5
 80030b4:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 80030b8:	0142      	lsls	r2, r0, #5
 80030ba:	4610      	mov	r0, r2
 80030bc:	4619      	mov	r1, r3
 80030be:	1b00      	subs	r0, r0, r4
 80030c0:	eb61 0105 	sbc.w	r1, r1, r5
 80030c4:	f04f 0200 	mov.w	r2, #0
 80030c8:	f04f 0300 	mov.w	r3, #0
 80030cc:	018b      	lsls	r3, r1, #6
 80030ce:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 80030d2:	0182      	lsls	r2, r0, #6
 80030d4:	1a12      	subs	r2, r2, r0
 80030d6:	eb63 0301 	sbc.w	r3, r3, r1
 80030da:	f04f 0000 	mov.w	r0, #0
 80030de:	f04f 0100 	mov.w	r1, #0
 80030e2:	00d9      	lsls	r1, r3, #3
 80030e4:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80030e8:	00d0      	lsls	r0, r2, #3
 80030ea:	4602      	mov	r2, r0
 80030ec:	460b      	mov	r3, r1
 80030ee:	1912      	adds	r2, r2, r4
 80030f0:	eb45 0303 	adc.w	r3, r5, r3
 80030f4:	f04f 0000 	mov.w	r0, #0
 80030f8:	f04f 0100 	mov.w	r1, #0
 80030fc:	0299      	lsls	r1, r3, #10
 80030fe:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8003102:	0290      	lsls	r0, r2, #10
 8003104:	4602      	mov	r2, r0
 8003106:	460b      	mov	r3, r1
 8003108:	4610      	mov	r0, r2
 800310a:	4619      	mov	r1, r3
 800310c:	697b      	ldr	r3, [r7, #20]
 800310e:	461a      	mov	r2, r3
 8003110:	f04f 0300 	mov.w	r3, #0
 8003114:	f7fd fdb8 	bl	8000c88 <__aeabi_uldivmod>
 8003118:	4602      	mov	r2, r0
 800311a:	460b      	mov	r3, r1
 800311c:	4613      	mov	r3, r2
 800311e:	61fb      	str	r3, [r7, #28]
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 8003120:	4b0a      	ldr	r3, [pc, #40]	; (800314c <HAL_RCC_GetSysClockFreq+0x358>)
 8003122:	685b      	ldr	r3, [r3, #4]
 8003124:	0f1b      	lsrs	r3, r3, #28
 8003126:	f003 0307 	and.w	r3, r3, #7
 800312a:	60fb      	str	r3, [r7, #12]

      sysclockfreq = pllvco/pllr;
 800312c:	69fa      	ldr	r2, [r7, #28]
 800312e:	68fb      	ldr	r3, [r7, #12]
 8003130:	fbb2 f3f3 	udiv	r3, r2, r3
 8003134:	61bb      	str	r3, [r7, #24]
      break;
 8003136:	e002      	b.n	800313e <HAL_RCC_GetSysClockFreq+0x34a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003138:	4b05      	ldr	r3, [pc, #20]	; (8003150 <HAL_RCC_GetSysClockFreq+0x35c>)
 800313a:	61bb      	str	r3, [r7, #24]
      break;
 800313c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800313e:	69bb      	ldr	r3, [r7, #24]
}
 8003140:	4618      	mov	r0, r3
 8003142:	3720      	adds	r7, #32
 8003144:	46bd      	mov	sp, r7
 8003146:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800314a:	bf00      	nop
 800314c:	40023800 	.word	0x40023800
 8003150:	00f42400 	.word	0x00f42400
 8003154:	007a1200 	.word	0x007a1200

08003158 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003158:	b580      	push	{r7, lr}
 800315a:	b086      	sub	sp, #24
 800315c:	af00      	add	r7, sp, #0
 800315e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	2b00      	cmp	r3, #0
 8003164:	d101      	bne.n	800316a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003166:	2301      	movs	r3, #1
 8003168:	e28d      	b.n	8003686 <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	681b      	ldr	r3, [r3, #0]
 800316e:	f003 0301 	and.w	r3, r3, #1
 8003172:	2b00      	cmp	r3, #0
 8003174:	f000 8083 	beq.w	800327e <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8003178:	4b94      	ldr	r3, [pc, #592]	; (80033cc <HAL_RCC_OscConfig+0x274>)
 800317a:	689b      	ldr	r3, [r3, #8]
 800317c:	f003 030c 	and.w	r3, r3, #12
 8003180:	2b04      	cmp	r3, #4
 8003182:	d019      	beq.n	80031b8 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8003184:	4b91      	ldr	r3, [pc, #580]	; (80033cc <HAL_RCC_OscConfig+0x274>)
 8003186:	689b      	ldr	r3, [r3, #8]
 8003188:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 800318c:	2b08      	cmp	r3, #8
 800318e:	d106      	bne.n	800319e <HAL_RCC_OscConfig+0x46>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8003190:	4b8e      	ldr	r3, [pc, #568]	; (80033cc <HAL_RCC_OscConfig+0x274>)
 8003192:	685b      	ldr	r3, [r3, #4]
 8003194:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003198:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800319c:	d00c      	beq.n	80031b8 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800319e:	4b8b      	ldr	r3, [pc, #556]	; (80033cc <HAL_RCC_OscConfig+0x274>)
 80031a0:	689b      	ldr	r3, [r3, #8]
 80031a2:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 80031a6:	2b0c      	cmp	r3, #12
 80031a8:	d112      	bne.n	80031d0 <HAL_RCC_OscConfig+0x78>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80031aa:	4b88      	ldr	r3, [pc, #544]	; (80033cc <HAL_RCC_OscConfig+0x274>)
 80031ac:	685b      	ldr	r3, [r3, #4]
 80031ae:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80031b2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80031b6:	d10b      	bne.n	80031d0 <HAL_RCC_OscConfig+0x78>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80031b8:	4b84      	ldr	r3, [pc, #528]	; (80033cc <HAL_RCC_OscConfig+0x274>)
 80031ba:	681b      	ldr	r3, [r3, #0]
 80031bc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80031c0:	2b00      	cmp	r3, #0
 80031c2:	d05b      	beq.n	800327c <HAL_RCC_OscConfig+0x124>
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	685b      	ldr	r3, [r3, #4]
 80031c8:	2b00      	cmp	r3, #0
 80031ca:	d157      	bne.n	800327c <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 80031cc:	2301      	movs	r3, #1
 80031ce:	e25a      	b.n	8003686 <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	685b      	ldr	r3, [r3, #4]
 80031d4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80031d8:	d106      	bne.n	80031e8 <HAL_RCC_OscConfig+0x90>
 80031da:	4b7c      	ldr	r3, [pc, #496]	; (80033cc <HAL_RCC_OscConfig+0x274>)
 80031dc:	681b      	ldr	r3, [r3, #0]
 80031de:	4a7b      	ldr	r2, [pc, #492]	; (80033cc <HAL_RCC_OscConfig+0x274>)
 80031e0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80031e4:	6013      	str	r3, [r2, #0]
 80031e6:	e01d      	b.n	8003224 <HAL_RCC_OscConfig+0xcc>
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	685b      	ldr	r3, [r3, #4]
 80031ec:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80031f0:	d10c      	bne.n	800320c <HAL_RCC_OscConfig+0xb4>
 80031f2:	4b76      	ldr	r3, [pc, #472]	; (80033cc <HAL_RCC_OscConfig+0x274>)
 80031f4:	681b      	ldr	r3, [r3, #0]
 80031f6:	4a75      	ldr	r2, [pc, #468]	; (80033cc <HAL_RCC_OscConfig+0x274>)
 80031f8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80031fc:	6013      	str	r3, [r2, #0]
 80031fe:	4b73      	ldr	r3, [pc, #460]	; (80033cc <HAL_RCC_OscConfig+0x274>)
 8003200:	681b      	ldr	r3, [r3, #0]
 8003202:	4a72      	ldr	r2, [pc, #456]	; (80033cc <HAL_RCC_OscConfig+0x274>)
 8003204:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003208:	6013      	str	r3, [r2, #0]
 800320a:	e00b      	b.n	8003224 <HAL_RCC_OscConfig+0xcc>
 800320c:	4b6f      	ldr	r3, [pc, #444]	; (80033cc <HAL_RCC_OscConfig+0x274>)
 800320e:	681b      	ldr	r3, [r3, #0]
 8003210:	4a6e      	ldr	r2, [pc, #440]	; (80033cc <HAL_RCC_OscConfig+0x274>)
 8003212:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003216:	6013      	str	r3, [r2, #0]
 8003218:	4b6c      	ldr	r3, [pc, #432]	; (80033cc <HAL_RCC_OscConfig+0x274>)
 800321a:	681b      	ldr	r3, [r3, #0]
 800321c:	4a6b      	ldr	r2, [pc, #428]	; (80033cc <HAL_RCC_OscConfig+0x274>)
 800321e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003222:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	685b      	ldr	r3, [r3, #4]
 8003228:	2b00      	cmp	r3, #0
 800322a:	d013      	beq.n	8003254 <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800322c:	f7ff f9d8 	bl	80025e0 <HAL_GetTick>
 8003230:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003232:	e008      	b.n	8003246 <HAL_RCC_OscConfig+0xee>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003234:	f7ff f9d4 	bl	80025e0 <HAL_GetTick>
 8003238:	4602      	mov	r2, r0
 800323a:	693b      	ldr	r3, [r7, #16]
 800323c:	1ad3      	subs	r3, r2, r3
 800323e:	2b64      	cmp	r3, #100	; 0x64
 8003240:	d901      	bls.n	8003246 <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 8003242:	2303      	movs	r3, #3
 8003244:	e21f      	b.n	8003686 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003246:	4b61      	ldr	r3, [pc, #388]	; (80033cc <HAL_RCC_OscConfig+0x274>)
 8003248:	681b      	ldr	r3, [r3, #0]
 800324a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800324e:	2b00      	cmp	r3, #0
 8003250:	d0f0      	beq.n	8003234 <HAL_RCC_OscConfig+0xdc>
 8003252:	e014      	b.n	800327e <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003254:	f7ff f9c4 	bl	80025e0 <HAL_GetTick>
 8003258:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800325a:	e008      	b.n	800326e <HAL_RCC_OscConfig+0x116>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800325c:	f7ff f9c0 	bl	80025e0 <HAL_GetTick>
 8003260:	4602      	mov	r2, r0
 8003262:	693b      	ldr	r3, [r7, #16]
 8003264:	1ad3      	subs	r3, r2, r3
 8003266:	2b64      	cmp	r3, #100	; 0x64
 8003268:	d901      	bls.n	800326e <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 800326a:	2303      	movs	r3, #3
 800326c:	e20b      	b.n	8003686 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800326e:	4b57      	ldr	r3, [pc, #348]	; (80033cc <HAL_RCC_OscConfig+0x274>)
 8003270:	681b      	ldr	r3, [r3, #0]
 8003272:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003276:	2b00      	cmp	r3, #0
 8003278:	d1f0      	bne.n	800325c <HAL_RCC_OscConfig+0x104>
 800327a:	e000      	b.n	800327e <HAL_RCC_OscConfig+0x126>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800327c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	681b      	ldr	r3, [r3, #0]
 8003282:	f003 0302 	and.w	r3, r3, #2
 8003286:	2b00      	cmp	r3, #0
 8003288:	d06f      	beq.n	800336a <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 800328a:	4b50      	ldr	r3, [pc, #320]	; (80033cc <HAL_RCC_OscConfig+0x274>)
 800328c:	689b      	ldr	r3, [r3, #8]
 800328e:	f003 030c 	and.w	r3, r3, #12
 8003292:	2b00      	cmp	r3, #0
 8003294:	d017      	beq.n	80032c6 <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8003296:	4b4d      	ldr	r3, [pc, #308]	; (80033cc <HAL_RCC_OscConfig+0x274>)
 8003298:	689b      	ldr	r3, [r3, #8]
 800329a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 800329e:	2b08      	cmp	r3, #8
 80032a0:	d105      	bne.n	80032ae <HAL_RCC_OscConfig+0x156>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 80032a2:	4b4a      	ldr	r3, [pc, #296]	; (80033cc <HAL_RCC_OscConfig+0x274>)
 80032a4:	685b      	ldr	r3, [r3, #4]
 80032a6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80032aa:	2b00      	cmp	r3, #0
 80032ac:	d00b      	beq.n	80032c6 <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80032ae:	4b47      	ldr	r3, [pc, #284]	; (80033cc <HAL_RCC_OscConfig+0x274>)
 80032b0:	689b      	ldr	r3, [r3, #8]
 80032b2:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 80032b6:	2b0c      	cmp	r3, #12
 80032b8:	d11c      	bne.n	80032f4 <HAL_RCC_OscConfig+0x19c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80032ba:	4b44      	ldr	r3, [pc, #272]	; (80033cc <HAL_RCC_OscConfig+0x274>)
 80032bc:	685b      	ldr	r3, [r3, #4]
 80032be:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80032c2:	2b00      	cmp	r3, #0
 80032c4:	d116      	bne.n	80032f4 <HAL_RCC_OscConfig+0x19c>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80032c6:	4b41      	ldr	r3, [pc, #260]	; (80033cc <HAL_RCC_OscConfig+0x274>)
 80032c8:	681b      	ldr	r3, [r3, #0]
 80032ca:	f003 0302 	and.w	r3, r3, #2
 80032ce:	2b00      	cmp	r3, #0
 80032d0:	d005      	beq.n	80032de <HAL_RCC_OscConfig+0x186>
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	68db      	ldr	r3, [r3, #12]
 80032d6:	2b01      	cmp	r3, #1
 80032d8:	d001      	beq.n	80032de <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 80032da:	2301      	movs	r3, #1
 80032dc:	e1d3      	b.n	8003686 <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80032de:	4b3b      	ldr	r3, [pc, #236]	; (80033cc <HAL_RCC_OscConfig+0x274>)
 80032e0:	681b      	ldr	r3, [r3, #0]
 80032e2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	691b      	ldr	r3, [r3, #16]
 80032ea:	00db      	lsls	r3, r3, #3
 80032ec:	4937      	ldr	r1, [pc, #220]	; (80033cc <HAL_RCC_OscConfig+0x274>)
 80032ee:	4313      	orrs	r3, r2
 80032f0:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80032f2:	e03a      	b.n	800336a <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	68db      	ldr	r3, [r3, #12]
 80032f8:	2b00      	cmp	r3, #0
 80032fa:	d020      	beq.n	800333e <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80032fc:	4b34      	ldr	r3, [pc, #208]	; (80033d0 <HAL_RCC_OscConfig+0x278>)
 80032fe:	2201      	movs	r2, #1
 8003300:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003302:	f7ff f96d 	bl	80025e0 <HAL_GetTick>
 8003306:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003308:	e008      	b.n	800331c <HAL_RCC_OscConfig+0x1c4>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800330a:	f7ff f969 	bl	80025e0 <HAL_GetTick>
 800330e:	4602      	mov	r2, r0
 8003310:	693b      	ldr	r3, [r7, #16]
 8003312:	1ad3      	subs	r3, r2, r3
 8003314:	2b02      	cmp	r3, #2
 8003316:	d901      	bls.n	800331c <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 8003318:	2303      	movs	r3, #3
 800331a:	e1b4      	b.n	8003686 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800331c:	4b2b      	ldr	r3, [pc, #172]	; (80033cc <HAL_RCC_OscConfig+0x274>)
 800331e:	681b      	ldr	r3, [r3, #0]
 8003320:	f003 0302 	and.w	r3, r3, #2
 8003324:	2b00      	cmp	r3, #0
 8003326:	d0f0      	beq.n	800330a <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003328:	4b28      	ldr	r3, [pc, #160]	; (80033cc <HAL_RCC_OscConfig+0x274>)
 800332a:	681b      	ldr	r3, [r3, #0]
 800332c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	691b      	ldr	r3, [r3, #16]
 8003334:	00db      	lsls	r3, r3, #3
 8003336:	4925      	ldr	r1, [pc, #148]	; (80033cc <HAL_RCC_OscConfig+0x274>)
 8003338:	4313      	orrs	r3, r2
 800333a:	600b      	str	r3, [r1, #0]
 800333c:	e015      	b.n	800336a <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800333e:	4b24      	ldr	r3, [pc, #144]	; (80033d0 <HAL_RCC_OscConfig+0x278>)
 8003340:	2200      	movs	r2, #0
 8003342:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003344:	f7ff f94c 	bl	80025e0 <HAL_GetTick>
 8003348:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800334a:	e008      	b.n	800335e <HAL_RCC_OscConfig+0x206>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800334c:	f7ff f948 	bl	80025e0 <HAL_GetTick>
 8003350:	4602      	mov	r2, r0
 8003352:	693b      	ldr	r3, [r7, #16]
 8003354:	1ad3      	subs	r3, r2, r3
 8003356:	2b02      	cmp	r3, #2
 8003358:	d901      	bls.n	800335e <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 800335a:	2303      	movs	r3, #3
 800335c:	e193      	b.n	8003686 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800335e:	4b1b      	ldr	r3, [pc, #108]	; (80033cc <HAL_RCC_OscConfig+0x274>)
 8003360:	681b      	ldr	r3, [r3, #0]
 8003362:	f003 0302 	and.w	r3, r3, #2
 8003366:	2b00      	cmp	r3, #0
 8003368:	d1f0      	bne.n	800334c <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	681b      	ldr	r3, [r3, #0]
 800336e:	f003 0308 	and.w	r3, r3, #8
 8003372:	2b00      	cmp	r3, #0
 8003374:	d036      	beq.n	80033e4 <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	695b      	ldr	r3, [r3, #20]
 800337a:	2b00      	cmp	r3, #0
 800337c:	d016      	beq.n	80033ac <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800337e:	4b15      	ldr	r3, [pc, #84]	; (80033d4 <HAL_RCC_OscConfig+0x27c>)
 8003380:	2201      	movs	r2, #1
 8003382:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003384:	f7ff f92c 	bl	80025e0 <HAL_GetTick>
 8003388:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800338a:	e008      	b.n	800339e <HAL_RCC_OscConfig+0x246>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800338c:	f7ff f928 	bl	80025e0 <HAL_GetTick>
 8003390:	4602      	mov	r2, r0
 8003392:	693b      	ldr	r3, [r7, #16]
 8003394:	1ad3      	subs	r3, r2, r3
 8003396:	2b02      	cmp	r3, #2
 8003398:	d901      	bls.n	800339e <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 800339a:	2303      	movs	r3, #3
 800339c:	e173      	b.n	8003686 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800339e:	4b0b      	ldr	r3, [pc, #44]	; (80033cc <HAL_RCC_OscConfig+0x274>)
 80033a0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80033a2:	f003 0302 	and.w	r3, r3, #2
 80033a6:	2b00      	cmp	r3, #0
 80033a8:	d0f0      	beq.n	800338c <HAL_RCC_OscConfig+0x234>
 80033aa:	e01b      	b.n	80033e4 <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80033ac:	4b09      	ldr	r3, [pc, #36]	; (80033d4 <HAL_RCC_OscConfig+0x27c>)
 80033ae:	2200      	movs	r2, #0
 80033b0:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80033b2:	f7ff f915 	bl	80025e0 <HAL_GetTick>
 80033b6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80033b8:	e00e      	b.n	80033d8 <HAL_RCC_OscConfig+0x280>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80033ba:	f7ff f911 	bl	80025e0 <HAL_GetTick>
 80033be:	4602      	mov	r2, r0
 80033c0:	693b      	ldr	r3, [r7, #16]
 80033c2:	1ad3      	subs	r3, r2, r3
 80033c4:	2b02      	cmp	r3, #2
 80033c6:	d907      	bls.n	80033d8 <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 80033c8:	2303      	movs	r3, #3
 80033ca:	e15c      	b.n	8003686 <HAL_RCC_OscConfig+0x52e>
 80033cc:	40023800 	.word	0x40023800
 80033d0:	42470000 	.word	0x42470000
 80033d4:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80033d8:	4b8a      	ldr	r3, [pc, #552]	; (8003604 <HAL_RCC_OscConfig+0x4ac>)
 80033da:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80033dc:	f003 0302 	and.w	r3, r3, #2
 80033e0:	2b00      	cmp	r3, #0
 80033e2:	d1ea      	bne.n	80033ba <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	681b      	ldr	r3, [r3, #0]
 80033e8:	f003 0304 	and.w	r3, r3, #4
 80033ec:	2b00      	cmp	r3, #0
 80033ee:	f000 8097 	beq.w	8003520 <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 80033f2:	2300      	movs	r3, #0
 80033f4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80033f6:	4b83      	ldr	r3, [pc, #524]	; (8003604 <HAL_RCC_OscConfig+0x4ac>)
 80033f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80033fa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80033fe:	2b00      	cmp	r3, #0
 8003400:	d10f      	bne.n	8003422 <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003402:	2300      	movs	r3, #0
 8003404:	60bb      	str	r3, [r7, #8]
 8003406:	4b7f      	ldr	r3, [pc, #508]	; (8003604 <HAL_RCC_OscConfig+0x4ac>)
 8003408:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800340a:	4a7e      	ldr	r2, [pc, #504]	; (8003604 <HAL_RCC_OscConfig+0x4ac>)
 800340c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003410:	6413      	str	r3, [r2, #64]	; 0x40
 8003412:	4b7c      	ldr	r3, [pc, #496]	; (8003604 <HAL_RCC_OscConfig+0x4ac>)
 8003414:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003416:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800341a:	60bb      	str	r3, [r7, #8]
 800341c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800341e:	2301      	movs	r3, #1
 8003420:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003422:	4b79      	ldr	r3, [pc, #484]	; (8003608 <HAL_RCC_OscConfig+0x4b0>)
 8003424:	681b      	ldr	r3, [r3, #0]
 8003426:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800342a:	2b00      	cmp	r3, #0
 800342c:	d118      	bne.n	8003460 <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800342e:	4b76      	ldr	r3, [pc, #472]	; (8003608 <HAL_RCC_OscConfig+0x4b0>)
 8003430:	681b      	ldr	r3, [r3, #0]
 8003432:	4a75      	ldr	r2, [pc, #468]	; (8003608 <HAL_RCC_OscConfig+0x4b0>)
 8003434:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003438:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800343a:	f7ff f8d1 	bl	80025e0 <HAL_GetTick>
 800343e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003440:	e008      	b.n	8003454 <HAL_RCC_OscConfig+0x2fc>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003442:	f7ff f8cd 	bl	80025e0 <HAL_GetTick>
 8003446:	4602      	mov	r2, r0
 8003448:	693b      	ldr	r3, [r7, #16]
 800344a:	1ad3      	subs	r3, r2, r3
 800344c:	2b02      	cmp	r3, #2
 800344e:	d901      	bls.n	8003454 <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 8003450:	2303      	movs	r3, #3
 8003452:	e118      	b.n	8003686 <HAL_RCC_OscConfig+0x52e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003454:	4b6c      	ldr	r3, [pc, #432]	; (8003608 <HAL_RCC_OscConfig+0x4b0>)
 8003456:	681b      	ldr	r3, [r3, #0]
 8003458:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800345c:	2b00      	cmp	r3, #0
 800345e:	d0f0      	beq.n	8003442 <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	689b      	ldr	r3, [r3, #8]
 8003464:	2b01      	cmp	r3, #1
 8003466:	d106      	bne.n	8003476 <HAL_RCC_OscConfig+0x31e>
 8003468:	4b66      	ldr	r3, [pc, #408]	; (8003604 <HAL_RCC_OscConfig+0x4ac>)
 800346a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800346c:	4a65      	ldr	r2, [pc, #404]	; (8003604 <HAL_RCC_OscConfig+0x4ac>)
 800346e:	f043 0301 	orr.w	r3, r3, #1
 8003472:	6713      	str	r3, [r2, #112]	; 0x70
 8003474:	e01c      	b.n	80034b0 <HAL_RCC_OscConfig+0x358>
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	689b      	ldr	r3, [r3, #8]
 800347a:	2b05      	cmp	r3, #5
 800347c:	d10c      	bne.n	8003498 <HAL_RCC_OscConfig+0x340>
 800347e:	4b61      	ldr	r3, [pc, #388]	; (8003604 <HAL_RCC_OscConfig+0x4ac>)
 8003480:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003482:	4a60      	ldr	r2, [pc, #384]	; (8003604 <HAL_RCC_OscConfig+0x4ac>)
 8003484:	f043 0304 	orr.w	r3, r3, #4
 8003488:	6713      	str	r3, [r2, #112]	; 0x70
 800348a:	4b5e      	ldr	r3, [pc, #376]	; (8003604 <HAL_RCC_OscConfig+0x4ac>)
 800348c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800348e:	4a5d      	ldr	r2, [pc, #372]	; (8003604 <HAL_RCC_OscConfig+0x4ac>)
 8003490:	f043 0301 	orr.w	r3, r3, #1
 8003494:	6713      	str	r3, [r2, #112]	; 0x70
 8003496:	e00b      	b.n	80034b0 <HAL_RCC_OscConfig+0x358>
 8003498:	4b5a      	ldr	r3, [pc, #360]	; (8003604 <HAL_RCC_OscConfig+0x4ac>)
 800349a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800349c:	4a59      	ldr	r2, [pc, #356]	; (8003604 <HAL_RCC_OscConfig+0x4ac>)
 800349e:	f023 0301 	bic.w	r3, r3, #1
 80034a2:	6713      	str	r3, [r2, #112]	; 0x70
 80034a4:	4b57      	ldr	r3, [pc, #348]	; (8003604 <HAL_RCC_OscConfig+0x4ac>)
 80034a6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80034a8:	4a56      	ldr	r2, [pc, #344]	; (8003604 <HAL_RCC_OscConfig+0x4ac>)
 80034aa:	f023 0304 	bic.w	r3, r3, #4
 80034ae:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	689b      	ldr	r3, [r3, #8]
 80034b4:	2b00      	cmp	r3, #0
 80034b6:	d015      	beq.n	80034e4 <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80034b8:	f7ff f892 	bl	80025e0 <HAL_GetTick>
 80034bc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80034be:	e00a      	b.n	80034d6 <HAL_RCC_OscConfig+0x37e>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80034c0:	f7ff f88e 	bl	80025e0 <HAL_GetTick>
 80034c4:	4602      	mov	r2, r0
 80034c6:	693b      	ldr	r3, [r7, #16]
 80034c8:	1ad3      	subs	r3, r2, r3
 80034ca:	f241 3288 	movw	r2, #5000	; 0x1388
 80034ce:	4293      	cmp	r3, r2
 80034d0:	d901      	bls.n	80034d6 <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 80034d2:	2303      	movs	r3, #3
 80034d4:	e0d7      	b.n	8003686 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80034d6:	4b4b      	ldr	r3, [pc, #300]	; (8003604 <HAL_RCC_OscConfig+0x4ac>)
 80034d8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80034da:	f003 0302 	and.w	r3, r3, #2
 80034de:	2b00      	cmp	r3, #0
 80034e0:	d0ee      	beq.n	80034c0 <HAL_RCC_OscConfig+0x368>
 80034e2:	e014      	b.n	800350e <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80034e4:	f7ff f87c 	bl	80025e0 <HAL_GetTick>
 80034e8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80034ea:	e00a      	b.n	8003502 <HAL_RCC_OscConfig+0x3aa>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80034ec:	f7ff f878 	bl	80025e0 <HAL_GetTick>
 80034f0:	4602      	mov	r2, r0
 80034f2:	693b      	ldr	r3, [r7, #16]
 80034f4:	1ad3      	subs	r3, r2, r3
 80034f6:	f241 3288 	movw	r2, #5000	; 0x1388
 80034fa:	4293      	cmp	r3, r2
 80034fc:	d901      	bls.n	8003502 <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 80034fe:	2303      	movs	r3, #3
 8003500:	e0c1      	b.n	8003686 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003502:	4b40      	ldr	r3, [pc, #256]	; (8003604 <HAL_RCC_OscConfig+0x4ac>)
 8003504:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003506:	f003 0302 	and.w	r3, r3, #2
 800350a:	2b00      	cmp	r3, #0
 800350c:	d1ee      	bne.n	80034ec <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800350e:	7dfb      	ldrb	r3, [r7, #23]
 8003510:	2b01      	cmp	r3, #1
 8003512:	d105      	bne.n	8003520 <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003514:	4b3b      	ldr	r3, [pc, #236]	; (8003604 <HAL_RCC_OscConfig+0x4ac>)
 8003516:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003518:	4a3a      	ldr	r2, [pc, #232]	; (8003604 <HAL_RCC_OscConfig+0x4ac>)
 800351a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800351e:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	699b      	ldr	r3, [r3, #24]
 8003524:	2b00      	cmp	r3, #0
 8003526:	f000 80ad 	beq.w	8003684 <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800352a:	4b36      	ldr	r3, [pc, #216]	; (8003604 <HAL_RCC_OscConfig+0x4ac>)
 800352c:	689b      	ldr	r3, [r3, #8]
 800352e:	f003 030c 	and.w	r3, r3, #12
 8003532:	2b08      	cmp	r3, #8
 8003534:	d060      	beq.n	80035f8 <HAL_RCC_OscConfig+0x4a0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	699b      	ldr	r3, [r3, #24]
 800353a:	2b02      	cmp	r3, #2
 800353c:	d145      	bne.n	80035ca <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800353e:	4b33      	ldr	r3, [pc, #204]	; (800360c <HAL_RCC_OscConfig+0x4b4>)
 8003540:	2200      	movs	r2, #0
 8003542:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003544:	f7ff f84c 	bl	80025e0 <HAL_GetTick>
 8003548:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800354a:	e008      	b.n	800355e <HAL_RCC_OscConfig+0x406>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800354c:	f7ff f848 	bl	80025e0 <HAL_GetTick>
 8003550:	4602      	mov	r2, r0
 8003552:	693b      	ldr	r3, [r7, #16]
 8003554:	1ad3      	subs	r3, r2, r3
 8003556:	2b02      	cmp	r3, #2
 8003558:	d901      	bls.n	800355e <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 800355a:	2303      	movs	r3, #3
 800355c:	e093      	b.n	8003686 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800355e:	4b29      	ldr	r3, [pc, #164]	; (8003604 <HAL_RCC_OscConfig+0x4ac>)
 8003560:	681b      	ldr	r3, [r3, #0]
 8003562:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003566:	2b00      	cmp	r3, #0
 8003568:	d1f0      	bne.n	800354c <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	69da      	ldr	r2, [r3, #28]
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	6a1b      	ldr	r3, [r3, #32]
 8003572:	431a      	orrs	r2, r3
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003578:	019b      	lsls	r3, r3, #6
 800357a:	431a      	orrs	r2, r3
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003580:	085b      	lsrs	r3, r3, #1
 8003582:	3b01      	subs	r3, #1
 8003584:	041b      	lsls	r3, r3, #16
 8003586:	431a      	orrs	r2, r3
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800358c:	061b      	lsls	r3, r3, #24
 800358e:	431a      	orrs	r2, r3
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003594:	071b      	lsls	r3, r3, #28
 8003596:	491b      	ldr	r1, [pc, #108]	; (8003604 <HAL_RCC_OscConfig+0x4ac>)
 8003598:	4313      	orrs	r3, r2
 800359a:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800359c:	4b1b      	ldr	r3, [pc, #108]	; (800360c <HAL_RCC_OscConfig+0x4b4>)
 800359e:	2201      	movs	r2, #1
 80035a0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80035a2:	f7ff f81d 	bl	80025e0 <HAL_GetTick>
 80035a6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80035a8:	e008      	b.n	80035bc <HAL_RCC_OscConfig+0x464>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80035aa:	f7ff f819 	bl	80025e0 <HAL_GetTick>
 80035ae:	4602      	mov	r2, r0
 80035b0:	693b      	ldr	r3, [r7, #16]
 80035b2:	1ad3      	subs	r3, r2, r3
 80035b4:	2b02      	cmp	r3, #2
 80035b6:	d901      	bls.n	80035bc <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 80035b8:	2303      	movs	r3, #3
 80035ba:	e064      	b.n	8003686 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80035bc:	4b11      	ldr	r3, [pc, #68]	; (8003604 <HAL_RCC_OscConfig+0x4ac>)
 80035be:	681b      	ldr	r3, [r3, #0]
 80035c0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80035c4:	2b00      	cmp	r3, #0
 80035c6:	d0f0      	beq.n	80035aa <HAL_RCC_OscConfig+0x452>
 80035c8:	e05c      	b.n	8003684 <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80035ca:	4b10      	ldr	r3, [pc, #64]	; (800360c <HAL_RCC_OscConfig+0x4b4>)
 80035cc:	2200      	movs	r2, #0
 80035ce:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80035d0:	f7ff f806 	bl	80025e0 <HAL_GetTick>
 80035d4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80035d6:	e008      	b.n	80035ea <HAL_RCC_OscConfig+0x492>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80035d8:	f7ff f802 	bl	80025e0 <HAL_GetTick>
 80035dc:	4602      	mov	r2, r0
 80035de:	693b      	ldr	r3, [r7, #16]
 80035e0:	1ad3      	subs	r3, r2, r3
 80035e2:	2b02      	cmp	r3, #2
 80035e4:	d901      	bls.n	80035ea <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 80035e6:	2303      	movs	r3, #3
 80035e8:	e04d      	b.n	8003686 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80035ea:	4b06      	ldr	r3, [pc, #24]	; (8003604 <HAL_RCC_OscConfig+0x4ac>)
 80035ec:	681b      	ldr	r3, [r3, #0]
 80035ee:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80035f2:	2b00      	cmp	r3, #0
 80035f4:	d1f0      	bne.n	80035d8 <HAL_RCC_OscConfig+0x480>
 80035f6:	e045      	b.n	8003684 <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	699b      	ldr	r3, [r3, #24]
 80035fc:	2b01      	cmp	r3, #1
 80035fe:	d107      	bne.n	8003610 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 8003600:	2301      	movs	r3, #1
 8003602:	e040      	b.n	8003686 <HAL_RCC_OscConfig+0x52e>
 8003604:	40023800 	.word	0x40023800
 8003608:	40007000 	.word	0x40007000
 800360c:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8003610:	4b1f      	ldr	r3, [pc, #124]	; (8003690 <HAL_RCC_OscConfig+0x538>)
 8003612:	685b      	ldr	r3, [r3, #4]
 8003614:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	699b      	ldr	r3, [r3, #24]
 800361a:	2b01      	cmp	r3, #1
 800361c:	d030      	beq.n	8003680 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800361e:	68fb      	ldr	r3, [r7, #12]
 8003620:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003628:	429a      	cmp	r2, r3
 800362a:	d129      	bne.n	8003680 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800362c:	68fb      	ldr	r3, [r7, #12]
 800362e:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003636:	429a      	cmp	r2, r3
 8003638:	d122      	bne.n	8003680 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800363a:	68fa      	ldr	r2, [r7, #12]
 800363c:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8003640:	4013      	ands	r3, r2
 8003642:	687a      	ldr	r2, [r7, #4]
 8003644:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8003646:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003648:	4293      	cmp	r3, r2
 800364a:	d119      	bne.n	8003680 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800364c:	68fb      	ldr	r3, [r7, #12]
 800364e:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003656:	085b      	lsrs	r3, r3, #1
 8003658:	3b01      	subs	r3, #1
 800365a:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800365c:	429a      	cmp	r2, r3
 800365e:	d10f      	bne.n	8003680 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003660:	68fb      	ldr	r3, [r7, #12]
 8003662:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800366a:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800366c:	429a      	cmp	r2, r3
 800366e:	d107      	bne.n	8003680 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8003670:	68fb      	ldr	r3, [r7, #12]
 8003672:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800367a:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 800367c:	429a      	cmp	r2, r3
 800367e:	d001      	beq.n	8003684 <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
        {
          return HAL_ERROR;
 8003680:	2301      	movs	r3, #1
 8003682:	e000      	b.n	8003686 <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 8003684:	2300      	movs	r3, #0
}
 8003686:	4618      	mov	r0, r3
 8003688:	3718      	adds	r7, #24
 800368a:	46bd      	mov	sp, r7
 800368c:	bd80      	pop	{r7, pc}
 800368e:	bf00      	nop
 8003690:	40023800 	.word	0x40023800

08003694 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003694:	b580      	push	{r7, lr}
 8003696:	b082      	sub	sp, #8
 8003698:	af00      	add	r7, sp, #0
 800369a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	2b00      	cmp	r3, #0
 80036a0:	d101      	bne.n	80036a6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80036a2:	2301      	movs	r3, #1
 80036a4:	e041      	b.n	800372a <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80036ac:	b2db      	uxtb	r3, r3
 80036ae:	2b00      	cmp	r3, #0
 80036b0:	d106      	bne.n	80036c0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	2200      	movs	r2, #0
 80036b6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80036ba:	6878      	ldr	r0, [r7, #4]
 80036bc:	f7fe fbac 	bl	8001e18 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	2202      	movs	r2, #2
 80036c4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	681a      	ldr	r2, [r3, #0]
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	3304      	adds	r3, #4
 80036d0:	4619      	mov	r1, r3
 80036d2:	4610      	mov	r0, r2
 80036d4:	f000 fec8 	bl	8004468 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	2201      	movs	r2, #1
 80036dc:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	2201      	movs	r2, #1
 80036e4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	2201      	movs	r2, #1
 80036ec:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	2201      	movs	r2, #1
 80036f4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	2201      	movs	r2, #1
 80036fc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	2201      	movs	r2, #1
 8003704:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	2201      	movs	r2, #1
 800370c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	2201      	movs	r2, #1
 8003714:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	2201      	movs	r2, #1
 800371c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	2201      	movs	r2, #1
 8003724:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003728:	2300      	movs	r3, #0
}
 800372a:	4618      	mov	r0, r3
 800372c:	3708      	adds	r7, #8
 800372e:	46bd      	mov	sp, r7
 8003730:	bd80      	pop	{r7, pc}
	...

08003734 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8003734:	b480      	push	{r7}
 8003736:	b085      	sub	sp, #20
 8003738:	af00      	add	r7, sp, #0
 800373a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003742:	b2db      	uxtb	r3, r3
 8003744:	2b01      	cmp	r3, #1
 8003746:	d001      	beq.n	800374c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8003748:	2301      	movs	r3, #1
 800374a:	e04e      	b.n	80037ea <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	2202      	movs	r2, #2
 8003750:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	681b      	ldr	r3, [r3, #0]
 8003758:	68da      	ldr	r2, [r3, #12]
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	681b      	ldr	r3, [r3, #0]
 800375e:	f042 0201 	orr.w	r2, r2, #1
 8003762:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	681b      	ldr	r3, [r3, #0]
 8003768:	4a23      	ldr	r2, [pc, #140]	; (80037f8 <HAL_TIM_Base_Start_IT+0xc4>)
 800376a:	4293      	cmp	r3, r2
 800376c:	d022      	beq.n	80037b4 <HAL_TIM_Base_Start_IT+0x80>
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	681b      	ldr	r3, [r3, #0]
 8003772:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003776:	d01d      	beq.n	80037b4 <HAL_TIM_Base_Start_IT+0x80>
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	681b      	ldr	r3, [r3, #0]
 800377c:	4a1f      	ldr	r2, [pc, #124]	; (80037fc <HAL_TIM_Base_Start_IT+0xc8>)
 800377e:	4293      	cmp	r3, r2
 8003780:	d018      	beq.n	80037b4 <HAL_TIM_Base_Start_IT+0x80>
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	681b      	ldr	r3, [r3, #0]
 8003786:	4a1e      	ldr	r2, [pc, #120]	; (8003800 <HAL_TIM_Base_Start_IT+0xcc>)
 8003788:	4293      	cmp	r3, r2
 800378a:	d013      	beq.n	80037b4 <HAL_TIM_Base_Start_IT+0x80>
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	681b      	ldr	r3, [r3, #0]
 8003790:	4a1c      	ldr	r2, [pc, #112]	; (8003804 <HAL_TIM_Base_Start_IT+0xd0>)
 8003792:	4293      	cmp	r3, r2
 8003794:	d00e      	beq.n	80037b4 <HAL_TIM_Base_Start_IT+0x80>
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	681b      	ldr	r3, [r3, #0]
 800379a:	4a1b      	ldr	r2, [pc, #108]	; (8003808 <HAL_TIM_Base_Start_IT+0xd4>)
 800379c:	4293      	cmp	r3, r2
 800379e:	d009      	beq.n	80037b4 <HAL_TIM_Base_Start_IT+0x80>
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	681b      	ldr	r3, [r3, #0]
 80037a4:	4a19      	ldr	r2, [pc, #100]	; (800380c <HAL_TIM_Base_Start_IT+0xd8>)
 80037a6:	4293      	cmp	r3, r2
 80037a8:	d004      	beq.n	80037b4 <HAL_TIM_Base_Start_IT+0x80>
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	681b      	ldr	r3, [r3, #0]
 80037ae:	4a18      	ldr	r2, [pc, #96]	; (8003810 <HAL_TIM_Base_Start_IT+0xdc>)
 80037b0:	4293      	cmp	r3, r2
 80037b2:	d111      	bne.n	80037d8 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	681b      	ldr	r3, [r3, #0]
 80037b8:	689b      	ldr	r3, [r3, #8]
 80037ba:	f003 0307 	and.w	r3, r3, #7
 80037be:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80037c0:	68fb      	ldr	r3, [r7, #12]
 80037c2:	2b06      	cmp	r3, #6
 80037c4:	d010      	beq.n	80037e8 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	681b      	ldr	r3, [r3, #0]
 80037ca:	681a      	ldr	r2, [r3, #0]
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	681b      	ldr	r3, [r3, #0]
 80037d0:	f042 0201 	orr.w	r2, r2, #1
 80037d4:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80037d6:	e007      	b.n	80037e8 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	681b      	ldr	r3, [r3, #0]
 80037dc:	681a      	ldr	r2, [r3, #0]
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	681b      	ldr	r3, [r3, #0]
 80037e2:	f042 0201 	orr.w	r2, r2, #1
 80037e6:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80037e8:	2300      	movs	r3, #0
}
 80037ea:	4618      	mov	r0, r3
 80037ec:	3714      	adds	r7, #20
 80037ee:	46bd      	mov	sp, r7
 80037f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037f4:	4770      	bx	lr
 80037f6:	bf00      	nop
 80037f8:	40010000 	.word	0x40010000
 80037fc:	40000400 	.word	0x40000400
 8003800:	40000800 	.word	0x40000800
 8003804:	40000c00 	.word	0x40000c00
 8003808:	40010400 	.word	0x40010400
 800380c:	40014000 	.word	0x40014000
 8003810:	40001800 	.word	0x40001800

08003814 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8003814:	b580      	push	{r7, lr}
 8003816:	b082      	sub	sp, #8
 8003818:	af00      	add	r7, sp, #0
 800381a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	2b00      	cmp	r3, #0
 8003820:	d101      	bne.n	8003826 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8003822:	2301      	movs	r3, #1
 8003824:	e041      	b.n	80038aa <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800382c:	b2db      	uxtb	r3, r3
 800382e:	2b00      	cmp	r3, #0
 8003830:	d106      	bne.n	8003840 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	2200      	movs	r2, #0
 8003836:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800383a:	6878      	ldr	r0, [r7, #4]
 800383c:	f7fe fbca 	bl	8001fd4 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	2202      	movs	r2, #2
 8003844:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	681a      	ldr	r2, [r3, #0]
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	3304      	adds	r3, #4
 8003850:	4619      	mov	r1, r3
 8003852:	4610      	mov	r0, r2
 8003854:	f000 fe08 	bl	8004468 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	2201      	movs	r2, #1
 800385c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	2201      	movs	r2, #1
 8003864:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	2201      	movs	r2, #1
 800386c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	2201      	movs	r2, #1
 8003874:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	2201      	movs	r2, #1
 800387c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	2201      	movs	r2, #1
 8003884:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	2201      	movs	r2, #1
 800388c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	2201      	movs	r2, #1
 8003894:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	2201      	movs	r2, #1
 800389c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	2201      	movs	r2, #1
 80038a4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80038a8:	2300      	movs	r3, #0
}
 80038aa:	4618      	mov	r0, r3
 80038ac:	3708      	adds	r7, #8
 80038ae:	46bd      	mov	sp, r7
 80038b0:	bd80      	pop	{r7, pc}
	...

080038b4 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80038b4:	b580      	push	{r7, lr}
 80038b6:	b084      	sub	sp, #16
 80038b8:	af00      	add	r7, sp, #0
 80038ba:	6078      	str	r0, [r7, #4]
 80038bc:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80038be:	683b      	ldr	r3, [r7, #0]
 80038c0:	2b00      	cmp	r3, #0
 80038c2:	d109      	bne.n	80038d8 <HAL_TIM_PWM_Start+0x24>
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80038ca:	b2db      	uxtb	r3, r3
 80038cc:	2b01      	cmp	r3, #1
 80038ce:	bf14      	ite	ne
 80038d0:	2301      	movne	r3, #1
 80038d2:	2300      	moveq	r3, #0
 80038d4:	b2db      	uxtb	r3, r3
 80038d6:	e022      	b.n	800391e <HAL_TIM_PWM_Start+0x6a>
 80038d8:	683b      	ldr	r3, [r7, #0]
 80038da:	2b04      	cmp	r3, #4
 80038dc:	d109      	bne.n	80038f2 <HAL_TIM_PWM_Start+0x3e>
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80038e4:	b2db      	uxtb	r3, r3
 80038e6:	2b01      	cmp	r3, #1
 80038e8:	bf14      	ite	ne
 80038ea:	2301      	movne	r3, #1
 80038ec:	2300      	moveq	r3, #0
 80038ee:	b2db      	uxtb	r3, r3
 80038f0:	e015      	b.n	800391e <HAL_TIM_PWM_Start+0x6a>
 80038f2:	683b      	ldr	r3, [r7, #0]
 80038f4:	2b08      	cmp	r3, #8
 80038f6:	d109      	bne.n	800390c <HAL_TIM_PWM_Start+0x58>
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80038fe:	b2db      	uxtb	r3, r3
 8003900:	2b01      	cmp	r3, #1
 8003902:	bf14      	ite	ne
 8003904:	2301      	movne	r3, #1
 8003906:	2300      	moveq	r3, #0
 8003908:	b2db      	uxtb	r3, r3
 800390a:	e008      	b.n	800391e <HAL_TIM_PWM_Start+0x6a>
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003912:	b2db      	uxtb	r3, r3
 8003914:	2b01      	cmp	r3, #1
 8003916:	bf14      	ite	ne
 8003918:	2301      	movne	r3, #1
 800391a:	2300      	moveq	r3, #0
 800391c:	b2db      	uxtb	r3, r3
 800391e:	2b00      	cmp	r3, #0
 8003920:	d001      	beq.n	8003926 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8003922:	2301      	movs	r3, #1
 8003924:	e07c      	b.n	8003a20 <HAL_TIM_PWM_Start+0x16c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8003926:	683b      	ldr	r3, [r7, #0]
 8003928:	2b00      	cmp	r3, #0
 800392a:	d104      	bne.n	8003936 <HAL_TIM_PWM_Start+0x82>
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	2202      	movs	r2, #2
 8003930:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003934:	e013      	b.n	800395e <HAL_TIM_PWM_Start+0xaa>
 8003936:	683b      	ldr	r3, [r7, #0]
 8003938:	2b04      	cmp	r3, #4
 800393a:	d104      	bne.n	8003946 <HAL_TIM_PWM_Start+0x92>
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	2202      	movs	r2, #2
 8003940:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003944:	e00b      	b.n	800395e <HAL_TIM_PWM_Start+0xaa>
 8003946:	683b      	ldr	r3, [r7, #0]
 8003948:	2b08      	cmp	r3, #8
 800394a:	d104      	bne.n	8003956 <HAL_TIM_PWM_Start+0xa2>
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	2202      	movs	r2, #2
 8003950:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003954:	e003      	b.n	800395e <HAL_TIM_PWM_Start+0xaa>
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	2202      	movs	r2, #2
 800395a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	681b      	ldr	r3, [r3, #0]
 8003962:	2201      	movs	r2, #1
 8003964:	6839      	ldr	r1, [r7, #0]
 8003966:	4618      	mov	r0, r3
 8003968:	f001 f992 	bl	8004c90 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	681b      	ldr	r3, [r3, #0]
 8003970:	4a2d      	ldr	r2, [pc, #180]	; (8003a28 <HAL_TIM_PWM_Start+0x174>)
 8003972:	4293      	cmp	r3, r2
 8003974:	d004      	beq.n	8003980 <HAL_TIM_PWM_Start+0xcc>
 8003976:	687b      	ldr	r3, [r7, #4]
 8003978:	681b      	ldr	r3, [r3, #0]
 800397a:	4a2c      	ldr	r2, [pc, #176]	; (8003a2c <HAL_TIM_PWM_Start+0x178>)
 800397c:	4293      	cmp	r3, r2
 800397e:	d101      	bne.n	8003984 <HAL_TIM_PWM_Start+0xd0>
 8003980:	2301      	movs	r3, #1
 8003982:	e000      	b.n	8003986 <HAL_TIM_PWM_Start+0xd2>
 8003984:	2300      	movs	r3, #0
 8003986:	2b00      	cmp	r3, #0
 8003988:	d007      	beq.n	800399a <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	681b      	ldr	r3, [r3, #0]
 800398e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	681b      	ldr	r3, [r3, #0]
 8003994:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003998:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	681b      	ldr	r3, [r3, #0]
 800399e:	4a22      	ldr	r2, [pc, #136]	; (8003a28 <HAL_TIM_PWM_Start+0x174>)
 80039a0:	4293      	cmp	r3, r2
 80039a2:	d022      	beq.n	80039ea <HAL_TIM_PWM_Start+0x136>
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	681b      	ldr	r3, [r3, #0]
 80039a8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80039ac:	d01d      	beq.n	80039ea <HAL_TIM_PWM_Start+0x136>
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	681b      	ldr	r3, [r3, #0]
 80039b2:	4a1f      	ldr	r2, [pc, #124]	; (8003a30 <HAL_TIM_PWM_Start+0x17c>)
 80039b4:	4293      	cmp	r3, r2
 80039b6:	d018      	beq.n	80039ea <HAL_TIM_PWM_Start+0x136>
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	681b      	ldr	r3, [r3, #0]
 80039bc:	4a1d      	ldr	r2, [pc, #116]	; (8003a34 <HAL_TIM_PWM_Start+0x180>)
 80039be:	4293      	cmp	r3, r2
 80039c0:	d013      	beq.n	80039ea <HAL_TIM_PWM_Start+0x136>
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	681b      	ldr	r3, [r3, #0]
 80039c6:	4a1c      	ldr	r2, [pc, #112]	; (8003a38 <HAL_TIM_PWM_Start+0x184>)
 80039c8:	4293      	cmp	r3, r2
 80039ca:	d00e      	beq.n	80039ea <HAL_TIM_PWM_Start+0x136>
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	681b      	ldr	r3, [r3, #0]
 80039d0:	4a16      	ldr	r2, [pc, #88]	; (8003a2c <HAL_TIM_PWM_Start+0x178>)
 80039d2:	4293      	cmp	r3, r2
 80039d4:	d009      	beq.n	80039ea <HAL_TIM_PWM_Start+0x136>
 80039d6:	687b      	ldr	r3, [r7, #4]
 80039d8:	681b      	ldr	r3, [r3, #0]
 80039da:	4a18      	ldr	r2, [pc, #96]	; (8003a3c <HAL_TIM_PWM_Start+0x188>)
 80039dc:	4293      	cmp	r3, r2
 80039de:	d004      	beq.n	80039ea <HAL_TIM_PWM_Start+0x136>
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	681b      	ldr	r3, [r3, #0]
 80039e4:	4a16      	ldr	r2, [pc, #88]	; (8003a40 <HAL_TIM_PWM_Start+0x18c>)
 80039e6:	4293      	cmp	r3, r2
 80039e8:	d111      	bne.n	8003a0e <HAL_TIM_PWM_Start+0x15a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	681b      	ldr	r3, [r3, #0]
 80039ee:	689b      	ldr	r3, [r3, #8]
 80039f0:	f003 0307 	and.w	r3, r3, #7
 80039f4:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80039f6:	68fb      	ldr	r3, [r7, #12]
 80039f8:	2b06      	cmp	r3, #6
 80039fa:	d010      	beq.n	8003a1e <HAL_TIM_PWM_Start+0x16a>
    {
      __HAL_TIM_ENABLE(htim);
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	681b      	ldr	r3, [r3, #0]
 8003a00:	681a      	ldr	r2, [r3, #0]
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	681b      	ldr	r3, [r3, #0]
 8003a06:	f042 0201 	orr.w	r2, r2, #1
 8003a0a:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003a0c:	e007      	b.n	8003a1e <HAL_TIM_PWM_Start+0x16a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	681b      	ldr	r3, [r3, #0]
 8003a12:	681a      	ldr	r2, [r3, #0]
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	681b      	ldr	r3, [r3, #0]
 8003a18:	f042 0201 	orr.w	r2, r2, #1
 8003a1c:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003a1e:	2300      	movs	r3, #0
}
 8003a20:	4618      	mov	r0, r3
 8003a22:	3710      	adds	r7, #16
 8003a24:	46bd      	mov	sp, r7
 8003a26:	bd80      	pop	{r7, pc}
 8003a28:	40010000 	.word	0x40010000
 8003a2c:	40010400 	.word	0x40010400
 8003a30:	40000400 	.word	0x40000400
 8003a34:	40000800 	.word	0x40000800
 8003a38:	40000c00 	.word	0x40000c00
 8003a3c:	40014000 	.word	0x40014000
 8003a40:	40001800 	.word	0x40001800

08003a44 <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 8003a44:	b580      	push	{r7, lr}
 8003a46:	b082      	sub	sp, #8
 8003a48:	af00      	add	r7, sp, #0
 8003a4a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	2b00      	cmp	r3, #0
 8003a50:	d101      	bne.n	8003a56 <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 8003a52:	2301      	movs	r3, #1
 8003a54:	e041      	b.n	8003ada <HAL_TIM_IC_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003a5c:	b2db      	uxtb	r3, r3
 8003a5e:	2b00      	cmp	r3, #0
 8003a60:	d106      	bne.n	8003a70 <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	2200      	movs	r2, #0
 8003a66:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 8003a6a:	6878      	ldr	r0, [r7, #4]
 8003a6c:	f000 f839 	bl	8003ae2 <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	2202      	movs	r2, #2
 8003a74:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	681a      	ldr	r2, [r3, #0]
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	3304      	adds	r3, #4
 8003a80:	4619      	mov	r1, r3
 8003a82:	4610      	mov	r0, r2
 8003a84:	f000 fcf0 	bl	8004468 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	2201      	movs	r2, #1
 8003a8c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	2201      	movs	r2, #1
 8003a94:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	2201      	movs	r2, #1
 8003a9c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	2201      	movs	r2, #1
 8003aa4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	2201      	movs	r2, #1
 8003aac:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	2201      	movs	r2, #1
 8003ab4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	2201      	movs	r2, #1
 8003abc:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	2201      	movs	r2, #1
 8003ac4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	2201      	movs	r2, #1
 8003acc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	2201      	movs	r2, #1
 8003ad4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003ad8:	2300      	movs	r3, #0
}
 8003ada:	4618      	mov	r0, r3
 8003adc:	3708      	adds	r7, #8
 8003ade:	46bd      	mov	sp, r7
 8003ae0:	bd80      	pop	{r7, pc}

08003ae2 <HAL_TIM_IC_MspInit>:
  * @brief  Initializes the TIM Input Capture MSP.
  * @param  htim TIM Input Capture handle
  * @retval None
  */
__weak void HAL_TIM_IC_MspInit(TIM_HandleTypeDef *htim)
{
 8003ae2:	b480      	push	{r7}
 8003ae4:	b083      	sub	sp, #12
 8003ae6:	af00      	add	r7, sp, #0
 8003ae8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_MspInit could be implemented in the user file
   */
}
 8003aea:	bf00      	nop
 8003aec:	370c      	adds	r7, #12
 8003aee:	46bd      	mov	sp, r7
 8003af0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003af4:	4770      	bx	lr
	...

08003af8 <HAL_TIM_IC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003af8:	b580      	push	{r7, lr}
 8003afa:	b084      	sub	sp, #16
 8003afc:	af00      	add	r7, sp, #0
 8003afe:	6078      	str	r0, [r7, #4]
 8003b00:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003b02:	2300      	movs	r3, #0
 8003b04:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 8003b06:	683b      	ldr	r3, [r7, #0]
 8003b08:	2b00      	cmp	r3, #0
 8003b0a:	d104      	bne.n	8003b16 <HAL_TIM_IC_Start_IT+0x1e>
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003b12:	b2db      	uxtb	r3, r3
 8003b14:	e013      	b.n	8003b3e <HAL_TIM_IC_Start_IT+0x46>
 8003b16:	683b      	ldr	r3, [r7, #0]
 8003b18:	2b04      	cmp	r3, #4
 8003b1a:	d104      	bne.n	8003b26 <HAL_TIM_IC_Start_IT+0x2e>
 8003b1c:	687b      	ldr	r3, [r7, #4]
 8003b1e:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8003b22:	b2db      	uxtb	r3, r3
 8003b24:	e00b      	b.n	8003b3e <HAL_TIM_IC_Start_IT+0x46>
 8003b26:	683b      	ldr	r3, [r7, #0]
 8003b28:	2b08      	cmp	r3, #8
 8003b2a:	d104      	bne.n	8003b36 <HAL_TIM_IC_Start_IT+0x3e>
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003b32:	b2db      	uxtb	r3, r3
 8003b34:	e003      	b.n	8003b3e <HAL_TIM_IC_Start_IT+0x46>
 8003b36:	687b      	ldr	r3, [r7, #4]
 8003b38:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003b3c:	b2db      	uxtb	r3, r3
 8003b3e:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 8003b40:	683b      	ldr	r3, [r7, #0]
 8003b42:	2b00      	cmp	r3, #0
 8003b44:	d104      	bne.n	8003b50 <HAL_TIM_IC_Start_IT+0x58>
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8003b4c:	b2db      	uxtb	r3, r3
 8003b4e:	e013      	b.n	8003b78 <HAL_TIM_IC_Start_IT+0x80>
 8003b50:	683b      	ldr	r3, [r7, #0]
 8003b52:	2b04      	cmp	r3, #4
 8003b54:	d104      	bne.n	8003b60 <HAL_TIM_IC_Start_IT+0x68>
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8003b5c:	b2db      	uxtb	r3, r3
 8003b5e:	e00b      	b.n	8003b78 <HAL_TIM_IC_Start_IT+0x80>
 8003b60:	683b      	ldr	r3, [r7, #0]
 8003b62:	2b08      	cmp	r3, #8
 8003b64:	d104      	bne.n	8003b70 <HAL_TIM_IC_Start_IT+0x78>
 8003b66:	687b      	ldr	r3, [r7, #4]
 8003b68:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8003b6c:	b2db      	uxtb	r3, r3
 8003b6e:	e003      	b.n	8003b78 <HAL_TIM_IC_Start_IT+0x80>
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8003b76:	b2db      	uxtb	r3, r3
 8003b78:	737b      	strb	r3, [r7, #13]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if ((channel_state != HAL_TIM_CHANNEL_STATE_READY)
 8003b7a:	7bbb      	ldrb	r3, [r7, #14]
 8003b7c:	2b01      	cmp	r3, #1
 8003b7e:	d102      	bne.n	8003b86 <HAL_TIM_IC_Start_IT+0x8e>
      || (complementary_channel_state != HAL_TIM_CHANNEL_STATE_READY))
 8003b80:	7b7b      	ldrb	r3, [r7, #13]
 8003b82:	2b01      	cmp	r3, #1
 8003b84:	d001      	beq.n	8003b8a <HAL_TIM_IC_Start_IT+0x92>
  {
    return HAL_ERROR;
 8003b86:	2301      	movs	r3, #1
 8003b88:	e0cc      	b.n	8003d24 <HAL_TIM_IC_Start_IT+0x22c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8003b8a:	683b      	ldr	r3, [r7, #0]
 8003b8c:	2b00      	cmp	r3, #0
 8003b8e:	d104      	bne.n	8003b9a <HAL_TIM_IC_Start_IT+0xa2>
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	2202      	movs	r2, #2
 8003b94:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003b98:	e013      	b.n	8003bc2 <HAL_TIM_IC_Start_IT+0xca>
 8003b9a:	683b      	ldr	r3, [r7, #0]
 8003b9c:	2b04      	cmp	r3, #4
 8003b9e:	d104      	bne.n	8003baa <HAL_TIM_IC_Start_IT+0xb2>
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	2202      	movs	r2, #2
 8003ba4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003ba8:	e00b      	b.n	8003bc2 <HAL_TIM_IC_Start_IT+0xca>
 8003baa:	683b      	ldr	r3, [r7, #0]
 8003bac:	2b08      	cmp	r3, #8
 8003bae:	d104      	bne.n	8003bba <HAL_TIM_IC_Start_IT+0xc2>
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	2202      	movs	r2, #2
 8003bb4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003bb8:	e003      	b.n	8003bc2 <HAL_TIM_IC_Start_IT+0xca>
 8003bba:	687b      	ldr	r3, [r7, #4]
 8003bbc:	2202      	movs	r2, #2
 8003bbe:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8003bc2:	683b      	ldr	r3, [r7, #0]
 8003bc4:	2b00      	cmp	r3, #0
 8003bc6:	d104      	bne.n	8003bd2 <HAL_TIM_IC_Start_IT+0xda>
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	2202      	movs	r2, #2
 8003bcc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003bd0:	e013      	b.n	8003bfa <HAL_TIM_IC_Start_IT+0x102>
 8003bd2:	683b      	ldr	r3, [r7, #0]
 8003bd4:	2b04      	cmp	r3, #4
 8003bd6:	d104      	bne.n	8003be2 <HAL_TIM_IC_Start_IT+0xea>
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	2202      	movs	r2, #2
 8003bdc:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003be0:	e00b      	b.n	8003bfa <HAL_TIM_IC_Start_IT+0x102>
 8003be2:	683b      	ldr	r3, [r7, #0]
 8003be4:	2b08      	cmp	r3, #8
 8003be6:	d104      	bne.n	8003bf2 <HAL_TIM_IC_Start_IT+0xfa>
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	2202      	movs	r2, #2
 8003bec:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003bf0:	e003      	b.n	8003bfa <HAL_TIM_IC_Start_IT+0x102>
 8003bf2:	687b      	ldr	r3, [r7, #4]
 8003bf4:	2202      	movs	r2, #2
 8003bf6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003bfa:	683b      	ldr	r3, [r7, #0]
 8003bfc:	2b0c      	cmp	r3, #12
 8003bfe:	d841      	bhi.n	8003c84 <HAL_TIM_IC_Start_IT+0x18c>
 8003c00:	a201      	add	r2, pc, #4	; (adr r2, 8003c08 <HAL_TIM_IC_Start_IT+0x110>)
 8003c02:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003c06:	bf00      	nop
 8003c08:	08003c3d 	.word	0x08003c3d
 8003c0c:	08003c85 	.word	0x08003c85
 8003c10:	08003c85 	.word	0x08003c85
 8003c14:	08003c85 	.word	0x08003c85
 8003c18:	08003c4f 	.word	0x08003c4f
 8003c1c:	08003c85 	.word	0x08003c85
 8003c20:	08003c85 	.word	0x08003c85
 8003c24:	08003c85 	.word	0x08003c85
 8003c28:	08003c61 	.word	0x08003c61
 8003c2c:	08003c85 	.word	0x08003c85
 8003c30:	08003c85 	.word	0x08003c85
 8003c34:	08003c85 	.word	0x08003c85
 8003c38:	08003c73 	.word	0x08003c73
  switch (Channel)
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	681b      	ldr	r3, [r3, #0]
 8003c40:	68da      	ldr	r2, [r3, #12]
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	681b      	ldr	r3, [r3, #0]
 8003c46:	f042 0202 	orr.w	r2, r2, #2
 8003c4a:	60da      	str	r2, [r3, #12]
      break;
 8003c4c:	e01d      	b.n	8003c8a <HAL_TIM_IC_Start_IT+0x192>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	681b      	ldr	r3, [r3, #0]
 8003c52:	68da      	ldr	r2, [r3, #12]
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	681b      	ldr	r3, [r3, #0]
 8003c58:	f042 0204 	orr.w	r2, r2, #4
 8003c5c:	60da      	str	r2, [r3, #12]
      break;
 8003c5e:	e014      	b.n	8003c8a <HAL_TIM_IC_Start_IT+0x192>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	681b      	ldr	r3, [r3, #0]
 8003c64:	68da      	ldr	r2, [r3, #12]
 8003c66:	687b      	ldr	r3, [r7, #4]
 8003c68:	681b      	ldr	r3, [r3, #0]
 8003c6a:	f042 0208 	orr.w	r2, r2, #8
 8003c6e:	60da      	str	r2, [r3, #12]
      break;
 8003c70:	e00b      	b.n	8003c8a <HAL_TIM_IC_Start_IT+0x192>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 8003c72:	687b      	ldr	r3, [r7, #4]
 8003c74:	681b      	ldr	r3, [r3, #0]
 8003c76:	68da      	ldr	r2, [r3, #12]
 8003c78:	687b      	ldr	r3, [r7, #4]
 8003c7a:	681b      	ldr	r3, [r3, #0]
 8003c7c:	f042 0210 	orr.w	r2, r2, #16
 8003c80:	60da      	str	r2, [r3, #12]
      break;
 8003c82:	e002      	b.n	8003c8a <HAL_TIM_IC_Start_IT+0x192>
    }

    default:
      status = HAL_ERROR;
 8003c84:	2301      	movs	r3, #1
 8003c86:	73fb      	strb	r3, [r7, #15]
      break;
 8003c88:	bf00      	nop
  }

  if (status == HAL_OK)
 8003c8a:	7bfb      	ldrb	r3, [r7, #15]
 8003c8c:	2b00      	cmp	r3, #0
 8003c8e:	d148      	bne.n	8003d22 <HAL_TIM_IC_Start_IT+0x22a>
  {
    /* Enable the Input Capture channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	681b      	ldr	r3, [r3, #0]
 8003c94:	2201      	movs	r2, #1
 8003c96:	6839      	ldr	r1, [r7, #0]
 8003c98:	4618      	mov	r0, r3
 8003c9a:	f000 fff9 	bl	8004c90 <TIM_CCxChannelCmd>

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003c9e:	687b      	ldr	r3, [r7, #4]
 8003ca0:	681b      	ldr	r3, [r3, #0]
 8003ca2:	4a22      	ldr	r2, [pc, #136]	; (8003d2c <HAL_TIM_IC_Start_IT+0x234>)
 8003ca4:	4293      	cmp	r3, r2
 8003ca6:	d022      	beq.n	8003cee <HAL_TIM_IC_Start_IT+0x1f6>
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	681b      	ldr	r3, [r3, #0]
 8003cac:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003cb0:	d01d      	beq.n	8003cee <HAL_TIM_IC_Start_IT+0x1f6>
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	681b      	ldr	r3, [r3, #0]
 8003cb6:	4a1e      	ldr	r2, [pc, #120]	; (8003d30 <HAL_TIM_IC_Start_IT+0x238>)
 8003cb8:	4293      	cmp	r3, r2
 8003cba:	d018      	beq.n	8003cee <HAL_TIM_IC_Start_IT+0x1f6>
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	681b      	ldr	r3, [r3, #0]
 8003cc0:	4a1c      	ldr	r2, [pc, #112]	; (8003d34 <HAL_TIM_IC_Start_IT+0x23c>)
 8003cc2:	4293      	cmp	r3, r2
 8003cc4:	d013      	beq.n	8003cee <HAL_TIM_IC_Start_IT+0x1f6>
 8003cc6:	687b      	ldr	r3, [r7, #4]
 8003cc8:	681b      	ldr	r3, [r3, #0]
 8003cca:	4a1b      	ldr	r2, [pc, #108]	; (8003d38 <HAL_TIM_IC_Start_IT+0x240>)
 8003ccc:	4293      	cmp	r3, r2
 8003cce:	d00e      	beq.n	8003cee <HAL_TIM_IC_Start_IT+0x1f6>
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	681b      	ldr	r3, [r3, #0]
 8003cd4:	4a19      	ldr	r2, [pc, #100]	; (8003d3c <HAL_TIM_IC_Start_IT+0x244>)
 8003cd6:	4293      	cmp	r3, r2
 8003cd8:	d009      	beq.n	8003cee <HAL_TIM_IC_Start_IT+0x1f6>
 8003cda:	687b      	ldr	r3, [r7, #4]
 8003cdc:	681b      	ldr	r3, [r3, #0]
 8003cde:	4a18      	ldr	r2, [pc, #96]	; (8003d40 <HAL_TIM_IC_Start_IT+0x248>)
 8003ce0:	4293      	cmp	r3, r2
 8003ce2:	d004      	beq.n	8003cee <HAL_TIM_IC_Start_IT+0x1f6>
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	681b      	ldr	r3, [r3, #0]
 8003ce8:	4a16      	ldr	r2, [pc, #88]	; (8003d44 <HAL_TIM_IC_Start_IT+0x24c>)
 8003cea:	4293      	cmp	r3, r2
 8003cec:	d111      	bne.n	8003d12 <HAL_TIM_IC_Start_IT+0x21a>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003cee:	687b      	ldr	r3, [r7, #4]
 8003cf0:	681b      	ldr	r3, [r3, #0]
 8003cf2:	689b      	ldr	r3, [r3, #8]
 8003cf4:	f003 0307 	and.w	r3, r3, #7
 8003cf8:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003cfa:	68bb      	ldr	r3, [r7, #8]
 8003cfc:	2b06      	cmp	r3, #6
 8003cfe:	d010      	beq.n	8003d22 <HAL_TIM_IC_Start_IT+0x22a>
      {
        __HAL_TIM_ENABLE(htim);
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	681b      	ldr	r3, [r3, #0]
 8003d04:	681a      	ldr	r2, [r3, #0]
 8003d06:	687b      	ldr	r3, [r7, #4]
 8003d08:	681b      	ldr	r3, [r3, #0]
 8003d0a:	f042 0201 	orr.w	r2, r2, #1
 8003d0e:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003d10:	e007      	b.n	8003d22 <HAL_TIM_IC_Start_IT+0x22a>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	681b      	ldr	r3, [r3, #0]
 8003d16:	681a      	ldr	r2, [r3, #0]
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	681b      	ldr	r3, [r3, #0]
 8003d1c:	f042 0201 	orr.w	r2, r2, #1
 8003d20:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return status;
 8003d22:	7bfb      	ldrb	r3, [r7, #15]
}
 8003d24:	4618      	mov	r0, r3
 8003d26:	3710      	adds	r7, #16
 8003d28:	46bd      	mov	sp, r7
 8003d2a:	bd80      	pop	{r7, pc}
 8003d2c:	40010000 	.word	0x40010000
 8003d30:	40000400 	.word	0x40000400
 8003d34:	40000800 	.word	0x40000800
 8003d38:	40000c00 	.word	0x40000c00
 8003d3c:	40010400 	.word	0x40010400
 8003d40:	40014000 	.word	0x40014000
 8003d44:	40001800 	.word	0x40001800

08003d48 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003d48:	b580      	push	{r7, lr}
 8003d4a:	b082      	sub	sp, #8
 8003d4c:	af00      	add	r7, sp, #0
 8003d4e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	681b      	ldr	r3, [r3, #0]
 8003d54:	691b      	ldr	r3, [r3, #16]
 8003d56:	f003 0302 	and.w	r3, r3, #2
 8003d5a:	2b02      	cmp	r3, #2
 8003d5c:	d122      	bne.n	8003da4 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8003d5e:	687b      	ldr	r3, [r7, #4]
 8003d60:	681b      	ldr	r3, [r3, #0]
 8003d62:	68db      	ldr	r3, [r3, #12]
 8003d64:	f003 0302 	and.w	r3, r3, #2
 8003d68:	2b02      	cmp	r3, #2
 8003d6a:	d11b      	bne.n	8003da4 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	681b      	ldr	r3, [r3, #0]
 8003d70:	f06f 0202 	mvn.w	r2, #2
 8003d74:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	2201      	movs	r2, #1
 8003d7a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	681b      	ldr	r3, [r3, #0]
 8003d80:	699b      	ldr	r3, [r3, #24]
 8003d82:	f003 0303 	and.w	r3, r3, #3
 8003d86:	2b00      	cmp	r3, #0
 8003d88:	d003      	beq.n	8003d92 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8003d8a:	6878      	ldr	r0, [r7, #4]
 8003d8c:	f7fd ffc4 	bl	8001d18 <HAL_TIM_IC_CaptureCallback>
 8003d90:	e005      	b.n	8003d9e <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003d92:	6878      	ldr	r0, [r7, #4]
 8003d94:	f000 fb4a 	bl	800442c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003d98:	6878      	ldr	r0, [r7, #4]
 8003d9a:	f000 fb51 	bl	8004440 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003d9e:	687b      	ldr	r3, [r7, #4]
 8003da0:	2200      	movs	r2, #0
 8003da2:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8003da4:	687b      	ldr	r3, [r7, #4]
 8003da6:	681b      	ldr	r3, [r3, #0]
 8003da8:	691b      	ldr	r3, [r3, #16]
 8003daa:	f003 0304 	and.w	r3, r3, #4
 8003dae:	2b04      	cmp	r3, #4
 8003db0:	d122      	bne.n	8003df8 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8003db2:	687b      	ldr	r3, [r7, #4]
 8003db4:	681b      	ldr	r3, [r3, #0]
 8003db6:	68db      	ldr	r3, [r3, #12]
 8003db8:	f003 0304 	and.w	r3, r3, #4
 8003dbc:	2b04      	cmp	r3, #4
 8003dbe:	d11b      	bne.n	8003df8 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	681b      	ldr	r3, [r3, #0]
 8003dc4:	f06f 0204 	mvn.w	r2, #4
 8003dc8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003dca:	687b      	ldr	r3, [r7, #4]
 8003dcc:	2202      	movs	r2, #2
 8003dce:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	681b      	ldr	r3, [r3, #0]
 8003dd4:	699b      	ldr	r3, [r3, #24]
 8003dd6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003dda:	2b00      	cmp	r3, #0
 8003ddc:	d003      	beq.n	8003de6 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003dde:	6878      	ldr	r0, [r7, #4]
 8003de0:	f7fd ff9a 	bl	8001d18 <HAL_TIM_IC_CaptureCallback>
 8003de4:	e005      	b.n	8003df2 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003de6:	6878      	ldr	r0, [r7, #4]
 8003de8:	f000 fb20 	bl	800442c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003dec:	6878      	ldr	r0, [r7, #4]
 8003dee:	f000 fb27 	bl	8004440 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003df2:	687b      	ldr	r3, [r7, #4]
 8003df4:	2200      	movs	r2, #0
 8003df6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	681b      	ldr	r3, [r3, #0]
 8003dfc:	691b      	ldr	r3, [r3, #16]
 8003dfe:	f003 0308 	and.w	r3, r3, #8
 8003e02:	2b08      	cmp	r3, #8
 8003e04:	d122      	bne.n	8003e4c <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8003e06:	687b      	ldr	r3, [r7, #4]
 8003e08:	681b      	ldr	r3, [r3, #0]
 8003e0a:	68db      	ldr	r3, [r3, #12]
 8003e0c:	f003 0308 	and.w	r3, r3, #8
 8003e10:	2b08      	cmp	r3, #8
 8003e12:	d11b      	bne.n	8003e4c <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	681b      	ldr	r3, [r3, #0]
 8003e18:	f06f 0208 	mvn.w	r2, #8
 8003e1c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003e1e:	687b      	ldr	r3, [r7, #4]
 8003e20:	2204      	movs	r2, #4
 8003e22:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	681b      	ldr	r3, [r3, #0]
 8003e28:	69db      	ldr	r3, [r3, #28]
 8003e2a:	f003 0303 	and.w	r3, r3, #3
 8003e2e:	2b00      	cmp	r3, #0
 8003e30:	d003      	beq.n	8003e3a <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003e32:	6878      	ldr	r0, [r7, #4]
 8003e34:	f7fd ff70 	bl	8001d18 <HAL_TIM_IC_CaptureCallback>
 8003e38:	e005      	b.n	8003e46 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003e3a:	6878      	ldr	r0, [r7, #4]
 8003e3c:	f000 faf6 	bl	800442c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003e40:	6878      	ldr	r0, [r7, #4]
 8003e42:	f000 fafd 	bl	8004440 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003e46:	687b      	ldr	r3, [r7, #4]
 8003e48:	2200      	movs	r2, #0
 8003e4a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8003e4c:	687b      	ldr	r3, [r7, #4]
 8003e4e:	681b      	ldr	r3, [r3, #0]
 8003e50:	691b      	ldr	r3, [r3, #16]
 8003e52:	f003 0310 	and.w	r3, r3, #16
 8003e56:	2b10      	cmp	r3, #16
 8003e58:	d122      	bne.n	8003ea0 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8003e5a:	687b      	ldr	r3, [r7, #4]
 8003e5c:	681b      	ldr	r3, [r3, #0]
 8003e5e:	68db      	ldr	r3, [r3, #12]
 8003e60:	f003 0310 	and.w	r3, r3, #16
 8003e64:	2b10      	cmp	r3, #16
 8003e66:	d11b      	bne.n	8003ea0 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8003e68:	687b      	ldr	r3, [r7, #4]
 8003e6a:	681b      	ldr	r3, [r3, #0]
 8003e6c:	f06f 0210 	mvn.w	r2, #16
 8003e70:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003e72:	687b      	ldr	r3, [r7, #4]
 8003e74:	2208      	movs	r2, #8
 8003e76:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	681b      	ldr	r3, [r3, #0]
 8003e7c:	69db      	ldr	r3, [r3, #28]
 8003e7e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003e82:	2b00      	cmp	r3, #0
 8003e84:	d003      	beq.n	8003e8e <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003e86:	6878      	ldr	r0, [r7, #4]
 8003e88:	f7fd ff46 	bl	8001d18 <HAL_TIM_IC_CaptureCallback>
 8003e8c:	e005      	b.n	8003e9a <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003e8e:	6878      	ldr	r0, [r7, #4]
 8003e90:	f000 facc 	bl	800442c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003e94:	6878      	ldr	r0, [r7, #4]
 8003e96:	f000 fad3 	bl	8004440 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003e9a:	687b      	ldr	r3, [r7, #4]
 8003e9c:	2200      	movs	r2, #0
 8003e9e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	681b      	ldr	r3, [r3, #0]
 8003ea4:	691b      	ldr	r3, [r3, #16]
 8003ea6:	f003 0301 	and.w	r3, r3, #1
 8003eaa:	2b01      	cmp	r3, #1
 8003eac:	d10e      	bne.n	8003ecc <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8003eae:	687b      	ldr	r3, [r7, #4]
 8003eb0:	681b      	ldr	r3, [r3, #0]
 8003eb2:	68db      	ldr	r3, [r3, #12]
 8003eb4:	f003 0301 	and.w	r3, r3, #1
 8003eb8:	2b01      	cmp	r3, #1
 8003eba:	d107      	bne.n	8003ecc <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	681b      	ldr	r3, [r3, #0]
 8003ec0:	f06f 0201 	mvn.w	r2, #1
 8003ec4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8003ec6:	6878      	ldr	r0, [r7, #4]
 8003ec8:	f7fd ff31 	bl	8001d2e <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	681b      	ldr	r3, [r3, #0]
 8003ed0:	691b      	ldr	r3, [r3, #16]
 8003ed2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003ed6:	2b80      	cmp	r3, #128	; 0x80
 8003ed8:	d10e      	bne.n	8003ef8 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8003eda:	687b      	ldr	r3, [r7, #4]
 8003edc:	681b      	ldr	r3, [r3, #0]
 8003ede:	68db      	ldr	r3, [r3, #12]
 8003ee0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003ee4:	2b80      	cmp	r3, #128	; 0x80
 8003ee6:	d107      	bne.n	8003ef8 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	681b      	ldr	r3, [r3, #0]
 8003eec:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8003ef0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8003ef2:	6878      	ldr	r0, [r7, #4]
 8003ef4:	f000 ffca 	bl	8004e8c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8003ef8:	687b      	ldr	r3, [r7, #4]
 8003efa:	681b      	ldr	r3, [r3, #0]
 8003efc:	691b      	ldr	r3, [r3, #16]
 8003efe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003f02:	2b40      	cmp	r3, #64	; 0x40
 8003f04:	d10e      	bne.n	8003f24 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8003f06:	687b      	ldr	r3, [r7, #4]
 8003f08:	681b      	ldr	r3, [r3, #0]
 8003f0a:	68db      	ldr	r3, [r3, #12]
 8003f0c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003f10:	2b40      	cmp	r3, #64	; 0x40
 8003f12:	d107      	bne.n	8003f24 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	681b      	ldr	r3, [r3, #0]
 8003f18:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8003f1c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8003f1e:	6878      	ldr	r0, [r7, #4]
 8003f20:	f000 fa98 	bl	8004454 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	681b      	ldr	r3, [r3, #0]
 8003f28:	691b      	ldr	r3, [r3, #16]
 8003f2a:	f003 0320 	and.w	r3, r3, #32
 8003f2e:	2b20      	cmp	r3, #32
 8003f30:	d10e      	bne.n	8003f50 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8003f32:	687b      	ldr	r3, [r7, #4]
 8003f34:	681b      	ldr	r3, [r3, #0]
 8003f36:	68db      	ldr	r3, [r3, #12]
 8003f38:	f003 0320 	and.w	r3, r3, #32
 8003f3c:	2b20      	cmp	r3, #32
 8003f3e:	d107      	bne.n	8003f50 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8003f40:	687b      	ldr	r3, [r7, #4]
 8003f42:	681b      	ldr	r3, [r3, #0]
 8003f44:	f06f 0220 	mvn.w	r2, #32
 8003f48:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8003f4a:	6878      	ldr	r0, [r7, #4]
 8003f4c:	f000 ff94 	bl	8004e78 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003f50:	bf00      	nop
 8003f52:	3708      	adds	r7, #8
 8003f54:	46bd      	mov	sp, r7
 8003f56:	bd80      	pop	{r7, pc}

08003f58 <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 8003f58:	b580      	push	{r7, lr}
 8003f5a:	b086      	sub	sp, #24
 8003f5c:	af00      	add	r7, sp, #0
 8003f5e:	60f8      	str	r0, [r7, #12]
 8003f60:	60b9      	str	r1, [r7, #8]
 8003f62:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003f64:	2300      	movs	r3, #0
 8003f66:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 8003f68:	68fb      	ldr	r3, [r7, #12]
 8003f6a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003f6e:	2b01      	cmp	r3, #1
 8003f70:	d101      	bne.n	8003f76 <HAL_TIM_IC_ConfigChannel+0x1e>
 8003f72:	2302      	movs	r3, #2
 8003f74:	e088      	b.n	8004088 <HAL_TIM_IC_ConfigChannel+0x130>
 8003f76:	68fb      	ldr	r3, [r7, #12]
 8003f78:	2201      	movs	r2, #1
 8003f7a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (Channel == TIM_CHANNEL_1)
 8003f7e:	687b      	ldr	r3, [r7, #4]
 8003f80:	2b00      	cmp	r3, #0
 8003f82:	d11b      	bne.n	8003fbc <HAL_TIM_IC_ConfigChannel+0x64>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 8003f84:	68fb      	ldr	r3, [r7, #12]
 8003f86:	6818      	ldr	r0, [r3, #0]
 8003f88:	68bb      	ldr	r3, [r7, #8]
 8003f8a:	6819      	ldr	r1, [r3, #0]
 8003f8c:	68bb      	ldr	r3, [r7, #8]
 8003f8e:	685a      	ldr	r2, [r3, #4]
 8003f90:	68bb      	ldr	r3, [r7, #8]
 8003f92:	68db      	ldr	r3, [r3, #12]
 8003f94:	f000 fcb8 	bl	8004908 <TIM_TI1_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 8003f98:	68fb      	ldr	r3, [r7, #12]
 8003f9a:	681b      	ldr	r3, [r3, #0]
 8003f9c:	699a      	ldr	r2, [r3, #24]
 8003f9e:	68fb      	ldr	r3, [r7, #12]
 8003fa0:	681b      	ldr	r3, [r3, #0]
 8003fa2:	f022 020c 	bic.w	r2, r2, #12
 8003fa6:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 8003fa8:	68fb      	ldr	r3, [r7, #12]
 8003faa:	681b      	ldr	r3, [r3, #0]
 8003fac:	6999      	ldr	r1, [r3, #24]
 8003fae:	68bb      	ldr	r3, [r7, #8]
 8003fb0:	689a      	ldr	r2, [r3, #8]
 8003fb2:	68fb      	ldr	r3, [r7, #12]
 8003fb4:	681b      	ldr	r3, [r3, #0]
 8003fb6:	430a      	orrs	r2, r1
 8003fb8:	619a      	str	r2, [r3, #24]
 8003fba:	e060      	b.n	800407e <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_2)
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	2b04      	cmp	r3, #4
 8003fc0:	d11c      	bne.n	8003ffc <HAL_TIM_IC_ConfigChannel+0xa4>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 8003fc2:	68fb      	ldr	r3, [r7, #12]
 8003fc4:	6818      	ldr	r0, [r3, #0]
 8003fc6:	68bb      	ldr	r3, [r7, #8]
 8003fc8:	6819      	ldr	r1, [r3, #0]
 8003fca:	68bb      	ldr	r3, [r7, #8]
 8003fcc:	685a      	ldr	r2, [r3, #4]
 8003fce:	68bb      	ldr	r3, [r7, #8]
 8003fd0:	68db      	ldr	r3, [r3, #12]
 8003fd2:	f000 fd3c 	bl	8004a4e <TIM_TI2_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 8003fd6:	68fb      	ldr	r3, [r7, #12]
 8003fd8:	681b      	ldr	r3, [r3, #0]
 8003fda:	699a      	ldr	r2, [r3, #24]
 8003fdc:	68fb      	ldr	r3, [r7, #12]
 8003fde:	681b      	ldr	r3, [r3, #0]
 8003fe0:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8003fe4:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 8003fe6:	68fb      	ldr	r3, [r7, #12]
 8003fe8:	681b      	ldr	r3, [r3, #0]
 8003fea:	6999      	ldr	r1, [r3, #24]
 8003fec:	68bb      	ldr	r3, [r7, #8]
 8003fee:	689b      	ldr	r3, [r3, #8]
 8003ff0:	021a      	lsls	r2, r3, #8
 8003ff2:	68fb      	ldr	r3, [r7, #12]
 8003ff4:	681b      	ldr	r3, [r3, #0]
 8003ff6:	430a      	orrs	r2, r1
 8003ff8:	619a      	str	r2, [r3, #24]
 8003ffa:	e040      	b.n	800407e <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_3)
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	2b08      	cmp	r3, #8
 8004000:	d11b      	bne.n	800403a <HAL_TIM_IC_ConfigChannel+0xe2>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 8004002:	68fb      	ldr	r3, [r7, #12]
 8004004:	6818      	ldr	r0, [r3, #0]
 8004006:	68bb      	ldr	r3, [r7, #8]
 8004008:	6819      	ldr	r1, [r3, #0]
 800400a:	68bb      	ldr	r3, [r7, #8]
 800400c:	685a      	ldr	r2, [r3, #4]
 800400e:	68bb      	ldr	r3, [r7, #8]
 8004010:	68db      	ldr	r3, [r3, #12]
 8004012:	f000 fd89 	bl	8004b28 <TIM_TI3_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 8004016:	68fb      	ldr	r3, [r7, #12]
 8004018:	681b      	ldr	r3, [r3, #0]
 800401a:	69da      	ldr	r2, [r3, #28]
 800401c:	68fb      	ldr	r3, [r7, #12]
 800401e:	681b      	ldr	r3, [r3, #0]
 8004020:	f022 020c 	bic.w	r2, r2, #12
 8004024:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 8004026:	68fb      	ldr	r3, [r7, #12]
 8004028:	681b      	ldr	r3, [r3, #0]
 800402a:	69d9      	ldr	r1, [r3, #28]
 800402c:	68bb      	ldr	r3, [r7, #8]
 800402e:	689a      	ldr	r2, [r3, #8]
 8004030:	68fb      	ldr	r3, [r7, #12]
 8004032:	681b      	ldr	r3, [r3, #0]
 8004034:	430a      	orrs	r2, r1
 8004036:	61da      	str	r2, [r3, #28]
 8004038:	e021      	b.n	800407e <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_4)
 800403a:	687b      	ldr	r3, [r7, #4]
 800403c:	2b0c      	cmp	r3, #12
 800403e:	d11c      	bne.n	800407a <HAL_TIM_IC_ConfigChannel+0x122>
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 8004040:	68fb      	ldr	r3, [r7, #12]
 8004042:	6818      	ldr	r0, [r3, #0]
 8004044:	68bb      	ldr	r3, [r7, #8]
 8004046:	6819      	ldr	r1, [r3, #0]
 8004048:	68bb      	ldr	r3, [r7, #8]
 800404a:	685a      	ldr	r2, [r3, #4]
 800404c:	68bb      	ldr	r3, [r7, #8]
 800404e:	68db      	ldr	r3, [r3, #12]
 8004050:	f000 fda6 	bl	8004ba0 <TIM_TI4_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 8004054:	68fb      	ldr	r3, [r7, #12]
 8004056:	681b      	ldr	r3, [r3, #0]
 8004058:	69da      	ldr	r2, [r3, #28]
 800405a:	68fb      	ldr	r3, [r7, #12]
 800405c:	681b      	ldr	r3, [r3, #0]
 800405e:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8004062:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 8004064:	68fb      	ldr	r3, [r7, #12]
 8004066:	681b      	ldr	r3, [r3, #0]
 8004068:	69d9      	ldr	r1, [r3, #28]
 800406a:	68bb      	ldr	r3, [r7, #8]
 800406c:	689b      	ldr	r3, [r3, #8]
 800406e:	021a      	lsls	r2, r3, #8
 8004070:	68fb      	ldr	r3, [r7, #12]
 8004072:	681b      	ldr	r3, [r3, #0]
 8004074:	430a      	orrs	r2, r1
 8004076:	61da      	str	r2, [r3, #28]
 8004078:	e001      	b.n	800407e <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else
  {
    status = HAL_ERROR;
 800407a:	2301      	movs	r3, #1
 800407c:	75fb      	strb	r3, [r7, #23]
  }

  __HAL_UNLOCK(htim);
 800407e:	68fb      	ldr	r3, [r7, #12]
 8004080:	2200      	movs	r2, #0
 8004082:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8004086:	7dfb      	ldrb	r3, [r7, #23]
}
 8004088:	4618      	mov	r0, r3
 800408a:	3718      	adds	r7, #24
 800408c:	46bd      	mov	sp, r7
 800408e:	bd80      	pop	{r7, pc}

08004090 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8004090:	b580      	push	{r7, lr}
 8004092:	b086      	sub	sp, #24
 8004094:	af00      	add	r7, sp, #0
 8004096:	60f8      	str	r0, [r7, #12]
 8004098:	60b9      	str	r1, [r7, #8]
 800409a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800409c:	2300      	movs	r3, #0
 800409e:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80040a0:	68fb      	ldr	r3, [r7, #12]
 80040a2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80040a6:	2b01      	cmp	r3, #1
 80040a8:	d101      	bne.n	80040ae <HAL_TIM_PWM_ConfigChannel+0x1e>
 80040aa:	2302      	movs	r3, #2
 80040ac:	e0ae      	b.n	800420c <HAL_TIM_PWM_ConfigChannel+0x17c>
 80040ae:	68fb      	ldr	r3, [r7, #12]
 80040b0:	2201      	movs	r2, #1
 80040b2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 80040b6:	687b      	ldr	r3, [r7, #4]
 80040b8:	2b0c      	cmp	r3, #12
 80040ba:	f200 809f 	bhi.w	80041fc <HAL_TIM_PWM_ConfigChannel+0x16c>
 80040be:	a201      	add	r2, pc, #4	; (adr r2, 80040c4 <HAL_TIM_PWM_ConfigChannel+0x34>)
 80040c0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80040c4:	080040f9 	.word	0x080040f9
 80040c8:	080041fd 	.word	0x080041fd
 80040cc:	080041fd 	.word	0x080041fd
 80040d0:	080041fd 	.word	0x080041fd
 80040d4:	08004139 	.word	0x08004139
 80040d8:	080041fd 	.word	0x080041fd
 80040dc:	080041fd 	.word	0x080041fd
 80040e0:	080041fd 	.word	0x080041fd
 80040e4:	0800417b 	.word	0x0800417b
 80040e8:	080041fd 	.word	0x080041fd
 80040ec:	080041fd 	.word	0x080041fd
 80040f0:	080041fd 	.word	0x080041fd
 80040f4:	080041bb 	.word	0x080041bb
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80040f8:	68fb      	ldr	r3, [r7, #12]
 80040fa:	681b      	ldr	r3, [r3, #0]
 80040fc:	68b9      	ldr	r1, [r7, #8]
 80040fe:	4618      	mov	r0, r3
 8004100:	f000 fa52 	bl	80045a8 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8004104:	68fb      	ldr	r3, [r7, #12]
 8004106:	681b      	ldr	r3, [r3, #0]
 8004108:	699a      	ldr	r2, [r3, #24]
 800410a:	68fb      	ldr	r3, [r7, #12]
 800410c:	681b      	ldr	r3, [r3, #0]
 800410e:	f042 0208 	orr.w	r2, r2, #8
 8004112:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8004114:	68fb      	ldr	r3, [r7, #12]
 8004116:	681b      	ldr	r3, [r3, #0]
 8004118:	699a      	ldr	r2, [r3, #24]
 800411a:	68fb      	ldr	r3, [r7, #12]
 800411c:	681b      	ldr	r3, [r3, #0]
 800411e:	f022 0204 	bic.w	r2, r2, #4
 8004122:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8004124:	68fb      	ldr	r3, [r7, #12]
 8004126:	681b      	ldr	r3, [r3, #0]
 8004128:	6999      	ldr	r1, [r3, #24]
 800412a:	68bb      	ldr	r3, [r7, #8]
 800412c:	691a      	ldr	r2, [r3, #16]
 800412e:	68fb      	ldr	r3, [r7, #12]
 8004130:	681b      	ldr	r3, [r3, #0]
 8004132:	430a      	orrs	r2, r1
 8004134:	619a      	str	r2, [r3, #24]
      break;
 8004136:	e064      	b.n	8004202 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8004138:	68fb      	ldr	r3, [r7, #12]
 800413a:	681b      	ldr	r3, [r3, #0]
 800413c:	68b9      	ldr	r1, [r7, #8]
 800413e:	4618      	mov	r0, r3
 8004140:	f000 faa2 	bl	8004688 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8004144:	68fb      	ldr	r3, [r7, #12]
 8004146:	681b      	ldr	r3, [r3, #0]
 8004148:	699a      	ldr	r2, [r3, #24]
 800414a:	68fb      	ldr	r3, [r7, #12]
 800414c:	681b      	ldr	r3, [r3, #0]
 800414e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004152:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8004154:	68fb      	ldr	r3, [r7, #12]
 8004156:	681b      	ldr	r3, [r3, #0]
 8004158:	699a      	ldr	r2, [r3, #24]
 800415a:	68fb      	ldr	r3, [r7, #12]
 800415c:	681b      	ldr	r3, [r3, #0]
 800415e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004162:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8004164:	68fb      	ldr	r3, [r7, #12]
 8004166:	681b      	ldr	r3, [r3, #0]
 8004168:	6999      	ldr	r1, [r3, #24]
 800416a:	68bb      	ldr	r3, [r7, #8]
 800416c:	691b      	ldr	r3, [r3, #16]
 800416e:	021a      	lsls	r2, r3, #8
 8004170:	68fb      	ldr	r3, [r7, #12]
 8004172:	681b      	ldr	r3, [r3, #0]
 8004174:	430a      	orrs	r2, r1
 8004176:	619a      	str	r2, [r3, #24]
      break;
 8004178:	e043      	b.n	8004202 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800417a:	68fb      	ldr	r3, [r7, #12]
 800417c:	681b      	ldr	r3, [r3, #0]
 800417e:	68b9      	ldr	r1, [r7, #8]
 8004180:	4618      	mov	r0, r3
 8004182:	f000 faf7 	bl	8004774 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8004186:	68fb      	ldr	r3, [r7, #12]
 8004188:	681b      	ldr	r3, [r3, #0]
 800418a:	69da      	ldr	r2, [r3, #28]
 800418c:	68fb      	ldr	r3, [r7, #12]
 800418e:	681b      	ldr	r3, [r3, #0]
 8004190:	f042 0208 	orr.w	r2, r2, #8
 8004194:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8004196:	68fb      	ldr	r3, [r7, #12]
 8004198:	681b      	ldr	r3, [r3, #0]
 800419a:	69da      	ldr	r2, [r3, #28]
 800419c:	68fb      	ldr	r3, [r7, #12]
 800419e:	681b      	ldr	r3, [r3, #0]
 80041a0:	f022 0204 	bic.w	r2, r2, #4
 80041a4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80041a6:	68fb      	ldr	r3, [r7, #12]
 80041a8:	681b      	ldr	r3, [r3, #0]
 80041aa:	69d9      	ldr	r1, [r3, #28]
 80041ac:	68bb      	ldr	r3, [r7, #8]
 80041ae:	691a      	ldr	r2, [r3, #16]
 80041b0:	68fb      	ldr	r3, [r7, #12]
 80041b2:	681b      	ldr	r3, [r3, #0]
 80041b4:	430a      	orrs	r2, r1
 80041b6:	61da      	str	r2, [r3, #28]
      break;
 80041b8:	e023      	b.n	8004202 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80041ba:	68fb      	ldr	r3, [r7, #12]
 80041bc:	681b      	ldr	r3, [r3, #0]
 80041be:	68b9      	ldr	r1, [r7, #8]
 80041c0:	4618      	mov	r0, r3
 80041c2:	f000 fb4b 	bl	800485c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80041c6:	68fb      	ldr	r3, [r7, #12]
 80041c8:	681b      	ldr	r3, [r3, #0]
 80041ca:	69da      	ldr	r2, [r3, #28]
 80041cc:	68fb      	ldr	r3, [r7, #12]
 80041ce:	681b      	ldr	r3, [r3, #0]
 80041d0:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80041d4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80041d6:	68fb      	ldr	r3, [r7, #12]
 80041d8:	681b      	ldr	r3, [r3, #0]
 80041da:	69da      	ldr	r2, [r3, #28]
 80041dc:	68fb      	ldr	r3, [r7, #12]
 80041de:	681b      	ldr	r3, [r3, #0]
 80041e0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80041e4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80041e6:	68fb      	ldr	r3, [r7, #12]
 80041e8:	681b      	ldr	r3, [r3, #0]
 80041ea:	69d9      	ldr	r1, [r3, #28]
 80041ec:	68bb      	ldr	r3, [r7, #8]
 80041ee:	691b      	ldr	r3, [r3, #16]
 80041f0:	021a      	lsls	r2, r3, #8
 80041f2:	68fb      	ldr	r3, [r7, #12]
 80041f4:	681b      	ldr	r3, [r3, #0]
 80041f6:	430a      	orrs	r2, r1
 80041f8:	61da      	str	r2, [r3, #28]
      break;
 80041fa:	e002      	b.n	8004202 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 80041fc:	2301      	movs	r3, #1
 80041fe:	75fb      	strb	r3, [r7, #23]
      break;
 8004200:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8004202:	68fb      	ldr	r3, [r7, #12]
 8004204:	2200      	movs	r2, #0
 8004206:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800420a:	7dfb      	ldrb	r3, [r7, #23]
}
 800420c:	4618      	mov	r0, r3
 800420e:	3718      	adds	r7, #24
 8004210:	46bd      	mov	sp, r7
 8004212:	bd80      	pop	{r7, pc}

08004214 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8004214:	b580      	push	{r7, lr}
 8004216:	b084      	sub	sp, #16
 8004218:	af00      	add	r7, sp, #0
 800421a:	6078      	str	r0, [r7, #4]
 800421c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800421e:	2300      	movs	r3, #0
 8004220:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8004222:	687b      	ldr	r3, [r7, #4]
 8004224:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004228:	2b01      	cmp	r3, #1
 800422a:	d101      	bne.n	8004230 <HAL_TIM_ConfigClockSource+0x1c>
 800422c:	2302      	movs	r3, #2
 800422e:	e0b4      	b.n	800439a <HAL_TIM_ConfigClockSource+0x186>
 8004230:	687b      	ldr	r3, [r7, #4]
 8004232:	2201      	movs	r2, #1
 8004234:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004238:	687b      	ldr	r3, [r7, #4]
 800423a:	2202      	movs	r2, #2
 800423c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	681b      	ldr	r3, [r3, #0]
 8004244:	689b      	ldr	r3, [r3, #8]
 8004246:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8004248:	68bb      	ldr	r3, [r7, #8]
 800424a:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800424e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004250:	68bb      	ldr	r3, [r7, #8]
 8004252:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004256:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8004258:	687b      	ldr	r3, [r7, #4]
 800425a:	681b      	ldr	r3, [r3, #0]
 800425c:	68ba      	ldr	r2, [r7, #8]
 800425e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8004260:	683b      	ldr	r3, [r7, #0]
 8004262:	681b      	ldr	r3, [r3, #0]
 8004264:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004268:	d03e      	beq.n	80042e8 <HAL_TIM_ConfigClockSource+0xd4>
 800426a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800426e:	f200 8087 	bhi.w	8004380 <HAL_TIM_ConfigClockSource+0x16c>
 8004272:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004276:	f000 8086 	beq.w	8004386 <HAL_TIM_ConfigClockSource+0x172>
 800427a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800427e:	d87f      	bhi.n	8004380 <HAL_TIM_ConfigClockSource+0x16c>
 8004280:	2b70      	cmp	r3, #112	; 0x70
 8004282:	d01a      	beq.n	80042ba <HAL_TIM_ConfigClockSource+0xa6>
 8004284:	2b70      	cmp	r3, #112	; 0x70
 8004286:	d87b      	bhi.n	8004380 <HAL_TIM_ConfigClockSource+0x16c>
 8004288:	2b60      	cmp	r3, #96	; 0x60
 800428a:	d050      	beq.n	800432e <HAL_TIM_ConfigClockSource+0x11a>
 800428c:	2b60      	cmp	r3, #96	; 0x60
 800428e:	d877      	bhi.n	8004380 <HAL_TIM_ConfigClockSource+0x16c>
 8004290:	2b50      	cmp	r3, #80	; 0x50
 8004292:	d03c      	beq.n	800430e <HAL_TIM_ConfigClockSource+0xfa>
 8004294:	2b50      	cmp	r3, #80	; 0x50
 8004296:	d873      	bhi.n	8004380 <HAL_TIM_ConfigClockSource+0x16c>
 8004298:	2b40      	cmp	r3, #64	; 0x40
 800429a:	d058      	beq.n	800434e <HAL_TIM_ConfigClockSource+0x13a>
 800429c:	2b40      	cmp	r3, #64	; 0x40
 800429e:	d86f      	bhi.n	8004380 <HAL_TIM_ConfigClockSource+0x16c>
 80042a0:	2b30      	cmp	r3, #48	; 0x30
 80042a2:	d064      	beq.n	800436e <HAL_TIM_ConfigClockSource+0x15a>
 80042a4:	2b30      	cmp	r3, #48	; 0x30
 80042a6:	d86b      	bhi.n	8004380 <HAL_TIM_ConfigClockSource+0x16c>
 80042a8:	2b20      	cmp	r3, #32
 80042aa:	d060      	beq.n	800436e <HAL_TIM_ConfigClockSource+0x15a>
 80042ac:	2b20      	cmp	r3, #32
 80042ae:	d867      	bhi.n	8004380 <HAL_TIM_ConfigClockSource+0x16c>
 80042b0:	2b00      	cmp	r3, #0
 80042b2:	d05c      	beq.n	800436e <HAL_TIM_ConfigClockSource+0x15a>
 80042b4:	2b10      	cmp	r3, #16
 80042b6:	d05a      	beq.n	800436e <HAL_TIM_ConfigClockSource+0x15a>
 80042b8:	e062      	b.n	8004380 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80042ba:	687b      	ldr	r3, [r7, #4]
 80042bc:	6818      	ldr	r0, [r3, #0]
 80042be:	683b      	ldr	r3, [r7, #0]
 80042c0:	6899      	ldr	r1, [r3, #8]
 80042c2:	683b      	ldr	r3, [r7, #0]
 80042c4:	685a      	ldr	r2, [r3, #4]
 80042c6:	683b      	ldr	r3, [r7, #0]
 80042c8:	68db      	ldr	r3, [r3, #12]
 80042ca:	f000 fcc1 	bl	8004c50 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80042ce:	687b      	ldr	r3, [r7, #4]
 80042d0:	681b      	ldr	r3, [r3, #0]
 80042d2:	689b      	ldr	r3, [r3, #8]
 80042d4:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80042d6:	68bb      	ldr	r3, [r7, #8]
 80042d8:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80042dc:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80042de:	687b      	ldr	r3, [r7, #4]
 80042e0:	681b      	ldr	r3, [r3, #0]
 80042e2:	68ba      	ldr	r2, [r7, #8]
 80042e4:	609a      	str	r2, [r3, #8]
      break;
 80042e6:	e04f      	b.n	8004388 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80042e8:	687b      	ldr	r3, [r7, #4]
 80042ea:	6818      	ldr	r0, [r3, #0]
 80042ec:	683b      	ldr	r3, [r7, #0]
 80042ee:	6899      	ldr	r1, [r3, #8]
 80042f0:	683b      	ldr	r3, [r7, #0]
 80042f2:	685a      	ldr	r2, [r3, #4]
 80042f4:	683b      	ldr	r3, [r7, #0]
 80042f6:	68db      	ldr	r3, [r3, #12]
 80042f8:	f000 fcaa 	bl	8004c50 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	681b      	ldr	r3, [r3, #0]
 8004300:	689a      	ldr	r2, [r3, #8]
 8004302:	687b      	ldr	r3, [r7, #4]
 8004304:	681b      	ldr	r3, [r3, #0]
 8004306:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800430a:	609a      	str	r2, [r3, #8]
      break;
 800430c:	e03c      	b.n	8004388 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800430e:	687b      	ldr	r3, [r7, #4]
 8004310:	6818      	ldr	r0, [r3, #0]
 8004312:	683b      	ldr	r3, [r7, #0]
 8004314:	6859      	ldr	r1, [r3, #4]
 8004316:	683b      	ldr	r3, [r7, #0]
 8004318:	68db      	ldr	r3, [r3, #12]
 800431a:	461a      	mov	r2, r3
 800431c:	f000 fb68 	bl	80049f0 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8004320:	687b      	ldr	r3, [r7, #4]
 8004322:	681b      	ldr	r3, [r3, #0]
 8004324:	2150      	movs	r1, #80	; 0x50
 8004326:	4618      	mov	r0, r3
 8004328:	f000 fc77 	bl	8004c1a <TIM_ITRx_SetConfig>
      break;
 800432c:	e02c      	b.n	8004388 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800432e:	687b      	ldr	r3, [r7, #4]
 8004330:	6818      	ldr	r0, [r3, #0]
 8004332:	683b      	ldr	r3, [r7, #0]
 8004334:	6859      	ldr	r1, [r3, #4]
 8004336:	683b      	ldr	r3, [r7, #0]
 8004338:	68db      	ldr	r3, [r3, #12]
 800433a:	461a      	mov	r2, r3
 800433c:	f000 fbc4 	bl	8004ac8 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8004340:	687b      	ldr	r3, [r7, #4]
 8004342:	681b      	ldr	r3, [r3, #0]
 8004344:	2160      	movs	r1, #96	; 0x60
 8004346:	4618      	mov	r0, r3
 8004348:	f000 fc67 	bl	8004c1a <TIM_ITRx_SetConfig>
      break;
 800434c:	e01c      	b.n	8004388 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800434e:	687b      	ldr	r3, [r7, #4]
 8004350:	6818      	ldr	r0, [r3, #0]
 8004352:	683b      	ldr	r3, [r7, #0]
 8004354:	6859      	ldr	r1, [r3, #4]
 8004356:	683b      	ldr	r3, [r7, #0]
 8004358:	68db      	ldr	r3, [r3, #12]
 800435a:	461a      	mov	r2, r3
 800435c:	f000 fb48 	bl	80049f0 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8004360:	687b      	ldr	r3, [r7, #4]
 8004362:	681b      	ldr	r3, [r3, #0]
 8004364:	2140      	movs	r1, #64	; 0x40
 8004366:	4618      	mov	r0, r3
 8004368:	f000 fc57 	bl	8004c1a <TIM_ITRx_SetConfig>
      break;
 800436c:	e00c      	b.n	8004388 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800436e:	687b      	ldr	r3, [r7, #4]
 8004370:	681a      	ldr	r2, [r3, #0]
 8004372:	683b      	ldr	r3, [r7, #0]
 8004374:	681b      	ldr	r3, [r3, #0]
 8004376:	4619      	mov	r1, r3
 8004378:	4610      	mov	r0, r2
 800437a:	f000 fc4e 	bl	8004c1a <TIM_ITRx_SetConfig>
      break;
 800437e:	e003      	b.n	8004388 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8004380:	2301      	movs	r3, #1
 8004382:	73fb      	strb	r3, [r7, #15]
      break;
 8004384:	e000      	b.n	8004388 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8004386:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8004388:	687b      	ldr	r3, [r7, #4]
 800438a:	2201      	movs	r2, #1
 800438c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004390:	687b      	ldr	r3, [r7, #4]
 8004392:	2200      	movs	r2, #0
 8004394:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8004398:	7bfb      	ldrb	r3, [r7, #15]
}
 800439a:	4618      	mov	r0, r3
 800439c:	3710      	adds	r7, #16
 800439e:	46bd      	mov	sp, r7
 80043a0:	bd80      	pop	{r7, pc}
	...

080043a4 <HAL_TIM_ReadCapturedValue>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval Captured value
  */
uint32_t HAL_TIM_ReadCapturedValue(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80043a4:	b480      	push	{r7}
 80043a6:	b085      	sub	sp, #20
 80043a8:	af00      	add	r7, sp, #0
 80043aa:	6078      	str	r0, [r7, #4]
 80043ac:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0U;
 80043ae:	2300      	movs	r3, #0
 80043b0:	60fb      	str	r3, [r7, #12]
 80043b2:	683b      	ldr	r3, [r7, #0]
 80043b4:	2b0c      	cmp	r3, #12
 80043b6:	d831      	bhi.n	800441c <HAL_TIM_ReadCapturedValue+0x78>
 80043b8:	a201      	add	r2, pc, #4	; (adr r2, 80043c0 <HAL_TIM_ReadCapturedValue+0x1c>)
 80043ba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80043be:	bf00      	nop
 80043c0:	080043f5 	.word	0x080043f5
 80043c4:	0800441d 	.word	0x0800441d
 80043c8:	0800441d 	.word	0x0800441d
 80043cc:	0800441d 	.word	0x0800441d
 80043d0:	080043ff 	.word	0x080043ff
 80043d4:	0800441d 	.word	0x0800441d
 80043d8:	0800441d 	.word	0x0800441d
 80043dc:	0800441d 	.word	0x0800441d
 80043e0:	08004409 	.word	0x08004409
 80043e4:	0800441d 	.word	0x0800441d
 80043e8:	0800441d 	.word	0x0800441d
 80043ec:	0800441d 	.word	0x0800441d
 80043f0:	08004413 	.word	0x08004413
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Return the capture 1 value */
      tmpreg =  htim->Instance->CCR1;
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	681b      	ldr	r3, [r3, #0]
 80043f8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80043fa:	60fb      	str	r3, [r7, #12]

      break;
 80043fc:	e00f      	b.n	800441e <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Return the capture 2 value */
      tmpreg =   htim->Instance->CCR2;
 80043fe:	687b      	ldr	r3, [r7, #4]
 8004400:	681b      	ldr	r3, [r3, #0]
 8004402:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004404:	60fb      	str	r3, [r7, #12]

      break;
 8004406:	e00a      	b.n	800441e <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Return the capture 3 value */
      tmpreg =   htim->Instance->CCR3;
 8004408:	687b      	ldr	r3, [r7, #4]
 800440a:	681b      	ldr	r3, [r3, #0]
 800440c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800440e:	60fb      	str	r3, [r7, #12]

      break;
 8004410:	e005      	b.n	800441e <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Return the capture 4 value */
      tmpreg =   htim->Instance->CCR4;
 8004412:	687b      	ldr	r3, [r7, #4]
 8004414:	681b      	ldr	r3, [r3, #0]
 8004416:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004418:	60fb      	str	r3, [r7, #12]

      break;
 800441a:	e000      	b.n	800441e <HAL_TIM_ReadCapturedValue+0x7a>
    }

    default:
      break;
 800441c:	bf00      	nop
  }

  return tmpreg;
 800441e:	68fb      	ldr	r3, [r7, #12]
}
 8004420:	4618      	mov	r0, r3
 8004422:	3714      	adds	r7, #20
 8004424:	46bd      	mov	sp, r7
 8004426:	f85d 7b04 	ldr.w	r7, [sp], #4
 800442a:	4770      	bx	lr

0800442c <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800442c:	b480      	push	{r7}
 800442e:	b083      	sub	sp, #12
 8004430:	af00      	add	r7, sp, #0
 8004432:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8004434:	bf00      	nop
 8004436:	370c      	adds	r7, #12
 8004438:	46bd      	mov	sp, r7
 800443a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800443e:	4770      	bx	lr

08004440 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8004440:	b480      	push	{r7}
 8004442:	b083      	sub	sp, #12
 8004444:	af00      	add	r7, sp, #0
 8004446:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8004448:	bf00      	nop
 800444a:	370c      	adds	r7, #12
 800444c:	46bd      	mov	sp, r7
 800444e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004452:	4770      	bx	lr

08004454 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004454:	b480      	push	{r7}
 8004456:	b083      	sub	sp, #12
 8004458:	af00      	add	r7, sp, #0
 800445a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800445c:	bf00      	nop
 800445e:	370c      	adds	r7, #12
 8004460:	46bd      	mov	sp, r7
 8004462:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004466:	4770      	bx	lr

08004468 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8004468:	b480      	push	{r7}
 800446a:	b085      	sub	sp, #20
 800446c:	af00      	add	r7, sp, #0
 800446e:	6078      	str	r0, [r7, #4]
 8004470:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004472:	687b      	ldr	r3, [r7, #4]
 8004474:	681b      	ldr	r3, [r3, #0]
 8004476:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004478:	687b      	ldr	r3, [r7, #4]
 800447a:	4a40      	ldr	r2, [pc, #256]	; (800457c <TIM_Base_SetConfig+0x114>)
 800447c:	4293      	cmp	r3, r2
 800447e:	d013      	beq.n	80044a8 <TIM_Base_SetConfig+0x40>
 8004480:	687b      	ldr	r3, [r7, #4]
 8004482:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004486:	d00f      	beq.n	80044a8 <TIM_Base_SetConfig+0x40>
 8004488:	687b      	ldr	r3, [r7, #4]
 800448a:	4a3d      	ldr	r2, [pc, #244]	; (8004580 <TIM_Base_SetConfig+0x118>)
 800448c:	4293      	cmp	r3, r2
 800448e:	d00b      	beq.n	80044a8 <TIM_Base_SetConfig+0x40>
 8004490:	687b      	ldr	r3, [r7, #4]
 8004492:	4a3c      	ldr	r2, [pc, #240]	; (8004584 <TIM_Base_SetConfig+0x11c>)
 8004494:	4293      	cmp	r3, r2
 8004496:	d007      	beq.n	80044a8 <TIM_Base_SetConfig+0x40>
 8004498:	687b      	ldr	r3, [r7, #4]
 800449a:	4a3b      	ldr	r2, [pc, #236]	; (8004588 <TIM_Base_SetConfig+0x120>)
 800449c:	4293      	cmp	r3, r2
 800449e:	d003      	beq.n	80044a8 <TIM_Base_SetConfig+0x40>
 80044a0:	687b      	ldr	r3, [r7, #4]
 80044a2:	4a3a      	ldr	r2, [pc, #232]	; (800458c <TIM_Base_SetConfig+0x124>)
 80044a4:	4293      	cmp	r3, r2
 80044a6:	d108      	bne.n	80044ba <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80044a8:	68fb      	ldr	r3, [r7, #12]
 80044aa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80044ae:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80044b0:	683b      	ldr	r3, [r7, #0]
 80044b2:	685b      	ldr	r3, [r3, #4]
 80044b4:	68fa      	ldr	r2, [r7, #12]
 80044b6:	4313      	orrs	r3, r2
 80044b8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80044ba:	687b      	ldr	r3, [r7, #4]
 80044bc:	4a2f      	ldr	r2, [pc, #188]	; (800457c <TIM_Base_SetConfig+0x114>)
 80044be:	4293      	cmp	r3, r2
 80044c0:	d02b      	beq.n	800451a <TIM_Base_SetConfig+0xb2>
 80044c2:	687b      	ldr	r3, [r7, #4]
 80044c4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80044c8:	d027      	beq.n	800451a <TIM_Base_SetConfig+0xb2>
 80044ca:	687b      	ldr	r3, [r7, #4]
 80044cc:	4a2c      	ldr	r2, [pc, #176]	; (8004580 <TIM_Base_SetConfig+0x118>)
 80044ce:	4293      	cmp	r3, r2
 80044d0:	d023      	beq.n	800451a <TIM_Base_SetConfig+0xb2>
 80044d2:	687b      	ldr	r3, [r7, #4]
 80044d4:	4a2b      	ldr	r2, [pc, #172]	; (8004584 <TIM_Base_SetConfig+0x11c>)
 80044d6:	4293      	cmp	r3, r2
 80044d8:	d01f      	beq.n	800451a <TIM_Base_SetConfig+0xb2>
 80044da:	687b      	ldr	r3, [r7, #4]
 80044dc:	4a2a      	ldr	r2, [pc, #168]	; (8004588 <TIM_Base_SetConfig+0x120>)
 80044de:	4293      	cmp	r3, r2
 80044e0:	d01b      	beq.n	800451a <TIM_Base_SetConfig+0xb2>
 80044e2:	687b      	ldr	r3, [r7, #4]
 80044e4:	4a29      	ldr	r2, [pc, #164]	; (800458c <TIM_Base_SetConfig+0x124>)
 80044e6:	4293      	cmp	r3, r2
 80044e8:	d017      	beq.n	800451a <TIM_Base_SetConfig+0xb2>
 80044ea:	687b      	ldr	r3, [r7, #4]
 80044ec:	4a28      	ldr	r2, [pc, #160]	; (8004590 <TIM_Base_SetConfig+0x128>)
 80044ee:	4293      	cmp	r3, r2
 80044f0:	d013      	beq.n	800451a <TIM_Base_SetConfig+0xb2>
 80044f2:	687b      	ldr	r3, [r7, #4]
 80044f4:	4a27      	ldr	r2, [pc, #156]	; (8004594 <TIM_Base_SetConfig+0x12c>)
 80044f6:	4293      	cmp	r3, r2
 80044f8:	d00f      	beq.n	800451a <TIM_Base_SetConfig+0xb2>
 80044fa:	687b      	ldr	r3, [r7, #4]
 80044fc:	4a26      	ldr	r2, [pc, #152]	; (8004598 <TIM_Base_SetConfig+0x130>)
 80044fe:	4293      	cmp	r3, r2
 8004500:	d00b      	beq.n	800451a <TIM_Base_SetConfig+0xb2>
 8004502:	687b      	ldr	r3, [r7, #4]
 8004504:	4a25      	ldr	r2, [pc, #148]	; (800459c <TIM_Base_SetConfig+0x134>)
 8004506:	4293      	cmp	r3, r2
 8004508:	d007      	beq.n	800451a <TIM_Base_SetConfig+0xb2>
 800450a:	687b      	ldr	r3, [r7, #4]
 800450c:	4a24      	ldr	r2, [pc, #144]	; (80045a0 <TIM_Base_SetConfig+0x138>)
 800450e:	4293      	cmp	r3, r2
 8004510:	d003      	beq.n	800451a <TIM_Base_SetConfig+0xb2>
 8004512:	687b      	ldr	r3, [r7, #4]
 8004514:	4a23      	ldr	r2, [pc, #140]	; (80045a4 <TIM_Base_SetConfig+0x13c>)
 8004516:	4293      	cmp	r3, r2
 8004518:	d108      	bne.n	800452c <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800451a:	68fb      	ldr	r3, [r7, #12]
 800451c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004520:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004522:	683b      	ldr	r3, [r7, #0]
 8004524:	68db      	ldr	r3, [r3, #12]
 8004526:	68fa      	ldr	r2, [r7, #12]
 8004528:	4313      	orrs	r3, r2
 800452a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800452c:	68fb      	ldr	r3, [r7, #12]
 800452e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8004532:	683b      	ldr	r3, [r7, #0]
 8004534:	695b      	ldr	r3, [r3, #20]
 8004536:	4313      	orrs	r3, r2
 8004538:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800453a:	687b      	ldr	r3, [r7, #4]
 800453c:	68fa      	ldr	r2, [r7, #12]
 800453e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004540:	683b      	ldr	r3, [r7, #0]
 8004542:	689a      	ldr	r2, [r3, #8]
 8004544:	687b      	ldr	r3, [r7, #4]
 8004546:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004548:	683b      	ldr	r3, [r7, #0]
 800454a:	681a      	ldr	r2, [r3, #0]
 800454c:	687b      	ldr	r3, [r7, #4]
 800454e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004550:	687b      	ldr	r3, [r7, #4]
 8004552:	4a0a      	ldr	r2, [pc, #40]	; (800457c <TIM_Base_SetConfig+0x114>)
 8004554:	4293      	cmp	r3, r2
 8004556:	d003      	beq.n	8004560 <TIM_Base_SetConfig+0xf8>
 8004558:	687b      	ldr	r3, [r7, #4]
 800455a:	4a0c      	ldr	r2, [pc, #48]	; (800458c <TIM_Base_SetConfig+0x124>)
 800455c:	4293      	cmp	r3, r2
 800455e:	d103      	bne.n	8004568 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004560:	683b      	ldr	r3, [r7, #0]
 8004562:	691a      	ldr	r2, [r3, #16]
 8004564:	687b      	ldr	r3, [r7, #4]
 8004566:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004568:	687b      	ldr	r3, [r7, #4]
 800456a:	2201      	movs	r2, #1
 800456c:	615a      	str	r2, [r3, #20]
}
 800456e:	bf00      	nop
 8004570:	3714      	adds	r7, #20
 8004572:	46bd      	mov	sp, r7
 8004574:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004578:	4770      	bx	lr
 800457a:	bf00      	nop
 800457c:	40010000 	.word	0x40010000
 8004580:	40000400 	.word	0x40000400
 8004584:	40000800 	.word	0x40000800
 8004588:	40000c00 	.word	0x40000c00
 800458c:	40010400 	.word	0x40010400
 8004590:	40014000 	.word	0x40014000
 8004594:	40014400 	.word	0x40014400
 8004598:	40014800 	.word	0x40014800
 800459c:	40001800 	.word	0x40001800
 80045a0:	40001c00 	.word	0x40001c00
 80045a4:	40002000 	.word	0x40002000

080045a8 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80045a8:	b480      	push	{r7}
 80045aa:	b087      	sub	sp, #28
 80045ac:	af00      	add	r7, sp, #0
 80045ae:	6078      	str	r0, [r7, #4]
 80045b0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80045b2:	687b      	ldr	r3, [r7, #4]
 80045b4:	6a1b      	ldr	r3, [r3, #32]
 80045b6:	f023 0201 	bic.w	r2, r3, #1
 80045ba:	687b      	ldr	r3, [r7, #4]
 80045bc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80045be:	687b      	ldr	r3, [r7, #4]
 80045c0:	6a1b      	ldr	r3, [r3, #32]
 80045c2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80045c4:	687b      	ldr	r3, [r7, #4]
 80045c6:	685b      	ldr	r3, [r3, #4]
 80045c8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80045ca:	687b      	ldr	r3, [r7, #4]
 80045cc:	699b      	ldr	r3, [r3, #24]
 80045ce:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80045d0:	68fb      	ldr	r3, [r7, #12]
 80045d2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80045d6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80045d8:	68fb      	ldr	r3, [r7, #12]
 80045da:	f023 0303 	bic.w	r3, r3, #3
 80045de:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80045e0:	683b      	ldr	r3, [r7, #0]
 80045e2:	681b      	ldr	r3, [r3, #0]
 80045e4:	68fa      	ldr	r2, [r7, #12]
 80045e6:	4313      	orrs	r3, r2
 80045e8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80045ea:	697b      	ldr	r3, [r7, #20]
 80045ec:	f023 0302 	bic.w	r3, r3, #2
 80045f0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80045f2:	683b      	ldr	r3, [r7, #0]
 80045f4:	689b      	ldr	r3, [r3, #8]
 80045f6:	697a      	ldr	r2, [r7, #20]
 80045f8:	4313      	orrs	r3, r2
 80045fa:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80045fc:	687b      	ldr	r3, [r7, #4]
 80045fe:	4a20      	ldr	r2, [pc, #128]	; (8004680 <TIM_OC1_SetConfig+0xd8>)
 8004600:	4293      	cmp	r3, r2
 8004602:	d003      	beq.n	800460c <TIM_OC1_SetConfig+0x64>
 8004604:	687b      	ldr	r3, [r7, #4]
 8004606:	4a1f      	ldr	r2, [pc, #124]	; (8004684 <TIM_OC1_SetConfig+0xdc>)
 8004608:	4293      	cmp	r3, r2
 800460a:	d10c      	bne.n	8004626 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800460c:	697b      	ldr	r3, [r7, #20]
 800460e:	f023 0308 	bic.w	r3, r3, #8
 8004612:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8004614:	683b      	ldr	r3, [r7, #0]
 8004616:	68db      	ldr	r3, [r3, #12]
 8004618:	697a      	ldr	r2, [r7, #20]
 800461a:	4313      	orrs	r3, r2
 800461c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800461e:	697b      	ldr	r3, [r7, #20]
 8004620:	f023 0304 	bic.w	r3, r3, #4
 8004624:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004626:	687b      	ldr	r3, [r7, #4]
 8004628:	4a15      	ldr	r2, [pc, #84]	; (8004680 <TIM_OC1_SetConfig+0xd8>)
 800462a:	4293      	cmp	r3, r2
 800462c:	d003      	beq.n	8004636 <TIM_OC1_SetConfig+0x8e>
 800462e:	687b      	ldr	r3, [r7, #4]
 8004630:	4a14      	ldr	r2, [pc, #80]	; (8004684 <TIM_OC1_SetConfig+0xdc>)
 8004632:	4293      	cmp	r3, r2
 8004634:	d111      	bne.n	800465a <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8004636:	693b      	ldr	r3, [r7, #16]
 8004638:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800463c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800463e:	693b      	ldr	r3, [r7, #16]
 8004640:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004644:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8004646:	683b      	ldr	r3, [r7, #0]
 8004648:	695b      	ldr	r3, [r3, #20]
 800464a:	693a      	ldr	r2, [r7, #16]
 800464c:	4313      	orrs	r3, r2
 800464e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8004650:	683b      	ldr	r3, [r7, #0]
 8004652:	699b      	ldr	r3, [r3, #24]
 8004654:	693a      	ldr	r2, [r7, #16]
 8004656:	4313      	orrs	r3, r2
 8004658:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800465a:	687b      	ldr	r3, [r7, #4]
 800465c:	693a      	ldr	r2, [r7, #16]
 800465e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004660:	687b      	ldr	r3, [r7, #4]
 8004662:	68fa      	ldr	r2, [r7, #12]
 8004664:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8004666:	683b      	ldr	r3, [r7, #0]
 8004668:	685a      	ldr	r2, [r3, #4]
 800466a:	687b      	ldr	r3, [r7, #4]
 800466c:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800466e:	687b      	ldr	r3, [r7, #4]
 8004670:	697a      	ldr	r2, [r7, #20]
 8004672:	621a      	str	r2, [r3, #32]
}
 8004674:	bf00      	nop
 8004676:	371c      	adds	r7, #28
 8004678:	46bd      	mov	sp, r7
 800467a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800467e:	4770      	bx	lr
 8004680:	40010000 	.word	0x40010000
 8004684:	40010400 	.word	0x40010400

08004688 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004688:	b480      	push	{r7}
 800468a:	b087      	sub	sp, #28
 800468c:	af00      	add	r7, sp, #0
 800468e:	6078      	str	r0, [r7, #4]
 8004690:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004692:	687b      	ldr	r3, [r7, #4]
 8004694:	6a1b      	ldr	r3, [r3, #32]
 8004696:	f023 0210 	bic.w	r2, r3, #16
 800469a:	687b      	ldr	r3, [r7, #4]
 800469c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800469e:	687b      	ldr	r3, [r7, #4]
 80046a0:	6a1b      	ldr	r3, [r3, #32]
 80046a2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80046a4:	687b      	ldr	r3, [r7, #4]
 80046a6:	685b      	ldr	r3, [r3, #4]
 80046a8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80046aa:	687b      	ldr	r3, [r7, #4]
 80046ac:	699b      	ldr	r3, [r3, #24]
 80046ae:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80046b0:	68fb      	ldr	r3, [r7, #12]
 80046b2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80046b6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80046b8:	68fb      	ldr	r3, [r7, #12]
 80046ba:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80046be:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80046c0:	683b      	ldr	r3, [r7, #0]
 80046c2:	681b      	ldr	r3, [r3, #0]
 80046c4:	021b      	lsls	r3, r3, #8
 80046c6:	68fa      	ldr	r2, [r7, #12]
 80046c8:	4313      	orrs	r3, r2
 80046ca:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80046cc:	697b      	ldr	r3, [r7, #20]
 80046ce:	f023 0320 	bic.w	r3, r3, #32
 80046d2:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80046d4:	683b      	ldr	r3, [r7, #0]
 80046d6:	689b      	ldr	r3, [r3, #8]
 80046d8:	011b      	lsls	r3, r3, #4
 80046da:	697a      	ldr	r2, [r7, #20]
 80046dc:	4313      	orrs	r3, r2
 80046de:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80046e0:	687b      	ldr	r3, [r7, #4]
 80046e2:	4a22      	ldr	r2, [pc, #136]	; (800476c <TIM_OC2_SetConfig+0xe4>)
 80046e4:	4293      	cmp	r3, r2
 80046e6:	d003      	beq.n	80046f0 <TIM_OC2_SetConfig+0x68>
 80046e8:	687b      	ldr	r3, [r7, #4]
 80046ea:	4a21      	ldr	r2, [pc, #132]	; (8004770 <TIM_OC2_SetConfig+0xe8>)
 80046ec:	4293      	cmp	r3, r2
 80046ee:	d10d      	bne.n	800470c <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80046f0:	697b      	ldr	r3, [r7, #20]
 80046f2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80046f6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80046f8:	683b      	ldr	r3, [r7, #0]
 80046fa:	68db      	ldr	r3, [r3, #12]
 80046fc:	011b      	lsls	r3, r3, #4
 80046fe:	697a      	ldr	r2, [r7, #20]
 8004700:	4313      	orrs	r3, r2
 8004702:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8004704:	697b      	ldr	r3, [r7, #20]
 8004706:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800470a:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800470c:	687b      	ldr	r3, [r7, #4]
 800470e:	4a17      	ldr	r2, [pc, #92]	; (800476c <TIM_OC2_SetConfig+0xe4>)
 8004710:	4293      	cmp	r3, r2
 8004712:	d003      	beq.n	800471c <TIM_OC2_SetConfig+0x94>
 8004714:	687b      	ldr	r3, [r7, #4]
 8004716:	4a16      	ldr	r2, [pc, #88]	; (8004770 <TIM_OC2_SetConfig+0xe8>)
 8004718:	4293      	cmp	r3, r2
 800471a:	d113      	bne.n	8004744 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800471c:	693b      	ldr	r3, [r7, #16]
 800471e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8004722:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8004724:	693b      	ldr	r3, [r7, #16]
 8004726:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800472a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800472c:	683b      	ldr	r3, [r7, #0]
 800472e:	695b      	ldr	r3, [r3, #20]
 8004730:	009b      	lsls	r3, r3, #2
 8004732:	693a      	ldr	r2, [r7, #16]
 8004734:	4313      	orrs	r3, r2
 8004736:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8004738:	683b      	ldr	r3, [r7, #0]
 800473a:	699b      	ldr	r3, [r3, #24]
 800473c:	009b      	lsls	r3, r3, #2
 800473e:	693a      	ldr	r2, [r7, #16]
 8004740:	4313      	orrs	r3, r2
 8004742:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004744:	687b      	ldr	r3, [r7, #4]
 8004746:	693a      	ldr	r2, [r7, #16]
 8004748:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800474a:	687b      	ldr	r3, [r7, #4]
 800474c:	68fa      	ldr	r2, [r7, #12]
 800474e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8004750:	683b      	ldr	r3, [r7, #0]
 8004752:	685a      	ldr	r2, [r3, #4]
 8004754:	687b      	ldr	r3, [r7, #4]
 8004756:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004758:	687b      	ldr	r3, [r7, #4]
 800475a:	697a      	ldr	r2, [r7, #20]
 800475c:	621a      	str	r2, [r3, #32]
}
 800475e:	bf00      	nop
 8004760:	371c      	adds	r7, #28
 8004762:	46bd      	mov	sp, r7
 8004764:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004768:	4770      	bx	lr
 800476a:	bf00      	nop
 800476c:	40010000 	.word	0x40010000
 8004770:	40010400 	.word	0x40010400

08004774 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004774:	b480      	push	{r7}
 8004776:	b087      	sub	sp, #28
 8004778:	af00      	add	r7, sp, #0
 800477a:	6078      	str	r0, [r7, #4]
 800477c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800477e:	687b      	ldr	r3, [r7, #4]
 8004780:	6a1b      	ldr	r3, [r3, #32]
 8004782:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8004786:	687b      	ldr	r3, [r7, #4]
 8004788:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800478a:	687b      	ldr	r3, [r7, #4]
 800478c:	6a1b      	ldr	r3, [r3, #32]
 800478e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004790:	687b      	ldr	r3, [r7, #4]
 8004792:	685b      	ldr	r3, [r3, #4]
 8004794:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004796:	687b      	ldr	r3, [r7, #4]
 8004798:	69db      	ldr	r3, [r3, #28]
 800479a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800479c:	68fb      	ldr	r3, [r7, #12]
 800479e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80047a2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80047a4:	68fb      	ldr	r3, [r7, #12]
 80047a6:	f023 0303 	bic.w	r3, r3, #3
 80047aa:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80047ac:	683b      	ldr	r3, [r7, #0]
 80047ae:	681b      	ldr	r3, [r3, #0]
 80047b0:	68fa      	ldr	r2, [r7, #12]
 80047b2:	4313      	orrs	r3, r2
 80047b4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80047b6:	697b      	ldr	r3, [r7, #20]
 80047b8:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80047bc:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80047be:	683b      	ldr	r3, [r7, #0]
 80047c0:	689b      	ldr	r3, [r3, #8]
 80047c2:	021b      	lsls	r3, r3, #8
 80047c4:	697a      	ldr	r2, [r7, #20]
 80047c6:	4313      	orrs	r3, r2
 80047c8:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80047ca:	687b      	ldr	r3, [r7, #4]
 80047cc:	4a21      	ldr	r2, [pc, #132]	; (8004854 <TIM_OC3_SetConfig+0xe0>)
 80047ce:	4293      	cmp	r3, r2
 80047d0:	d003      	beq.n	80047da <TIM_OC3_SetConfig+0x66>
 80047d2:	687b      	ldr	r3, [r7, #4]
 80047d4:	4a20      	ldr	r2, [pc, #128]	; (8004858 <TIM_OC3_SetConfig+0xe4>)
 80047d6:	4293      	cmp	r3, r2
 80047d8:	d10d      	bne.n	80047f6 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80047da:	697b      	ldr	r3, [r7, #20]
 80047dc:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80047e0:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80047e2:	683b      	ldr	r3, [r7, #0]
 80047e4:	68db      	ldr	r3, [r3, #12]
 80047e6:	021b      	lsls	r3, r3, #8
 80047e8:	697a      	ldr	r2, [r7, #20]
 80047ea:	4313      	orrs	r3, r2
 80047ec:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80047ee:	697b      	ldr	r3, [r7, #20]
 80047f0:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80047f4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80047f6:	687b      	ldr	r3, [r7, #4]
 80047f8:	4a16      	ldr	r2, [pc, #88]	; (8004854 <TIM_OC3_SetConfig+0xe0>)
 80047fa:	4293      	cmp	r3, r2
 80047fc:	d003      	beq.n	8004806 <TIM_OC3_SetConfig+0x92>
 80047fe:	687b      	ldr	r3, [r7, #4]
 8004800:	4a15      	ldr	r2, [pc, #84]	; (8004858 <TIM_OC3_SetConfig+0xe4>)
 8004802:	4293      	cmp	r3, r2
 8004804:	d113      	bne.n	800482e <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8004806:	693b      	ldr	r3, [r7, #16]
 8004808:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800480c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800480e:	693b      	ldr	r3, [r7, #16]
 8004810:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8004814:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8004816:	683b      	ldr	r3, [r7, #0]
 8004818:	695b      	ldr	r3, [r3, #20]
 800481a:	011b      	lsls	r3, r3, #4
 800481c:	693a      	ldr	r2, [r7, #16]
 800481e:	4313      	orrs	r3, r2
 8004820:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8004822:	683b      	ldr	r3, [r7, #0]
 8004824:	699b      	ldr	r3, [r3, #24]
 8004826:	011b      	lsls	r3, r3, #4
 8004828:	693a      	ldr	r2, [r7, #16]
 800482a:	4313      	orrs	r3, r2
 800482c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800482e:	687b      	ldr	r3, [r7, #4]
 8004830:	693a      	ldr	r2, [r7, #16]
 8004832:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004834:	687b      	ldr	r3, [r7, #4]
 8004836:	68fa      	ldr	r2, [r7, #12]
 8004838:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800483a:	683b      	ldr	r3, [r7, #0]
 800483c:	685a      	ldr	r2, [r3, #4]
 800483e:	687b      	ldr	r3, [r7, #4]
 8004840:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004842:	687b      	ldr	r3, [r7, #4]
 8004844:	697a      	ldr	r2, [r7, #20]
 8004846:	621a      	str	r2, [r3, #32]
}
 8004848:	bf00      	nop
 800484a:	371c      	adds	r7, #28
 800484c:	46bd      	mov	sp, r7
 800484e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004852:	4770      	bx	lr
 8004854:	40010000 	.word	0x40010000
 8004858:	40010400 	.word	0x40010400

0800485c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800485c:	b480      	push	{r7}
 800485e:	b087      	sub	sp, #28
 8004860:	af00      	add	r7, sp, #0
 8004862:	6078      	str	r0, [r7, #4]
 8004864:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8004866:	687b      	ldr	r3, [r7, #4]
 8004868:	6a1b      	ldr	r3, [r3, #32]
 800486a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800486e:	687b      	ldr	r3, [r7, #4]
 8004870:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004872:	687b      	ldr	r3, [r7, #4]
 8004874:	6a1b      	ldr	r3, [r3, #32]
 8004876:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004878:	687b      	ldr	r3, [r7, #4]
 800487a:	685b      	ldr	r3, [r3, #4]
 800487c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800487e:	687b      	ldr	r3, [r7, #4]
 8004880:	69db      	ldr	r3, [r3, #28]
 8004882:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8004884:	68fb      	ldr	r3, [r7, #12]
 8004886:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800488a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800488c:	68fb      	ldr	r3, [r7, #12]
 800488e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004892:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004894:	683b      	ldr	r3, [r7, #0]
 8004896:	681b      	ldr	r3, [r3, #0]
 8004898:	021b      	lsls	r3, r3, #8
 800489a:	68fa      	ldr	r2, [r7, #12]
 800489c:	4313      	orrs	r3, r2
 800489e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80048a0:	693b      	ldr	r3, [r7, #16]
 80048a2:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80048a6:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80048a8:	683b      	ldr	r3, [r7, #0]
 80048aa:	689b      	ldr	r3, [r3, #8]
 80048ac:	031b      	lsls	r3, r3, #12
 80048ae:	693a      	ldr	r2, [r7, #16]
 80048b0:	4313      	orrs	r3, r2
 80048b2:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80048b4:	687b      	ldr	r3, [r7, #4]
 80048b6:	4a12      	ldr	r2, [pc, #72]	; (8004900 <TIM_OC4_SetConfig+0xa4>)
 80048b8:	4293      	cmp	r3, r2
 80048ba:	d003      	beq.n	80048c4 <TIM_OC4_SetConfig+0x68>
 80048bc:	687b      	ldr	r3, [r7, #4]
 80048be:	4a11      	ldr	r2, [pc, #68]	; (8004904 <TIM_OC4_SetConfig+0xa8>)
 80048c0:	4293      	cmp	r3, r2
 80048c2:	d109      	bne.n	80048d8 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80048c4:	697b      	ldr	r3, [r7, #20]
 80048c6:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80048ca:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80048cc:	683b      	ldr	r3, [r7, #0]
 80048ce:	695b      	ldr	r3, [r3, #20]
 80048d0:	019b      	lsls	r3, r3, #6
 80048d2:	697a      	ldr	r2, [r7, #20]
 80048d4:	4313      	orrs	r3, r2
 80048d6:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80048d8:	687b      	ldr	r3, [r7, #4]
 80048da:	697a      	ldr	r2, [r7, #20]
 80048dc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80048de:	687b      	ldr	r3, [r7, #4]
 80048e0:	68fa      	ldr	r2, [r7, #12]
 80048e2:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80048e4:	683b      	ldr	r3, [r7, #0]
 80048e6:	685a      	ldr	r2, [r3, #4]
 80048e8:	687b      	ldr	r3, [r7, #4]
 80048ea:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80048ec:	687b      	ldr	r3, [r7, #4]
 80048ee:	693a      	ldr	r2, [r7, #16]
 80048f0:	621a      	str	r2, [r3, #32]
}
 80048f2:	bf00      	nop
 80048f4:	371c      	adds	r7, #28
 80048f6:	46bd      	mov	sp, r7
 80048f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048fc:	4770      	bx	lr
 80048fe:	bf00      	nop
 8004900:	40010000 	.word	0x40010000
 8004904:	40010400 	.word	0x40010400

08004908 <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 8004908:	b480      	push	{r7}
 800490a:	b087      	sub	sp, #28
 800490c:	af00      	add	r7, sp, #0
 800490e:	60f8      	str	r0, [r7, #12]
 8004910:	60b9      	str	r1, [r7, #8]
 8004912:	607a      	str	r2, [r7, #4]
 8004914:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004916:	68fb      	ldr	r3, [r7, #12]
 8004918:	6a1b      	ldr	r3, [r3, #32]
 800491a:	f023 0201 	bic.w	r2, r3, #1
 800491e:	68fb      	ldr	r3, [r7, #12]
 8004920:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004922:	68fb      	ldr	r3, [r7, #12]
 8004924:	699b      	ldr	r3, [r3, #24]
 8004926:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8004928:	68fb      	ldr	r3, [r7, #12]
 800492a:	6a1b      	ldr	r3, [r3, #32]
 800492c:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 800492e:	68fb      	ldr	r3, [r7, #12]
 8004930:	4a28      	ldr	r2, [pc, #160]	; (80049d4 <TIM_TI1_SetConfig+0xcc>)
 8004932:	4293      	cmp	r3, r2
 8004934:	d01b      	beq.n	800496e <TIM_TI1_SetConfig+0x66>
 8004936:	68fb      	ldr	r3, [r7, #12]
 8004938:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800493c:	d017      	beq.n	800496e <TIM_TI1_SetConfig+0x66>
 800493e:	68fb      	ldr	r3, [r7, #12]
 8004940:	4a25      	ldr	r2, [pc, #148]	; (80049d8 <TIM_TI1_SetConfig+0xd0>)
 8004942:	4293      	cmp	r3, r2
 8004944:	d013      	beq.n	800496e <TIM_TI1_SetConfig+0x66>
 8004946:	68fb      	ldr	r3, [r7, #12]
 8004948:	4a24      	ldr	r2, [pc, #144]	; (80049dc <TIM_TI1_SetConfig+0xd4>)
 800494a:	4293      	cmp	r3, r2
 800494c:	d00f      	beq.n	800496e <TIM_TI1_SetConfig+0x66>
 800494e:	68fb      	ldr	r3, [r7, #12]
 8004950:	4a23      	ldr	r2, [pc, #140]	; (80049e0 <TIM_TI1_SetConfig+0xd8>)
 8004952:	4293      	cmp	r3, r2
 8004954:	d00b      	beq.n	800496e <TIM_TI1_SetConfig+0x66>
 8004956:	68fb      	ldr	r3, [r7, #12]
 8004958:	4a22      	ldr	r2, [pc, #136]	; (80049e4 <TIM_TI1_SetConfig+0xdc>)
 800495a:	4293      	cmp	r3, r2
 800495c:	d007      	beq.n	800496e <TIM_TI1_SetConfig+0x66>
 800495e:	68fb      	ldr	r3, [r7, #12]
 8004960:	4a21      	ldr	r2, [pc, #132]	; (80049e8 <TIM_TI1_SetConfig+0xe0>)
 8004962:	4293      	cmp	r3, r2
 8004964:	d003      	beq.n	800496e <TIM_TI1_SetConfig+0x66>
 8004966:	68fb      	ldr	r3, [r7, #12]
 8004968:	4a20      	ldr	r2, [pc, #128]	; (80049ec <TIM_TI1_SetConfig+0xe4>)
 800496a:	4293      	cmp	r3, r2
 800496c:	d101      	bne.n	8004972 <TIM_TI1_SetConfig+0x6a>
 800496e:	2301      	movs	r3, #1
 8004970:	e000      	b.n	8004974 <TIM_TI1_SetConfig+0x6c>
 8004972:	2300      	movs	r3, #0
 8004974:	2b00      	cmp	r3, #0
 8004976:	d008      	beq.n	800498a <TIM_TI1_SetConfig+0x82>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 8004978:	697b      	ldr	r3, [r7, #20]
 800497a:	f023 0303 	bic.w	r3, r3, #3
 800497e:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 8004980:	697a      	ldr	r2, [r7, #20]
 8004982:	687b      	ldr	r3, [r7, #4]
 8004984:	4313      	orrs	r3, r2
 8004986:	617b      	str	r3, [r7, #20]
 8004988:	e003      	b.n	8004992 <TIM_TI1_SetConfig+0x8a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 800498a:	697b      	ldr	r3, [r7, #20]
 800498c:	f043 0301 	orr.w	r3, r3, #1
 8004990:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004992:	697b      	ldr	r3, [r7, #20]
 8004994:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004998:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 800499a:	683b      	ldr	r3, [r7, #0]
 800499c:	011b      	lsls	r3, r3, #4
 800499e:	b2db      	uxtb	r3, r3
 80049a0:	697a      	ldr	r2, [r7, #20]
 80049a2:	4313      	orrs	r3, r2
 80049a4:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80049a6:	693b      	ldr	r3, [r7, #16]
 80049a8:	f023 030a 	bic.w	r3, r3, #10
 80049ac:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 80049ae:	68bb      	ldr	r3, [r7, #8]
 80049b0:	f003 030a 	and.w	r3, r3, #10
 80049b4:	693a      	ldr	r2, [r7, #16]
 80049b6:	4313      	orrs	r3, r2
 80049b8:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80049ba:	68fb      	ldr	r3, [r7, #12]
 80049bc:	697a      	ldr	r2, [r7, #20]
 80049be:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80049c0:	68fb      	ldr	r3, [r7, #12]
 80049c2:	693a      	ldr	r2, [r7, #16]
 80049c4:	621a      	str	r2, [r3, #32]
}
 80049c6:	bf00      	nop
 80049c8:	371c      	adds	r7, #28
 80049ca:	46bd      	mov	sp, r7
 80049cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049d0:	4770      	bx	lr
 80049d2:	bf00      	nop
 80049d4:	40010000 	.word	0x40010000
 80049d8:	40000400 	.word	0x40000400
 80049dc:	40000800 	.word	0x40000800
 80049e0:	40000c00 	.word	0x40000c00
 80049e4:	40010400 	.word	0x40010400
 80049e8:	40014000 	.word	0x40014000
 80049ec:	40001800 	.word	0x40001800

080049f0 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80049f0:	b480      	push	{r7}
 80049f2:	b087      	sub	sp, #28
 80049f4:	af00      	add	r7, sp, #0
 80049f6:	60f8      	str	r0, [r7, #12]
 80049f8:	60b9      	str	r1, [r7, #8]
 80049fa:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80049fc:	68fb      	ldr	r3, [r7, #12]
 80049fe:	6a1b      	ldr	r3, [r3, #32]
 8004a00:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004a02:	68fb      	ldr	r3, [r7, #12]
 8004a04:	6a1b      	ldr	r3, [r3, #32]
 8004a06:	f023 0201 	bic.w	r2, r3, #1
 8004a0a:	68fb      	ldr	r3, [r7, #12]
 8004a0c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004a0e:	68fb      	ldr	r3, [r7, #12]
 8004a10:	699b      	ldr	r3, [r3, #24]
 8004a12:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004a14:	693b      	ldr	r3, [r7, #16]
 8004a16:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004a1a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8004a1c:	687b      	ldr	r3, [r7, #4]
 8004a1e:	011b      	lsls	r3, r3, #4
 8004a20:	693a      	ldr	r2, [r7, #16]
 8004a22:	4313      	orrs	r3, r2
 8004a24:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004a26:	697b      	ldr	r3, [r7, #20]
 8004a28:	f023 030a 	bic.w	r3, r3, #10
 8004a2c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8004a2e:	697a      	ldr	r2, [r7, #20]
 8004a30:	68bb      	ldr	r3, [r7, #8]
 8004a32:	4313      	orrs	r3, r2
 8004a34:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8004a36:	68fb      	ldr	r3, [r7, #12]
 8004a38:	693a      	ldr	r2, [r7, #16]
 8004a3a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004a3c:	68fb      	ldr	r3, [r7, #12]
 8004a3e:	697a      	ldr	r2, [r7, #20]
 8004a40:	621a      	str	r2, [r3, #32]
}
 8004a42:	bf00      	nop
 8004a44:	371c      	adds	r7, #28
 8004a46:	46bd      	mov	sp, r7
 8004a48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a4c:	4770      	bx	lr

08004a4e <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8004a4e:	b480      	push	{r7}
 8004a50:	b087      	sub	sp, #28
 8004a52:	af00      	add	r7, sp, #0
 8004a54:	60f8      	str	r0, [r7, #12]
 8004a56:	60b9      	str	r1, [r7, #8]
 8004a58:	607a      	str	r2, [r7, #4]
 8004a5a:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004a5c:	68fb      	ldr	r3, [r7, #12]
 8004a5e:	6a1b      	ldr	r3, [r3, #32]
 8004a60:	f023 0210 	bic.w	r2, r3, #16
 8004a64:	68fb      	ldr	r3, [r7, #12]
 8004a66:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004a68:	68fb      	ldr	r3, [r7, #12]
 8004a6a:	699b      	ldr	r3, [r3, #24]
 8004a6c:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8004a6e:	68fb      	ldr	r3, [r7, #12]
 8004a70:	6a1b      	ldr	r3, [r3, #32]
 8004a72:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 8004a74:	697b      	ldr	r3, [r7, #20]
 8004a76:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004a7a:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 8004a7c:	687b      	ldr	r3, [r7, #4]
 8004a7e:	021b      	lsls	r3, r3, #8
 8004a80:	697a      	ldr	r2, [r7, #20]
 8004a82:	4313      	orrs	r3, r2
 8004a84:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8004a86:	697b      	ldr	r3, [r7, #20]
 8004a88:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8004a8c:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 8004a8e:	683b      	ldr	r3, [r7, #0]
 8004a90:	031b      	lsls	r3, r3, #12
 8004a92:	b29b      	uxth	r3, r3
 8004a94:	697a      	ldr	r2, [r7, #20]
 8004a96:	4313      	orrs	r3, r2
 8004a98:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004a9a:	693b      	ldr	r3, [r7, #16]
 8004a9c:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8004aa0:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 8004aa2:	68bb      	ldr	r3, [r7, #8]
 8004aa4:	011b      	lsls	r3, r3, #4
 8004aa6:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 8004aaa:	693a      	ldr	r2, [r7, #16]
 8004aac:	4313      	orrs	r3, r2
 8004aae:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8004ab0:	68fb      	ldr	r3, [r7, #12]
 8004ab2:	697a      	ldr	r2, [r7, #20]
 8004ab4:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004ab6:	68fb      	ldr	r3, [r7, #12]
 8004ab8:	693a      	ldr	r2, [r7, #16]
 8004aba:	621a      	str	r2, [r3, #32]
}
 8004abc:	bf00      	nop
 8004abe:	371c      	adds	r7, #28
 8004ac0:	46bd      	mov	sp, r7
 8004ac2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ac6:	4770      	bx	lr

08004ac8 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004ac8:	b480      	push	{r7}
 8004aca:	b087      	sub	sp, #28
 8004acc:	af00      	add	r7, sp, #0
 8004ace:	60f8      	str	r0, [r7, #12]
 8004ad0:	60b9      	str	r1, [r7, #8]
 8004ad2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004ad4:	68fb      	ldr	r3, [r7, #12]
 8004ad6:	6a1b      	ldr	r3, [r3, #32]
 8004ad8:	f023 0210 	bic.w	r2, r3, #16
 8004adc:	68fb      	ldr	r3, [r7, #12]
 8004ade:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004ae0:	68fb      	ldr	r3, [r7, #12]
 8004ae2:	699b      	ldr	r3, [r3, #24]
 8004ae4:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8004ae6:	68fb      	ldr	r3, [r7, #12]
 8004ae8:	6a1b      	ldr	r3, [r3, #32]
 8004aea:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8004aec:	697b      	ldr	r3, [r7, #20]
 8004aee:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8004af2:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8004af4:	687b      	ldr	r3, [r7, #4]
 8004af6:	031b      	lsls	r3, r3, #12
 8004af8:	697a      	ldr	r2, [r7, #20]
 8004afa:	4313      	orrs	r3, r2
 8004afc:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004afe:	693b      	ldr	r3, [r7, #16]
 8004b00:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8004b04:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8004b06:	68bb      	ldr	r3, [r7, #8]
 8004b08:	011b      	lsls	r3, r3, #4
 8004b0a:	693a      	ldr	r2, [r7, #16]
 8004b0c:	4313      	orrs	r3, r2
 8004b0e:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8004b10:	68fb      	ldr	r3, [r7, #12]
 8004b12:	697a      	ldr	r2, [r7, #20]
 8004b14:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004b16:	68fb      	ldr	r3, [r7, #12]
 8004b18:	693a      	ldr	r2, [r7, #16]
 8004b1a:	621a      	str	r2, [r3, #32]
}
 8004b1c:	bf00      	nop
 8004b1e:	371c      	adds	r7, #28
 8004b20:	46bd      	mov	sp, r7
 8004b22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b26:	4770      	bx	lr

08004b28 <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8004b28:	b480      	push	{r7}
 8004b2a:	b087      	sub	sp, #28
 8004b2c:	af00      	add	r7, sp, #0
 8004b2e:	60f8      	str	r0, [r7, #12]
 8004b30:	60b9      	str	r1, [r7, #8]
 8004b32:	607a      	str	r2, [r7, #4]
 8004b34:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8004b36:	68fb      	ldr	r3, [r7, #12]
 8004b38:	6a1b      	ldr	r3, [r3, #32]
 8004b3a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8004b3e:	68fb      	ldr	r3, [r7, #12]
 8004b40:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8004b42:	68fb      	ldr	r3, [r7, #12]
 8004b44:	69db      	ldr	r3, [r3, #28]
 8004b46:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8004b48:	68fb      	ldr	r3, [r7, #12]
 8004b4a:	6a1b      	ldr	r3, [r3, #32]
 8004b4c:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 8004b4e:	697b      	ldr	r3, [r7, #20]
 8004b50:	f023 0303 	bic.w	r3, r3, #3
 8004b54:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= TIM_ICSelection;
 8004b56:	697a      	ldr	r2, [r7, #20]
 8004b58:	687b      	ldr	r3, [r7, #4]
 8004b5a:	4313      	orrs	r3, r2
 8004b5c:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 8004b5e:	697b      	ldr	r3, [r7, #20]
 8004b60:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004b64:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 8004b66:	683b      	ldr	r3, [r7, #0]
 8004b68:	011b      	lsls	r3, r3, #4
 8004b6a:	b2db      	uxtb	r3, r3
 8004b6c:	697a      	ldr	r2, [r7, #20]
 8004b6e:	4313      	orrs	r3, r2
 8004b70:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 8004b72:	693b      	ldr	r3, [r7, #16]
 8004b74:	f423 6320 	bic.w	r3, r3, #2560	; 0xa00
 8004b78:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 8004b7a:	68bb      	ldr	r3, [r7, #8]
 8004b7c:	021b      	lsls	r3, r3, #8
 8004b7e:	f403 6320 	and.w	r3, r3, #2560	; 0xa00
 8004b82:	693a      	ldr	r2, [r7, #16]
 8004b84:	4313      	orrs	r3, r2
 8004b86:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8004b88:	68fb      	ldr	r3, [r7, #12]
 8004b8a:	697a      	ldr	r2, [r7, #20]
 8004b8c:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 8004b8e:	68fb      	ldr	r3, [r7, #12]
 8004b90:	693a      	ldr	r2, [r7, #16]
 8004b92:	621a      	str	r2, [r3, #32]
}
 8004b94:	bf00      	nop
 8004b96:	371c      	adds	r7, #28
 8004b98:	46bd      	mov	sp, r7
 8004b9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b9e:	4770      	bx	lr

08004ba0 <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8004ba0:	b480      	push	{r7}
 8004ba2:	b087      	sub	sp, #28
 8004ba4:	af00      	add	r7, sp, #0
 8004ba6:	60f8      	str	r0, [r7, #12]
 8004ba8:	60b9      	str	r1, [r7, #8]
 8004baa:	607a      	str	r2, [r7, #4]
 8004bac:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8004bae:	68fb      	ldr	r3, [r7, #12]
 8004bb0:	6a1b      	ldr	r3, [r3, #32]
 8004bb2:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8004bb6:	68fb      	ldr	r3, [r7, #12]
 8004bb8:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8004bba:	68fb      	ldr	r3, [r7, #12]
 8004bbc:	69db      	ldr	r3, [r3, #28]
 8004bbe:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8004bc0:	68fb      	ldr	r3, [r7, #12]
 8004bc2:	6a1b      	ldr	r3, [r3, #32]
 8004bc4:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 8004bc6:	697b      	ldr	r3, [r7, #20]
 8004bc8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004bcc:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 8004bce:	687b      	ldr	r3, [r7, #4]
 8004bd0:	021b      	lsls	r3, r3, #8
 8004bd2:	697a      	ldr	r2, [r7, #20]
 8004bd4:	4313      	orrs	r3, r2
 8004bd6:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 8004bd8:	697b      	ldr	r3, [r7, #20]
 8004bda:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8004bde:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 8004be0:	683b      	ldr	r3, [r7, #0]
 8004be2:	031b      	lsls	r3, r3, #12
 8004be4:	b29b      	uxth	r3, r3
 8004be6:	697a      	ldr	r2, [r7, #20]
 8004be8:	4313      	orrs	r3, r2
 8004bea:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 8004bec:	693b      	ldr	r3, [r7, #16]
 8004bee:	f423 4320 	bic.w	r3, r3, #40960	; 0xa000
 8004bf2:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 8004bf4:	68bb      	ldr	r3, [r7, #8]
 8004bf6:	031b      	lsls	r3, r3, #12
 8004bf8:	f403 4320 	and.w	r3, r3, #40960	; 0xa000
 8004bfc:	693a      	ldr	r2, [r7, #16]
 8004bfe:	4313      	orrs	r3, r2
 8004c00:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8004c02:	68fb      	ldr	r3, [r7, #12]
 8004c04:	697a      	ldr	r2, [r7, #20]
 8004c06:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 8004c08:	68fb      	ldr	r3, [r7, #12]
 8004c0a:	693a      	ldr	r2, [r7, #16]
 8004c0c:	621a      	str	r2, [r3, #32]
}
 8004c0e:	bf00      	nop
 8004c10:	371c      	adds	r7, #28
 8004c12:	46bd      	mov	sp, r7
 8004c14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c18:	4770      	bx	lr

08004c1a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8004c1a:	b480      	push	{r7}
 8004c1c:	b085      	sub	sp, #20
 8004c1e:	af00      	add	r7, sp, #0
 8004c20:	6078      	str	r0, [r7, #4]
 8004c22:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8004c24:	687b      	ldr	r3, [r7, #4]
 8004c26:	689b      	ldr	r3, [r3, #8]
 8004c28:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8004c2a:	68fb      	ldr	r3, [r7, #12]
 8004c2c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004c30:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8004c32:	683a      	ldr	r2, [r7, #0]
 8004c34:	68fb      	ldr	r3, [r7, #12]
 8004c36:	4313      	orrs	r3, r2
 8004c38:	f043 0307 	orr.w	r3, r3, #7
 8004c3c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004c3e:	687b      	ldr	r3, [r7, #4]
 8004c40:	68fa      	ldr	r2, [r7, #12]
 8004c42:	609a      	str	r2, [r3, #8]
}
 8004c44:	bf00      	nop
 8004c46:	3714      	adds	r7, #20
 8004c48:	46bd      	mov	sp, r7
 8004c4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c4e:	4770      	bx	lr

08004c50 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8004c50:	b480      	push	{r7}
 8004c52:	b087      	sub	sp, #28
 8004c54:	af00      	add	r7, sp, #0
 8004c56:	60f8      	str	r0, [r7, #12]
 8004c58:	60b9      	str	r1, [r7, #8]
 8004c5a:	607a      	str	r2, [r7, #4]
 8004c5c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8004c5e:	68fb      	ldr	r3, [r7, #12]
 8004c60:	689b      	ldr	r3, [r3, #8]
 8004c62:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004c64:	697b      	ldr	r3, [r7, #20]
 8004c66:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004c6a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004c6c:	683b      	ldr	r3, [r7, #0]
 8004c6e:	021a      	lsls	r2, r3, #8
 8004c70:	687b      	ldr	r3, [r7, #4]
 8004c72:	431a      	orrs	r2, r3
 8004c74:	68bb      	ldr	r3, [r7, #8]
 8004c76:	4313      	orrs	r3, r2
 8004c78:	697a      	ldr	r2, [r7, #20]
 8004c7a:	4313      	orrs	r3, r2
 8004c7c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004c7e:	68fb      	ldr	r3, [r7, #12]
 8004c80:	697a      	ldr	r2, [r7, #20]
 8004c82:	609a      	str	r2, [r3, #8]
}
 8004c84:	bf00      	nop
 8004c86:	371c      	adds	r7, #28
 8004c88:	46bd      	mov	sp, r7
 8004c8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c8e:	4770      	bx	lr

08004c90 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8004c90:	b480      	push	{r7}
 8004c92:	b087      	sub	sp, #28
 8004c94:	af00      	add	r7, sp, #0
 8004c96:	60f8      	str	r0, [r7, #12]
 8004c98:	60b9      	str	r1, [r7, #8]
 8004c9a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8004c9c:	68bb      	ldr	r3, [r7, #8]
 8004c9e:	f003 031f 	and.w	r3, r3, #31
 8004ca2:	2201      	movs	r2, #1
 8004ca4:	fa02 f303 	lsl.w	r3, r2, r3
 8004ca8:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8004caa:	68fb      	ldr	r3, [r7, #12]
 8004cac:	6a1a      	ldr	r2, [r3, #32]
 8004cae:	697b      	ldr	r3, [r7, #20]
 8004cb0:	43db      	mvns	r3, r3
 8004cb2:	401a      	ands	r2, r3
 8004cb4:	68fb      	ldr	r3, [r7, #12]
 8004cb6:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8004cb8:	68fb      	ldr	r3, [r7, #12]
 8004cba:	6a1a      	ldr	r2, [r3, #32]
 8004cbc:	68bb      	ldr	r3, [r7, #8]
 8004cbe:	f003 031f 	and.w	r3, r3, #31
 8004cc2:	6879      	ldr	r1, [r7, #4]
 8004cc4:	fa01 f303 	lsl.w	r3, r1, r3
 8004cc8:	431a      	orrs	r2, r3
 8004cca:	68fb      	ldr	r3, [r7, #12]
 8004ccc:	621a      	str	r2, [r3, #32]
}
 8004cce:	bf00      	nop
 8004cd0:	371c      	adds	r7, #28
 8004cd2:	46bd      	mov	sp, r7
 8004cd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cd8:	4770      	bx	lr
	...

08004cdc <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004cdc:	b480      	push	{r7}
 8004cde:	b085      	sub	sp, #20
 8004ce0:	af00      	add	r7, sp, #0
 8004ce2:	6078      	str	r0, [r7, #4]
 8004ce4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004ce6:	687b      	ldr	r3, [r7, #4]
 8004ce8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004cec:	2b01      	cmp	r3, #1
 8004cee:	d101      	bne.n	8004cf4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004cf0:	2302      	movs	r3, #2
 8004cf2:	e05a      	b.n	8004daa <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8004cf4:	687b      	ldr	r3, [r7, #4]
 8004cf6:	2201      	movs	r2, #1
 8004cf8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004cfc:	687b      	ldr	r3, [r7, #4]
 8004cfe:	2202      	movs	r2, #2
 8004d00:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004d04:	687b      	ldr	r3, [r7, #4]
 8004d06:	681b      	ldr	r3, [r3, #0]
 8004d08:	685b      	ldr	r3, [r3, #4]
 8004d0a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004d0c:	687b      	ldr	r3, [r7, #4]
 8004d0e:	681b      	ldr	r3, [r3, #0]
 8004d10:	689b      	ldr	r3, [r3, #8]
 8004d12:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004d14:	68fb      	ldr	r3, [r7, #12]
 8004d16:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004d1a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004d1c:	683b      	ldr	r3, [r7, #0]
 8004d1e:	681b      	ldr	r3, [r3, #0]
 8004d20:	68fa      	ldr	r2, [r7, #12]
 8004d22:	4313      	orrs	r3, r2
 8004d24:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004d26:	687b      	ldr	r3, [r7, #4]
 8004d28:	681b      	ldr	r3, [r3, #0]
 8004d2a:	68fa      	ldr	r2, [r7, #12]
 8004d2c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004d2e:	687b      	ldr	r3, [r7, #4]
 8004d30:	681b      	ldr	r3, [r3, #0]
 8004d32:	4a21      	ldr	r2, [pc, #132]	; (8004db8 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8004d34:	4293      	cmp	r3, r2
 8004d36:	d022      	beq.n	8004d7e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004d38:	687b      	ldr	r3, [r7, #4]
 8004d3a:	681b      	ldr	r3, [r3, #0]
 8004d3c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004d40:	d01d      	beq.n	8004d7e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004d42:	687b      	ldr	r3, [r7, #4]
 8004d44:	681b      	ldr	r3, [r3, #0]
 8004d46:	4a1d      	ldr	r2, [pc, #116]	; (8004dbc <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8004d48:	4293      	cmp	r3, r2
 8004d4a:	d018      	beq.n	8004d7e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004d4c:	687b      	ldr	r3, [r7, #4]
 8004d4e:	681b      	ldr	r3, [r3, #0]
 8004d50:	4a1b      	ldr	r2, [pc, #108]	; (8004dc0 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8004d52:	4293      	cmp	r3, r2
 8004d54:	d013      	beq.n	8004d7e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004d56:	687b      	ldr	r3, [r7, #4]
 8004d58:	681b      	ldr	r3, [r3, #0]
 8004d5a:	4a1a      	ldr	r2, [pc, #104]	; (8004dc4 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8004d5c:	4293      	cmp	r3, r2
 8004d5e:	d00e      	beq.n	8004d7e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004d60:	687b      	ldr	r3, [r7, #4]
 8004d62:	681b      	ldr	r3, [r3, #0]
 8004d64:	4a18      	ldr	r2, [pc, #96]	; (8004dc8 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8004d66:	4293      	cmp	r3, r2
 8004d68:	d009      	beq.n	8004d7e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004d6a:	687b      	ldr	r3, [r7, #4]
 8004d6c:	681b      	ldr	r3, [r3, #0]
 8004d6e:	4a17      	ldr	r2, [pc, #92]	; (8004dcc <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8004d70:	4293      	cmp	r3, r2
 8004d72:	d004      	beq.n	8004d7e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004d74:	687b      	ldr	r3, [r7, #4]
 8004d76:	681b      	ldr	r3, [r3, #0]
 8004d78:	4a15      	ldr	r2, [pc, #84]	; (8004dd0 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8004d7a:	4293      	cmp	r3, r2
 8004d7c:	d10c      	bne.n	8004d98 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004d7e:	68bb      	ldr	r3, [r7, #8]
 8004d80:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004d84:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004d86:	683b      	ldr	r3, [r7, #0]
 8004d88:	685b      	ldr	r3, [r3, #4]
 8004d8a:	68ba      	ldr	r2, [r7, #8]
 8004d8c:	4313      	orrs	r3, r2
 8004d8e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004d90:	687b      	ldr	r3, [r7, #4]
 8004d92:	681b      	ldr	r3, [r3, #0]
 8004d94:	68ba      	ldr	r2, [r7, #8]
 8004d96:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004d98:	687b      	ldr	r3, [r7, #4]
 8004d9a:	2201      	movs	r2, #1
 8004d9c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004da0:	687b      	ldr	r3, [r7, #4]
 8004da2:	2200      	movs	r2, #0
 8004da4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004da8:	2300      	movs	r3, #0
}
 8004daa:	4618      	mov	r0, r3
 8004dac:	3714      	adds	r7, #20
 8004dae:	46bd      	mov	sp, r7
 8004db0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004db4:	4770      	bx	lr
 8004db6:	bf00      	nop
 8004db8:	40010000 	.word	0x40010000
 8004dbc:	40000400 	.word	0x40000400
 8004dc0:	40000800 	.word	0x40000800
 8004dc4:	40000c00 	.word	0x40000c00
 8004dc8:	40010400 	.word	0x40010400
 8004dcc:	40014000 	.word	0x40014000
 8004dd0:	40001800 	.word	0x40001800

08004dd4 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8004dd4:	b480      	push	{r7}
 8004dd6:	b085      	sub	sp, #20
 8004dd8:	af00      	add	r7, sp, #0
 8004dda:	6078      	str	r0, [r7, #4]
 8004ddc:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8004dde:	2300      	movs	r3, #0
 8004de0:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8004de2:	687b      	ldr	r3, [r7, #4]
 8004de4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004de8:	2b01      	cmp	r3, #1
 8004dea:	d101      	bne.n	8004df0 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8004dec:	2302      	movs	r3, #2
 8004dee:	e03d      	b.n	8004e6c <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 8004df0:	687b      	ldr	r3, [r7, #4]
 8004df2:	2201      	movs	r2, #1
 8004df4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8004df8:	68fb      	ldr	r3, [r7, #12]
 8004dfa:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8004dfe:	683b      	ldr	r3, [r7, #0]
 8004e00:	68db      	ldr	r3, [r3, #12]
 8004e02:	4313      	orrs	r3, r2
 8004e04:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8004e06:	68fb      	ldr	r3, [r7, #12]
 8004e08:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004e0c:	683b      	ldr	r3, [r7, #0]
 8004e0e:	689b      	ldr	r3, [r3, #8]
 8004e10:	4313      	orrs	r3, r2
 8004e12:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8004e14:	68fb      	ldr	r3, [r7, #12]
 8004e16:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8004e1a:	683b      	ldr	r3, [r7, #0]
 8004e1c:	685b      	ldr	r3, [r3, #4]
 8004e1e:	4313      	orrs	r3, r2
 8004e20:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8004e22:	68fb      	ldr	r3, [r7, #12]
 8004e24:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8004e28:	683b      	ldr	r3, [r7, #0]
 8004e2a:	681b      	ldr	r3, [r3, #0]
 8004e2c:	4313      	orrs	r3, r2
 8004e2e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8004e30:	68fb      	ldr	r3, [r7, #12]
 8004e32:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8004e36:	683b      	ldr	r3, [r7, #0]
 8004e38:	691b      	ldr	r3, [r3, #16]
 8004e3a:	4313      	orrs	r3, r2
 8004e3c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8004e3e:	68fb      	ldr	r3, [r7, #12]
 8004e40:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8004e44:	683b      	ldr	r3, [r7, #0]
 8004e46:	695b      	ldr	r3, [r3, #20]
 8004e48:	4313      	orrs	r3, r2
 8004e4a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8004e4c:	68fb      	ldr	r3, [r7, #12]
 8004e4e:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8004e52:	683b      	ldr	r3, [r7, #0]
 8004e54:	69db      	ldr	r3, [r3, #28]
 8004e56:	4313      	orrs	r3, r2
 8004e58:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8004e5a:	687b      	ldr	r3, [r7, #4]
 8004e5c:	681b      	ldr	r3, [r3, #0]
 8004e5e:	68fa      	ldr	r2, [r7, #12]
 8004e60:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8004e62:	687b      	ldr	r3, [r7, #4]
 8004e64:	2200      	movs	r2, #0
 8004e66:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004e6a:	2300      	movs	r3, #0
}
 8004e6c:	4618      	mov	r0, r3
 8004e6e:	3714      	adds	r7, #20
 8004e70:	46bd      	mov	sp, r7
 8004e72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e76:	4770      	bx	lr

08004e78 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004e78:	b480      	push	{r7}
 8004e7a:	b083      	sub	sp, #12
 8004e7c:	af00      	add	r7, sp, #0
 8004e7e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004e80:	bf00      	nop
 8004e82:	370c      	adds	r7, #12
 8004e84:	46bd      	mov	sp, r7
 8004e86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e8a:	4770      	bx	lr

08004e8c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8004e8c:	b480      	push	{r7}
 8004e8e:	b083      	sub	sp, #12
 8004e90:	af00      	add	r7, sp, #0
 8004e92:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004e94:	bf00      	nop
 8004e96:	370c      	adds	r7, #12
 8004e98:	46bd      	mov	sp, r7
 8004e9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e9e:	4770      	bx	lr

08004ea0 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004ea0:	b580      	push	{r7, lr}
 8004ea2:	b082      	sub	sp, #8
 8004ea4:	af00      	add	r7, sp, #0
 8004ea6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004ea8:	687b      	ldr	r3, [r7, #4]
 8004eaa:	2b00      	cmp	r3, #0
 8004eac:	d101      	bne.n	8004eb2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004eae:	2301      	movs	r3, #1
 8004eb0:	e03f      	b.n	8004f32 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8004eb2:	687b      	ldr	r3, [r7, #4]
 8004eb4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004eb8:	b2db      	uxtb	r3, r3
 8004eba:	2b00      	cmp	r3, #0
 8004ebc:	d106      	bne.n	8004ecc <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004ebe:	687b      	ldr	r3, [r7, #4]
 8004ec0:	2200      	movs	r2, #0
 8004ec2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004ec6:	6878      	ldr	r0, [r7, #4]
 8004ec8:	f7fd f9a4 	bl	8002214 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004ecc:	687b      	ldr	r3, [r7, #4]
 8004ece:	2224      	movs	r2, #36	; 0x24
 8004ed0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8004ed4:	687b      	ldr	r3, [r7, #4]
 8004ed6:	681b      	ldr	r3, [r3, #0]
 8004ed8:	68da      	ldr	r2, [r3, #12]
 8004eda:	687b      	ldr	r3, [r7, #4]
 8004edc:	681b      	ldr	r3, [r3, #0]
 8004ede:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004ee2:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8004ee4:	6878      	ldr	r0, [r7, #4]
 8004ee6:	f000 f929 	bl	800513c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004eea:	687b      	ldr	r3, [r7, #4]
 8004eec:	681b      	ldr	r3, [r3, #0]
 8004eee:	691a      	ldr	r2, [r3, #16]
 8004ef0:	687b      	ldr	r3, [r7, #4]
 8004ef2:	681b      	ldr	r3, [r3, #0]
 8004ef4:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004ef8:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004efa:	687b      	ldr	r3, [r7, #4]
 8004efc:	681b      	ldr	r3, [r3, #0]
 8004efe:	695a      	ldr	r2, [r3, #20]
 8004f00:	687b      	ldr	r3, [r7, #4]
 8004f02:	681b      	ldr	r3, [r3, #0]
 8004f04:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004f08:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8004f0a:	687b      	ldr	r3, [r7, #4]
 8004f0c:	681b      	ldr	r3, [r3, #0]
 8004f0e:	68da      	ldr	r2, [r3, #12]
 8004f10:	687b      	ldr	r3, [r7, #4]
 8004f12:	681b      	ldr	r3, [r3, #0]
 8004f14:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004f18:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004f1a:	687b      	ldr	r3, [r7, #4]
 8004f1c:	2200      	movs	r2, #0
 8004f1e:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8004f20:	687b      	ldr	r3, [r7, #4]
 8004f22:	2220      	movs	r2, #32
 8004f24:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8004f28:	687b      	ldr	r3, [r7, #4]
 8004f2a:	2220      	movs	r2, #32
 8004f2c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8004f30:	2300      	movs	r3, #0
}
 8004f32:	4618      	mov	r0, r3
 8004f34:	3708      	adds	r7, #8
 8004f36:	46bd      	mov	sp, r7
 8004f38:	bd80      	pop	{r7, pc}

08004f3a <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004f3a:	b580      	push	{r7, lr}
 8004f3c:	b08a      	sub	sp, #40	; 0x28
 8004f3e:	af02      	add	r7, sp, #8
 8004f40:	60f8      	str	r0, [r7, #12]
 8004f42:	60b9      	str	r1, [r7, #8]
 8004f44:	603b      	str	r3, [r7, #0]
 8004f46:	4613      	mov	r3, r2
 8004f48:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8004f4a:	2300      	movs	r3, #0
 8004f4c:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004f4e:	68fb      	ldr	r3, [r7, #12]
 8004f50:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004f54:	b2db      	uxtb	r3, r3
 8004f56:	2b20      	cmp	r3, #32
 8004f58:	d17c      	bne.n	8005054 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8004f5a:	68bb      	ldr	r3, [r7, #8]
 8004f5c:	2b00      	cmp	r3, #0
 8004f5e:	d002      	beq.n	8004f66 <HAL_UART_Transmit+0x2c>
 8004f60:	88fb      	ldrh	r3, [r7, #6]
 8004f62:	2b00      	cmp	r3, #0
 8004f64:	d101      	bne.n	8004f6a <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8004f66:	2301      	movs	r3, #1
 8004f68:	e075      	b.n	8005056 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8004f6a:	68fb      	ldr	r3, [r7, #12]
 8004f6c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004f70:	2b01      	cmp	r3, #1
 8004f72:	d101      	bne.n	8004f78 <HAL_UART_Transmit+0x3e>
 8004f74:	2302      	movs	r3, #2
 8004f76:	e06e      	b.n	8005056 <HAL_UART_Transmit+0x11c>
 8004f78:	68fb      	ldr	r3, [r7, #12]
 8004f7a:	2201      	movs	r2, #1
 8004f7c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004f80:	68fb      	ldr	r3, [r7, #12]
 8004f82:	2200      	movs	r2, #0
 8004f84:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004f86:	68fb      	ldr	r3, [r7, #12]
 8004f88:	2221      	movs	r2, #33	; 0x21
 8004f8a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8004f8e:	f7fd fb27 	bl	80025e0 <HAL_GetTick>
 8004f92:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8004f94:	68fb      	ldr	r3, [r7, #12]
 8004f96:	88fa      	ldrh	r2, [r7, #6]
 8004f98:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8004f9a:	68fb      	ldr	r3, [r7, #12]
 8004f9c:	88fa      	ldrh	r2, [r7, #6]
 8004f9e:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004fa0:	68fb      	ldr	r3, [r7, #12]
 8004fa2:	689b      	ldr	r3, [r3, #8]
 8004fa4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004fa8:	d108      	bne.n	8004fbc <HAL_UART_Transmit+0x82>
 8004faa:	68fb      	ldr	r3, [r7, #12]
 8004fac:	691b      	ldr	r3, [r3, #16]
 8004fae:	2b00      	cmp	r3, #0
 8004fb0:	d104      	bne.n	8004fbc <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8004fb2:	2300      	movs	r3, #0
 8004fb4:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8004fb6:	68bb      	ldr	r3, [r7, #8]
 8004fb8:	61bb      	str	r3, [r7, #24]
 8004fba:	e003      	b.n	8004fc4 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8004fbc:	68bb      	ldr	r3, [r7, #8]
 8004fbe:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004fc0:	2300      	movs	r3, #0
 8004fc2:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8004fc4:	68fb      	ldr	r3, [r7, #12]
 8004fc6:	2200      	movs	r2, #0
 8004fc8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8004fcc:	e02a      	b.n	8005024 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004fce:	683b      	ldr	r3, [r7, #0]
 8004fd0:	9300      	str	r3, [sp, #0]
 8004fd2:	697b      	ldr	r3, [r7, #20]
 8004fd4:	2200      	movs	r2, #0
 8004fd6:	2180      	movs	r1, #128	; 0x80
 8004fd8:	68f8      	ldr	r0, [r7, #12]
 8004fda:	f000 f840 	bl	800505e <UART_WaitOnFlagUntilTimeout>
 8004fde:	4603      	mov	r3, r0
 8004fe0:	2b00      	cmp	r3, #0
 8004fe2:	d001      	beq.n	8004fe8 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8004fe4:	2303      	movs	r3, #3
 8004fe6:	e036      	b.n	8005056 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8004fe8:	69fb      	ldr	r3, [r7, #28]
 8004fea:	2b00      	cmp	r3, #0
 8004fec:	d10b      	bne.n	8005006 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8004fee:	69bb      	ldr	r3, [r7, #24]
 8004ff0:	881b      	ldrh	r3, [r3, #0]
 8004ff2:	461a      	mov	r2, r3
 8004ff4:	68fb      	ldr	r3, [r7, #12]
 8004ff6:	681b      	ldr	r3, [r3, #0]
 8004ff8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004ffc:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8004ffe:	69bb      	ldr	r3, [r7, #24]
 8005000:	3302      	adds	r3, #2
 8005002:	61bb      	str	r3, [r7, #24]
 8005004:	e007      	b.n	8005016 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8005006:	69fb      	ldr	r3, [r7, #28]
 8005008:	781a      	ldrb	r2, [r3, #0]
 800500a:	68fb      	ldr	r3, [r7, #12]
 800500c:	681b      	ldr	r3, [r3, #0]
 800500e:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8005010:	69fb      	ldr	r3, [r7, #28]
 8005012:	3301      	adds	r3, #1
 8005014:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8005016:	68fb      	ldr	r3, [r7, #12]
 8005018:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800501a:	b29b      	uxth	r3, r3
 800501c:	3b01      	subs	r3, #1
 800501e:	b29a      	uxth	r2, r3
 8005020:	68fb      	ldr	r3, [r7, #12]
 8005022:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8005024:	68fb      	ldr	r3, [r7, #12]
 8005026:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8005028:	b29b      	uxth	r3, r3
 800502a:	2b00      	cmp	r3, #0
 800502c:	d1cf      	bne.n	8004fce <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800502e:	683b      	ldr	r3, [r7, #0]
 8005030:	9300      	str	r3, [sp, #0]
 8005032:	697b      	ldr	r3, [r7, #20]
 8005034:	2200      	movs	r2, #0
 8005036:	2140      	movs	r1, #64	; 0x40
 8005038:	68f8      	ldr	r0, [r7, #12]
 800503a:	f000 f810 	bl	800505e <UART_WaitOnFlagUntilTimeout>
 800503e:	4603      	mov	r3, r0
 8005040:	2b00      	cmp	r3, #0
 8005042:	d001      	beq.n	8005048 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8005044:	2303      	movs	r3, #3
 8005046:	e006      	b.n	8005056 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8005048:	68fb      	ldr	r3, [r7, #12]
 800504a:	2220      	movs	r2, #32
 800504c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8005050:	2300      	movs	r3, #0
 8005052:	e000      	b.n	8005056 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8005054:	2302      	movs	r3, #2
  }
}
 8005056:	4618      	mov	r0, r3
 8005058:	3720      	adds	r7, #32
 800505a:	46bd      	mov	sp, r7
 800505c:	bd80      	pop	{r7, pc}

0800505e <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 800505e:	b580      	push	{r7, lr}
 8005060:	b090      	sub	sp, #64	; 0x40
 8005062:	af00      	add	r7, sp, #0
 8005064:	60f8      	str	r0, [r7, #12]
 8005066:	60b9      	str	r1, [r7, #8]
 8005068:	603b      	str	r3, [r7, #0]
 800506a:	4613      	mov	r3, r2
 800506c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800506e:	e050      	b.n	8005112 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005070:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005072:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005076:	d04c      	beq.n	8005112 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8005078:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800507a:	2b00      	cmp	r3, #0
 800507c:	d007      	beq.n	800508e <UART_WaitOnFlagUntilTimeout+0x30>
 800507e:	f7fd faaf 	bl	80025e0 <HAL_GetTick>
 8005082:	4602      	mov	r2, r0
 8005084:	683b      	ldr	r3, [r7, #0]
 8005086:	1ad3      	subs	r3, r2, r3
 8005088:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800508a:	429a      	cmp	r2, r3
 800508c:	d241      	bcs.n	8005112 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800508e:	68fb      	ldr	r3, [r7, #12]
 8005090:	681b      	ldr	r3, [r3, #0]
 8005092:	330c      	adds	r3, #12
 8005094:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005096:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005098:	e853 3f00 	ldrex	r3, [r3]
 800509c:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800509e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80050a0:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80050a4:	63fb      	str	r3, [r7, #60]	; 0x3c
 80050a6:	68fb      	ldr	r3, [r7, #12]
 80050a8:	681b      	ldr	r3, [r3, #0]
 80050aa:	330c      	adds	r3, #12
 80050ac:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80050ae:	637a      	str	r2, [r7, #52]	; 0x34
 80050b0:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80050b2:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80050b4:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80050b6:	e841 2300 	strex	r3, r2, [r1]
 80050ba:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80050bc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80050be:	2b00      	cmp	r3, #0
 80050c0:	d1e5      	bne.n	800508e <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80050c2:	68fb      	ldr	r3, [r7, #12]
 80050c4:	681b      	ldr	r3, [r3, #0]
 80050c6:	3314      	adds	r3, #20
 80050c8:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80050ca:	697b      	ldr	r3, [r7, #20]
 80050cc:	e853 3f00 	ldrex	r3, [r3]
 80050d0:	613b      	str	r3, [r7, #16]
   return(result);
 80050d2:	693b      	ldr	r3, [r7, #16]
 80050d4:	f023 0301 	bic.w	r3, r3, #1
 80050d8:	63bb      	str	r3, [r7, #56]	; 0x38
 80050da:	68fb      	ldr	r3, [r7, #12]
 80050dc:	681b      	ldr	r3, [r3, #0]
 80050de:	3314      	adds	r3, #20
 80050e0:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80050e2:	623a      	str	r2, [r7, #32]
 80050e4:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80050e6:	69f9      	ldr	r1, [r7, #28]
 80050e8:	6a3a      	ldr	r2, [r7, #32]
 80050ea:	e841 2300 	strex	r3, r2, [r1]
 80050ee:	61bb      	str	r3, [r7, #24]
   return(result);
 80050f0:	69bb      	ldr	r3, [r7, #24]
 80050f2:	2b00      	cmp	r3, #0
 80050f4:	d1e5      	bne.n	80050c2 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 80050f6:	68fb      	ldr	r3, [r7, #12]
 80050f8:	2220      	movs	r2, #32
 80050fa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 80050fe:	68fb      	ldr	r3, [r7, #12]
 8005100:	2220      	movs	r2, #32
 8005102:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8005106:	68fb      	ldr	r3, [r7, #12]
 8005108:	2200      	movs	r2, #0
 800510a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 800510e:	2303      	movs	r3, #3
 8005110:	e00f      	b.n	8005132 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005112:	68fb      	ldr	r3, [r7, #12]
 8005114:	681b      	ldr	r3, [r3, #0]
 8005116:	681a      	ldr	r2, [r3, #0]
 8005118:	68bb      	ldr	r3, [r7, #8]
 800511a:	4013      	ands	r3, r2
 800511c:	68ba      	ldr	r2, [r7, #8]
 800511e:	429a      	cmp	r2, r3
 8005120:	bf0c      	ite	eq
 8005122:	2301      	moveq	r3, #1
 8005124:	2300      	movne	r3, #0
 8005126:	b2db      	uxtb	r3, r3
 8005128:	461a      	mov	r2, r3
 800512a:	79fb      	ldrb	r3, [r7, #7]
 800512c:	429a      	cmp	r2, r3
 800512e:	d09f      	beq.n	8005070 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8005130:	2300      	movs	r3, #0
}
 8005132:	4618      	mov	r0, r3
 8005134:	3740      	adds	r7, #64	; 0x40
 8005136:	46bd      	mov	sp, r7
 8005138:	bd80      	pop	{r7, pc}
	...

0800513c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800513c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005140:	b09f      	sub	sp, #124	; 0x7c
 8005142:	af00      	add	r7, sp, #0
 8005144:	66f8      	str	r0, [r7, #108]	; 0x6c
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005146:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005148:	681b      	ldr	r3, [r3, #0]
 800514a:	691b      	ldr	r3, [r3, #16]
 800514c:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8005150:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005152:	68d9      	ldr	r1, [r3, #12]
 8005154:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005156:	681a      	ldr	r2, [r3, #0]
 8005158:	ea40 0301 	orr.w	r3, r0, r1
 800515c:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800515e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005160:	689a      	ldr	r2, [r3, #8]
 8005162:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005164:	691b      	ldr	r3, [r3, #16]
 8005166:	431a      	orrs	r2, r3
 8005168:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800516a:	695b      	ldr	r3, [r3, #20]
 800516c:	431a      	orrs	r2, r3
 800516e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005170:	69db      	ldr	r3, [r3, #28]
 8005172:	4313      	orrs	r3, r2
 8005174:	673b      	str	r3, [r7, #112]	; 0x70
  MODIFY_REG(huart->Instance->CR1,
 8005176:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005178:	681b      	ldr	r3, [r3, #0]
 800517a:	68db      	ldr	r3, [r3, #12]
 800517c:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8005180:	f021 010c 	bic.w	r1, r1, #12
 8005184:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005186:	681a      	ldr	r2, [r3, #0]
 8005188:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800518a:	430b      	orrs	r3, r1
 800518c:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800518e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005190:	681b      	ldr	r3, [r3, #0]
 8005192:	695b      	ldr	r3, [r3, #20]
 8005194:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8005198:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800519a:	6999      	ldr	r1, [r3, #24]
 800519c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800519e:	681a      	ldr	r2, [r3, #0]
 80051a0:	ea40 0301 	orr.w	r3, r0, r1
 80051a4:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80051a6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80051a8:	681a      	ldr	r2, [r3, #0]
 80051aa:	4bc5      	ldr	r3, [pc, #788]	; (80054c0 <UART_SetConfig+0x384>)
 80051ac:	429a      	cmp	r2, r3
 80051ae:	d004      	beq.n	80051ba <UART_SetConfig+0x7e>
 80051b0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80051b2:	681a      	ldr	r2, [r3, #0]
 80051b4:	4bc3      	ldr	r3, [pc, #780]	; (80054c4 <UART_SetConfig+0x388>)
 80051b6:	429a      	cmp	r2, r3
 80051b8:	d103      	bne.n	80051c2 <UART_SetConfig+0x86>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80051ba:	f7fd fe07 	bl	8002dcc <HAL_RCC_GetPCLK2Freq>
 80051be:	6778      	str	r0, [r7, #116]	; 0x74
 80051c0:	e002      	b.n	80051c8 <UART_SetConfig+0x8c>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80051c2:	f7fd fdef 	bl	8002da4 <HAL_RCC_GetPCLK1Freq>
 80051c6:	6778      	str	r0, [r7, #116]	; 0x74
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80051c8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80051ca:	69db      	ldr	r3, [r3, #28]
 80051cc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80051d0:	f040 80b6 	bne.w	8005340 <UART_SetConfig+0x204>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80051d4:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80051d6:	461c      	mov	r4, r3
 80051d8:	f04f 0500 	mov.w	r5, #0
 80051dc:	4622      	mov	r2, r4
 80051de:	462b      	mov	r3, r5
 80051e0:	1891      	adds	r1, r2, r2
 80051e2:	6439      	str	r1, [r7, #64]	; 0x40
 80051e4:	415b      	adcs	r3, r3
 80051e6:	647b      	str	r3, [r7, #68]	; 0x44
 80051e8:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 80051ec:	1912      	adds	r2, r2, r4
 80051ee:	eb45 0303 	adc.w	r3, r5, r3
 80051f2:	f04f 0000 	mov.w	r0, #0
 80051f6:	f04f 0100 	mov.w	r1, #0
 80051fa:	00d9      	lsls	r1, r3, #3
 80051fc:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8005200:	00d0      	lsls	r0, r2, #3
 8005202:	4602      	mov	r2, r0
 8005204:	460b      	mov	r3, r1
 8005206:	1911      	adds	r1, r2, r4
 8005208:	6639      	str	r1, [r7, #96]	; 0x60
 800520a:	416b      	adcs	r3, r5
 800520c:	667b      	str	r3, [r7, #100]	; 0x64
 800520e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005210:	685b      	ldr	r3, [r3, #4]
 8005212:	461a      	mov	r2, r3
 8005214:	f04f 0300 	mov.w	r3, #0
 8005218:	1891      	adds	r1, r2, r2
 800521a:	63b9      	str	r1, [r7, #56]	; 0x38
 800521c:	415b      	adcs	r3, r3
 800521e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005220:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8005224:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 8005228:	f7fb fd2e 	bl	8000c88 <__aeabi_uldivmod>
 800522c:	4602      	mov	r2, r0
 800522e:	460b      	mov	r3, r1
 8005230:	4ba5      	ldr	r3, [pc, #660]	; (80054c8 <UART_SetConfig+0x38c>)
 8005232:	fba3 2302 	umull	r2, r3, r3, r2
 8005236:	095b      	lsrs	r3, r3, #5
 8005238:	011e      	lsls	r6, r3, #4
 800523a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800523c:	461c      	mov	r4, r3
 800523e:	f04f 0500 	mov.w	r5, #0
 8005242:	4622      	mov	r2, r4
 8005244:	462b      	mov	r3, r5
 8005246:	1891      	adds	r1, r2, r2
 8005248:	6339      	str	r1, [r7, #48]	; 0x30
 800524a:	415b      	adcs	r3, r3
 800524c:	637b      	str	r3, [r7, #52]	; 0x34
 800524e:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8005252:	1912      	adds	r2, r2, r4
 8005254:	eb45 0303 	adc.w	r3, r5, r3
 8005258:	f04f 0000 	mov.w	r0, #0
 800525c:	f04f 0100 	mov.w	r1, #0
 8005260:	00d9      	lsls	r1, r3, #3
 8005262:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8005266:	00d0      	lsls	r0, r2, #3
 8005268:	4602      	mov	r2, r0
 800526a:	460b      	mov	r3, r1
 800526c:	1911      	adds	r1, r2, r4
 800526e:	65b9      	str	r1, [r7, #88]	; 0x58
 8005270:	416b      	adcs	r3, r5
 8005272:	65fb      	str	r3, [r7, #92]	; 0x5c
 8005274:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005276:	685b      	ldr	r3, [r3, #4]
 8005278:	461a      	mov	r2, r3
 800527a:	f04f 0300 	mov.w	r3, #0
 800527e:	1891      	adds	r1, r2, r2
 8005280:	62b9      	str	r1, [r7, #40]	; 0x28
 8005282:	415b      	adcs	r3, r3
 8005284:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005286:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800528a:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 800528e:	f7fb fcfb 	bl	8000c88 <__aeabi_uldivmod>
 8005292:	4602      	mov	r2, r0
 8005294:	460b      	mov	r3, r1
 8005296:	4b8c      	ldr	r3, [pc, #560]	; (80054c8 <UART_SetConfig+0x38c>)
 8005298:	fba3 1302 	umull	r1, r3, r3, r2
 800529c:	095b      	lsrs	r3, r3, #5
 800529e:	2164      	movs	r1, #100	; 0x64
 80052a0:	fb01 f303 	mul.w	r3, r1, r3
 80052a4:	1ad3      	subs	r3, r2, r3
 80052a6:	00db      	lsls	r3, r3, #3
 80052a8:	3332      	adds	r3, #50	; 0x32
 80052aa:	4a87      	ldr	r2, [pc, #540]	; (80054c8 <UART_SetConfig+0x38c>)
 80052ac:	fba2 2303 	umull	r2, r3, r2, r3
 80052b0:	095b      	lsrs	r3, r3, #5
 80052b2:	005b      	lsls	r3, r3, #1
 80052b4:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80052b8:	441e      	add	r6, r3
 80052ba:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80052bc:	4618      	mov	r0, r3
 80052be:	f04f 0100 	mov.w	r1, #0
 80052c2:	4602      	mov	r2, r0
 80052c4:	460b      	mov	r3, r1
 80052c6:	1894      	adds	r4, r2, r2
 80052c8:	623c      	str	r4, [r7, #32]
 80052ca:	415b      	adcs	r3, r3
 80052cc:	627b      	str	r3, [r7, #36]	; 0x24
 80052ce:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80052d2:	1812      	adds	r2, r2, r0
 80052d4:	eb41 0303 	adc.w	r3, r1, r3
 80052d8:	f04f 0400 	mov.w	r4, #0
 80052dc:	f04f 0500 	mov.w	r5, #0
 80052e0:	00dd      	lsls	r5, r3, #3
 80052e2:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 80052e6:	00d4      	lsls	r4, r2, #3
 80052e8:	4622      	mov	r2, r4
 80052ea:	462b      	mov	r3, r5
 80052ec:	1814      	adds	r4, r2, r0
 80052ee:	653c      	str	r4, [r7, #80]	; 0x50
 80052f0:	414b      	adcs	r3, r1
 80052f2:	657b      	str	r3, [r7, #84]	; 0x54
 80052f4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80052f6:	685b      	ldr	r3, [r3, #4]
 80052f8:	461a      	mov	r2, r3
 80052fa:	f04f 0300 	mov.w	r3, #0
 80052fe:	1891      	adds	r1, r2, r2
 8005300:	61b9      	str	r1, [r7, #24]
 8005302:	415b      	adcs	r3, r3
 8005304:	61fb      	str	r3, [r7, #28]
 8005306:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800530a:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 800530e:	f7fb fcbb 	bl	8000c88 <__aeabi_uldivmod>
 8005312:	4602      	mov	r2, r0
 8005314:	460b      	mov	r3, r1
 8005316:	4b6c      	ldr	r3, [pc, #432]	; (80054c8 <UART_SetConfig+0x38c>)
 8005318:	fba3 1302 	umull	r1, r3, r3, r2
 800531c:	095b      	lsrs	r3, r3, #5
 800531e:	2164      	movs	r1, #100	; 0x64
 8005320:	fb01 f303 	mul.w	r3, r1, r3
 8005324:	1ad3      	subs	r3, r2, r3
 8005326:	00db      	lsls	r3, r3, #3
 8005328:	3332      	adds	r3, #50	; 0x32
 800532a:	4a67      	ldr	r2, [pc, #412]	; (80054c8 <UART_SetConfig+0x38c>)
 800532c:	fba2 2303 	umull	r2, r3, r2, r3
 8005330:	095b      	lsrs	r3, r3, #5
 8005332:	f003 0207 	and.w	r2, r3, #7
 8005336:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005338:	681b      	ldr	r3, [r3, #0]
 800533a:	4432      	add	r2, r6
 800533c:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 800533e:	e0b9      	b.n	80054b4 <UART_SetConfig+0x378>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8005340:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005342:	461c      	mov	r4, r3
 8005344:	f04f 0500 	mov.w	r5, #0
 8005348:	4622      	mov	r2, r4
 800534a:	462b      	mov	r3, r5
 800534c:	1891      	adds	r1, r2, r2
 800534e:	6139      	str	r1, [r7, #16]
 8005350:	415b      	adcs	r3, r3
 8005352:	617b      	str	r3, [r7, #20]
 8005354:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8005358:	1912      	adds	r2, r2, r4
 800535a:	eb45 0303 	adc.w	r3, r5, r3
 800535e:	f04f 0000 	mov.w	r0, #0
 8005362:	f04f 0100 	mov.w	r1, #0
 8005366:	00d9      	lsls	r1, r3, #3
 8005368:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800536c:	00d0      	lsls	r0, r2, #3
 800536e:	4602      	mov	r2, r0
 8005370:	460b      	mov	r3, r1
 8005372:	eb12 0804 	adds.w	r8, r2, r4
 8005376:	eb43 0905 	adc.w	r9, r3, r5
 800537a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800537c:	685b      	ldr	r3, [r3, #4]
 800537e:	4618      	mov	r0, r3
 8005380:	f04f 0100 	mov.w	r1, #0
 8005384:	f04f 0200 	mov.w	r2, #0
 8005388:	f04f 0300 	mov.w	r3, #0
 800538c:	008b      	lsls	r3, r1, #2
 800538e:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8005392:	0082      	lsls	r2, r0, #2
 8005394:	4640      	mov	r0, r8
 8005396:	4649      	mov	r1, r9
 8005398:	f7fb fc76 	bl	8000c88 <__aeabi_uldivmod>
 800539c:	4602      	mov	r2, r0
 800539e:	460b      	mov	r3, r1
 80053a0:	4b49      	ldr	r3, [pc, #292]	; (80054c8 <UART_SetConfig+0x38c>)
 80053a2:	fba3 2302 	umull	r2, r3, r3, r2
 80053a6:	095b      	lsrs	r3, r3, #5
 80053a8:	011e      	lsls	r6, r3, #4
 80053aa:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80053ac:	4618      	mov	r0, r3
 80053ae:	f04f 0100 	mov.w	r1, #0
 80053b2:	4602      	mov	r2, r0
 80053b4:	460b      	mov	r3, r1
 80053b6:	1894      	adds	r4, r2, r2
 80053b8:	60bc      	str	r4, [r7, #8]
 80053ba:	415b      	adcs	r3, r3
 80053bc:	60fb      	str	r3, [r7, #12]
 80053be:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80053c2:	1812      	adds	r2, r2, r0
 80053c4:	eb41 0303 	adc.w	r3, r1, r3
 80053c8:	f04f 0400 	mov.w	r4, #0
 80053cc:	f04f 0500 	mov.w	r5, #0
 80053d0:	00dd      	lsls	r5, r3, #3
 80053d2:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 80053d6:	00d4      	lsls	r4, r2, #3
 80053d8:	4622      	mov	r2, r4
 80053da:	462b      	mov	r3, r5
 80053dc:	1814      	adds	r4, r2, r0
 80053de:	64bc      	str	r4, [r7, #72]	; 0x48
 80053e0:	414b      	adcs	r3, r1
 80053e2:	64fb      	str	r3, [r7, #76]	; 0x4c
 80053e4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80053e6:	685b      	ldr	r3, [r3, #4]
 80053e8:	4618      	mov	r0, r3
 80053ea:	f04f 0100 	mov.w	r1, #0
 80053ee:	f04f 0200 	mov.w	r2, #0
 80053f2:	f04f 0300 	mov.w	r3, #0
 80053f6:	008b      	lsls	r3, r1, #2
 80053f8:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 80053fc:	0082      	lsls	r2, r0, #2
 80053fe:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 8005402:	f7fb fc41 	bl	8000c88 <__aeabi_uldivmod>
 8005406:	4602      	mov	r2, r0
 8005408:	460b      	mov	r3, r1
 800540a:	4b2f      	ldr	r3, [pc, #188]	; (80054c8 <UART_SetConfig+0x38c>)
 800540c:	fba3 1302 	umull	r1, r3, r3, r2
 8005410:	095b      	lsrs	r3, r3, #5
 8005412:	2164      	movs	r1, #100	; 0x64
 8005414:	fb01 f303 	mul.w	r3, r1, r3
 8005418:	1ad3      	subs	r3, r2, r3
 800541a:	011b      	lsls	r3, r3, #4
 800541c:	3332      	adds	r3, #50	; 0x32
 800541e:	4a2a      	ldr	r2, [pc, #168]	; (80054c8 <UART_SetConfig+0x38c>)
 8005420:	fba2 2303 	umull	r2, r3, r2, r3
 8005424:	095b      	lsrs	r3, r3, #5
 8005426:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800542a:	441e      	add	r6, r3
 800542c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800542e:	4618      	mov	r0, r3
 8005430:	f04f 0100 	mov.w	r1, #0
 8005434:	4602      	mov	r2, r0
 8005436:	460b      	mov	r3, r1
 8005438:	1894      	adds	r4, r2, r2
 800543a:	603c      	str	r4, [r7, #0]
 800543c:	415b      	adcs	r3, r3
 800543e:	607b      	str	r3, [r7, #4]
 8005440:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005444:	1812      	adds	r2, r2, r0
 8005446:	eb41 0303 	adc.w	r3, r1, r3
 800544a:	f04f 0400 	mov.w	r4, #0
 800544e:	f04f 0500 	mov.w	r5, #0
 8005452:	00dd      	lsls	r5, r3, #3
 8005454:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8005458:	00d4      	lsls	r4, r2, #3
 800545a:	4622      	mov	r2, r4
 800545c:	462b      	mov	r3, r5
 800545e:	eb12 0a00 	adds.w	sl, r2, r0
 8005462:	eb43 0b01 	adc.w	fp, r3, r1
 8005466:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005468:	685b      	ldr	r3, [r3, #4]
 800546a:	4618      	mov	r0, r3
 800546c:	f04f 0100 	mov.w	r1, #0
 8005470:	f04f 0200 	mov.w	r2, #0
 8005474:	f04f 0300 	mov.w	r3, #0
 8005478:	008b      	lsls	r3, r1, #2
 800547a:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 800547e:	0082      	lsls	r2, r0, #2
 8005480:	4650      	mov	r0, sl
 8005482:	4659      	mov	r1, fp
 8005484:	f7fb fc00 	bl	8000c88 <__aeabi_uldivmod>
 8005488:	4602      	mov	r2, r0
 800548a:	460b      	mov	r3, r1
 800548c:	4b0e      	ldr	r3, [pc, #56]	; (80054c8 <UART_SetConfig+0x38c>)
 800548e:	fba3 1302 	umull	r1, r3, r3, r2
 8005492:	095b      	lsrs	r3, r3, #5
 8005494:	2164      	movs	r1, #100	; 0x64
 8005496:	fb01 f303 	mul.w	r3, r1, r3
 800549a:	1ad3      	subs	r3, r2, r3
 800549c:	011b      	lsls	r3, r3, #4
 800549e:	3332      	adds	r3, #50	; 0x32
 80054a0:	4a09      	ldr	r2, [pc, #36]	; (80054c8 <UART_SetConfig+0x38c>)
 80054a2:	fba2 2303 	umull	r2, r3, r2, r3
 80054a6:	095b      	lsrs	r3, r3, #5
 80054a8:	f003 020f 	and.w	r2, r3, #15
 80054ac:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80054ae:	681b      	ldr	r3, [r3, #0]
 80054b0:	4432      	add	r2, r6
 80054b2:	609a      	str	r2, [r3, #8]
}
 80054b4:	bf00      	nop
 80054b6:	377c      	adds	r7, #124	; 0x7c
 80054b8:	46bd      	mov	sp, r7
 80054ba:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80054be:	bf00      	nop
 80054c0:	40011000 	.word	0x40011000
 80054c4:	40011400 	.word	0x40011400
 80054c8:	51eb851f 	.word	0x51eb851f

080054cc <DWT_Delay_us>:
uint32_t DWT_Delay_Init(void);


// This Function Provides Delay In Microseconds Using DWT
__STATIC_INLINE void DWT_Delay_us(volatile uint32_t au32_microseconds)
{
 80054cc:	b580      	push	{r7, lr}
 80054ce:	b084      	sub	sp, #16
 80054d0:	af00      	add	r7, sp, #0
 80054d2:	6078      	str	r0, [r7, #4]
  uint32_t au32_initial_ticks = DWT->CYCCNT;
 80054d4:	4b0f      	ldr	r3, [pc, #60]	; (8005514 <DWT_Delay_us+0x48>)
 80054d6:	685b      	ldr	r3, [r3, #4]
 80054d8:	60fb      	str	r3, [r7, #12]
  uint32_t au32_ticks = (HAL_RCC_GetHCLKFreq() / 1000000);
 80054da:	f7fd fc57 	bl	8002d8c <HAL_RCC_GetHCLKFreq>
 80054de:	4603      	mov	r3, r0
 80054e0:	4a0d      	ldr	r2, [pc, #52]	; (8005518 <DWT_Delay_us+0x4c>)
 80054e2:	fba2 2303 	umull	r2, r3, r2, r3
 80054e6:	0c9b      	lsrs	r3, r3, #18
 80054e8:	60bb      	str	r3, [r7, #8]
  au32_microseconds *= au32_ticks;
 80054ea:	687b      	ldr	r3, [r7, #4]
 80054ec:	68ba      	ldr	r2, [r7, #8]
 80054ee:	fb02 f303 	mul.w	r3, r2, r3
 80054f2:	607b      	str	r3, [r7, #4]
  while ((DWT->CYCCNT - au32_initial_ticks) < au32_microseconds-au32_ticks);
 80054f4:	bf00      	nop
 80054f6:	4b07      	ldr	r3, [pc, #28]	; (8005514 <DWT_Delay_us+0x48>)
 80054f8:	685a      	ldr	r2, [r3, #4]
 80054fa:	68fb      	ldr	r3, [r7, #12]
 80054fc:	1ad2      	subs	r2, r2, r3
 80054fe:	6879      	ldr	r1, [r7, #4]
 8005500:	68bb      	ldr	r3, [r7, #8]
 8005502:	1acb      	subs	r3, r1, r3
 8005504:	429a      	cmp	r2, r3
 8005506:	d3f6      	bcc.n	80054f6 <DWT_Delay_us+0x2a>
}
 8005508:	bf00      	nop
 800550a:	bf00      	nop
 800550c:	3710      	adds	r7, #16
 800550e:	46bd      	mov	sp, r7
 8005510:	bd80      	pop	{r7, pc}
 8005512:	bf00      	nop
 8005514:	e0001000 	.word	0xe0001000
 8005518:	431bde83 	.word	0x431bde83

0800551c <HCSR04_Init>:
static HCSR04_info gs_HCSR04_info[HCSR04_UNITS] = {0};



void HCSR04_Init(uint8_t au8_HCSR04_Instance, TIM_HandleTypeDef* TMR_Handle)
{
 800551c:	b580      	push	{r7, lr}
 800551e:	b096      	sub	sp, #88	; 0x58
 8005520:	af00      	add	r7, sp, #0
 8005522:	4603      	mov	r3, r0
 8005524:	6039      	str	r1, [r7, #0]
 8005526:	71fb      	strb	r3, [r7, #7]
	GPIO_InitTypeDef TRIG_GPIO_InitStruct = {0};
 8005528:	f107 0344 	add.w	r3, r7, #68	; 0x44
 800552c:	2200      	movs	r2, #0
 800552e:	601a      	str	r2, [r3, #0]
 8005530:	605a      	str	r2, [r3, #4]
 8005532:	609a      	str	r2, [r3, #8]
 8005534:	60da      	str	r2, [r3, #12]
 8005536:	611a      	str	r2, [r3, #16]
	TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8005538:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800553c:	2200      	movs	r2, #0
 800553e:	601a      	str	r2, [r3, #0]
 8005540:	605a      	str	r2, [r3, #4]
 8005542:	609a      	str	r2, [r3, #8]
 8005544:	60da      	str	r2, [r3, #12]
	TIM_MasterConfigTypeDef sMasterConfig = {0};
 8005546:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800554a:	2200      	movs	r2, #0
 800554c:	601a      	str	r2, [r3, #0]
 800554e:	605a      	str	r2, [r3, #4]
	TIM_IC_InitTypeDef sConfigIC = {0};
 8005550:	f107 031c 	add.w	r3, r7, #28
 8005554:	2200      	movs	r2, #0
 8005556:	601a      	str	r2, [r3, #0]
 8005558:	605a      	str	r2, [r3, #4]
 800555a:	609a      	str	r2, [r3, #8]
 800555c:	60da      	str	r2, [r3, #12]

    DWT_Delay_Init();
 800555e:	f000 fca1 	bl	8005ea4 <DWT_Delay_Init>

	/*--------[ Configure The HCSR04 TRIGGER GPIO Pin ]-------*/

    if(HCSR04_CfgParam[au8_HCSR04_Instance].TRIG_GPIO == GPIOA)
 8005562:	79fa      	ldrb	r2, [r7, #7]
 8005564:	4997      	ldr	r1, [pc, #604]	; (80057c4 <HCSR04_Init+0x2a8>)
 8005566:	4613      	mov	r3, r2
 8005568:	009b      	lsls	r3, r3, #2
 800556a:	4413      	add	r3, r2
 800556c:	009b      	lsls	r3, r3, #2
 800556e:	440b      	add	r3, r1
 8005570:	681b      	ldr	r3, [r3, #0]
 8005572:	4a95      	ldr	r2, [pc, #596]	; (80057c8 <HCSR04_Init+0x2ac>)
 8005574:	4293      	cmp	r3, r2
 8005576:	d10e      	bne.n	8005596 <HCSR04_Init+0x7a>
    {
    	__HAL_RCC_GPIOA_CLK_ENABLE();
 8005578:	2300      	movs	r3, #0
 800557a:	61bb      	str	r3, [r7, #24]
 800557c:	4b93      	ldr	r3, [pc, #588]	; (80057cc <HCSR04_Init+0x2b0>)
 800557e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005580:	4a92      	ldr	r2, [pc, #584]	; (80057cc <HCSR04_Init+0x2b0>)
 8005582:	f043 0301 	orr.w	r3, r3, #1
 8005586:	6313      	str	r3, [r2, #48]	; 0x30
 8005588:	4b90      	ldr	r3, [pc, #576]	; (80057cc <HCSR04_Init+0x2b0>)
 800558a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800558c:	f003 0301 	and.w	r3, r3, #1
 8005590:	61bb      	str	r3, [r7, #24]
 8005592:	69bb      	ldr	r3, [r7, #24]
 8005594:	e066      	b.n	8005664 <HCSR04_Init+0x148>
    }
    else if(HCSR04_CfgParam[au8_HCSR04_Instance].TRIG_GPIO == GPIOB)
 8005596:	79fa      	ldrb	r2, [r7, #7]
 8005598:	498a      	ldr	r1, [pc, #552]	; (80057c4 <HCSR04_Init+0x2a8>)
 800559a:	4613      	mov	r3, r2
 800559c:	009b      	lsls	r3, r3, #2
 800559e:	4413      	add	r3, r2
 80055a0:	009b      	lsls	r3, r3, #2
 80055a2:	440b      	add	r3, r1
 80055a4:	681b      	ldr	r3, [r3, #0]
 80055a6:	4a8a      	ldr	r2, [pc, #552]	; (80057d0 <HCSR04_Init+0x2b4>)
 80055a8:	4293      	cmp	r3, r2
 80055aa:	d10e      	bne.n	80055ca <HCSR04_Init+0xae>
    {
    	__HAL_RCC_GPIOB_CLK_ENABLE();
 80055ac:	2300      	movs	r3, #0
 80055ae:	617b      	str	r3, [r7, #20]
 80055b0:	4b86      	ldr	r3, [pc, #536]	; (80057cc <HCSR04_Init+0x2b0>)
 80055b2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80055b4:	4a85      	ldr	r2, [pc, #532]	; (80057cc <HCSR04_Init+0x2b0>)
 80055b6:	f043 0302 	orr.w	r3, r3, #2
 80055ba:	6313      	str	r3, [r2, #48]	; 0x30
 80055bc:	4b83      	ldr	r3, [pc, #524]	; (80057cc <HCSR04_Init+0x2b0>)
 80055be:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80055c0:	f003 0302 	and.w	r3, r3, #2
 80055c4:	617b      	str	r3, [r7, #20]
 80055c6:	697b      	ldr	r3, [r7, #20]
 80055c8:	e04c      	b.n	8005664 <HCSR04_Init+0x148>
    }
    else if(HCSR04_CfgParam[au8_HCSR04_Instance].TRIG_GPIO == GPIOC)
 80055ca:	79fa      	ldrb	r2, [r7, #7]
 80055cc:	497d      	ldr	r1, [pc, #500]	; (80057c4 <HCSR04_Init+0x2a8>)
 80055ce:	4613      	mov	r3, r2
 80055d0:	009b      	lsls	r3, r3, #2
 80055d2:	4413      	add	r3, r2
 80055d4:	009b      	lsls	r3, r3, #2
 80055d6:	440b      	add	r3, r1
 80055d8:	681b      	ldr	r3, [r3, #0]
 80055da:	4a7e      	ldr	r2, [pc, #504]	; (80057d4 <HCSR04_Init+0x2b8>)
 80055dc:	4293      	cmp	r3, r2
 80055de:	d10e      	bne.n	80055fe <HCSR04_Init+0xe2>
    {
        __HAL_RCC_GPIOC_CLK_ENABLE();
 80055e0:	2300      	movs	r3, #0
 80055e2:	613b      	str	r3, [r7, #16]
 80055e4:	4b79      	ldr	r3, [pc, #484]	; (80057cc <HCSR04_Init+0x2b0>)
 80055e6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80055e8:	4a78      	ldr	r2, [pc, #480]	; (80057cc <HCSR04_Init+0x2b0>)
 80055ea:	f043 0304 	orr.w	r3, r3, #4
 80055ee:	6313      	str	r3, [r2, #48]	; 0x30
 80055f0:	4b76      	ldr	r3, [pc, #472]	; (80057cc <HCSR04_Init+0x2b0>)
 80055f2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80055f4:	f003 0304 	and.w	r3, r3, #4
 80055f8:	613b      	str	r3, [r7, #16]
 80055fa:	693b      	ldr	r3, [r7, #16]
 80055fc:	e032      	b.n	8005664 <HCSR04_Init+0x148>
    }
    else if(HCSR04_CfgParam[au8_HCSR04_Instance].TRIG_GPIO == GPIOD)
 80055fe:	79fa      	ldrb	r2, [r7, #7]
 8005600:	4970      	ldr	r1, [pc, #448]	; (80057c4 <HCSR04_Init+0x2a8>)
 8005602:	4613      	mov	r3, r2
 8005604:	009b      	lsls	r3, r3, #2
 8005606:	4413      	add	r3, r2
 8005608:	009b      	lsls	r3, r3, #2
 800560a:	440b      	add	r3, r1
 800560c:	681b      	ldr	r3, [r3, #0]
 800560e:	4a72      	ldr	r2, [pc, #456]	; (80057d8 <HCSR04_Init+0x2bc>)
 8005610:	4293      	cmp	r3, r2
 8005612:	d10e      	bne.n	8005632 <HCSR04_Init+0x116>
    {
        __HAL_RCC_GPIOD_CLK_ENABLE();
 8005614:	2300      	movs	r3, #0
 8005616:	60fb      	str	r3, [r7, #12]
 8005618:	4b6c      	ldr	r3, [pc, #432]	; (80057cc <HCSR04_Init+0x2b0>)
 800561a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800561c:	4a6b      	ldr	r2, [pc, #428]	; (80057cc <HCSR04_Init+0x2b0>)
 800561e:	f043 0308 	orr.w	r3, r3, #8
 8005622:	6313      	str	r3, [r2, #48]	; 0x30
 8005624:	4b69      	ldr	r3, [pc, #420]	; (80057cc <HCSR04_Init+0x2b0>)
 8005626:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005628:	f003 0308 	and.w	r3, r3, #8
 800562c:	60fb      	str	r3, [r7, #12]
 800562e:	68fb      	ldr	r3, [r7, #12]
 8005630:	e018      	b.n	8005664 <HCSR04_Init+0x148>
    }
    else if(HCSR04_CfgParam[au8_HCSR04_Instance].TRIG_GPIO == GPIOE)
 8005632:	79fa      	ldrb	r2, [r7, #7]
 8005634:	4963      	ldr	r1, [pc, #396]	; (80057c4 <HCSR04_Init+0x2a8>)
 8005636:	4613      	mov	r3, r2
 8005638:	009b      	lsls	r3, r3, #2
 800563a:	4413      	add	r3, r2
 800563c:	009b      	lsls	r3, r3, #2
 800563e:	440b      	add	r3, r1
 8005640:	681b      	ldr	r3, [r3, #0]
 8005642:	4a66      	ldr	r2, [pc, #408]	; (80057dc <HCSR04_Init+0x2c0>)
 8005644:	4293      	cmp	r3, r2
 8005646:	d10d      	bne.n	8005664 <HCSR04_Init+0x148>
    {
        __HAL_RCC_GPIOE_CLK_ENABLE();
 8005648:	2300      	movs	r3, #0
 800564a:	60bb      	str	r3, [r7, #8]
 800564c:	4b5f      	ldr	r3, [pc, #380]	; (80057cc <HCSR04_Init+0x2b0>)
 800564e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005650:	4a5e      	ldr	r2, [pc, #376]	; (80057cc <HCSR04_Init+0x2b0>)
 8005652:	f043 0310 	orr.w	r3, r3, #16
 8005656:	6313      	str	r3, [r2, #48]	; 0x30
 8005658:	4b5c      	ldr	r3, [pc, #368]	; (80057cc <HCSR04_Init+0x2b0>)
 800565a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800565c:	f003 0310 	and.w	r3, r3, #16
 8005660:	60bb      	str	r3, [r7, #8]
 8005662:	68bb      	ldr	r3, [r7, #8]
    }
    TRIG_GPIO_InitStruct.Pin = HCSR04_CfgParam[au8_HCSR04_Instance].TRIG_PIN;
 8005664:	79fa      	ldrb	r2, [r7, #7]
 8005666:	4957      	ldr	r1, [pc, #348]	; (80057c4 <HCSR04_Init+0x2a8>)
 8005668:	4613      	mov	r3, r2
 800566a:	009b      	lsls	r3, r3, #2
 800566c:	4413      	add	r3, r2
 800566e:	009b      	lsls	r3, r3, #2
 8005670:	440b      	add	r3, r1
 8005672:	3304      	adds	r3, #4
 8005674:	881b      	ldrh	r3, [r3, #0]
 8005676:	647b      	str	r3, [r7, #68]	; 0x44
    TRIG_GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8005678:	2301      	movs	r3, #1
 800567a:	64bb      	str	r3, [r7, #72]	; 0x48
    TRIG_GPIO_InitStruct.Pull = GPIO_NOPULL;
 800567c:	2300      	movs	r3, #0
 800567e:	64fb      	str	r3, [r7, #76]	; 0x4c
    TRIG_GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005680:	2300      	movs	r3, #0
 8005682:	653b      	str	r3, [r7, #80]	; 0x50
	HAL_GPIO_Init(HCSR04_CfgParam[au8_HCSR04_Instance].TRIG_GPIO, &TRIG_GPIO_InitStruct);
 8005684:	79fa      	ldrb	r2, [r7, #7]
 8005686:	494f      	ldr	r1, [pc, #316]	; (80057c4 <HCSR04_Init+0x2a8>)
 8005688:	4613      	mov	r3, r2
 800568a:	009b      	lsls	r3, r3, #2
 800568c:	4413      	add	r3, r2
 800568e:	009b      	lsls	r3, r3, #2
 8005690:	440b      	add	r3, r1
 8005692:	681b      	ldr	r3, [r3, #0]
 8005694:	f107 0244 	add.w	r2, r7, #68	; 0x44
 8005698:	4611      	mov	r1, r2
 800569a:	4618      	mov	r0, r3
 800569c:	f7fd f8e2 	bl	8002864 <HAL_GPIO_Init>

	/*--------[ Initialize The HCSR04 Static Global Info ]-------*/

	gs_HCSR04_info[au8_HCSR04_Instance].TMR_PSC = HCSR04_CfgParam[au8_HCSR04_Instance].TIM_Instance->PSC;
 80056a0:	79fa      	ldrb	r2, [r7, #7]
 80056a2:	4948      	ldr	r1, [pc, #288]	; (80057c4 <HCSR04_Init+0x2a8>)
 80056a4:	4613      	mov	r3, r2
 80056a6:	009b      	lsls	r3, r3, #2
 80056a8:	4413      	add	r3, r2
 80056aa:	009b      	lsls	r3, r3, #2
 80056ac:	440b      	add	r3, r1
 80056ae:	3308      	adds	r3, #8
 80056b0:	681b      	ldr	r3, [r3, #0]
 80056b2:	79fa      	ldrb	r2, [r7, #7]
 80056b4:	6a99      	ldr	r1, [r3, #40]	; 0x28
 80056b6:	484a      	ldr	r0, [pc, #296]	; (80057e0 <HCSR04_Init+0x2c4>)
 80056b8:	4613      	mov	r3, r2
 80056ba:	00db      	lsls	r3, r3, #3
 80056bc:	4413      	add	r3, r2
 80056be:	009b      	lsls	r3, r3, #2
 80056c0:	4403      	add	r3, r0
 80056c2:	3304      	adds	r3, #4
 80056c4:	6019      	str	r1, [r3, #0]
	gs_HCSR04_info[au8_HCSR04_Instance].TMR_ARR = HCSR04_CfgParam[au8_HCSR04_Instance].TIM_Instance->ARR;
 80056c6:	79fa      	ldrb	r2, [r7, #7]
 80056c8:	493e      	ldr	r1, [pc, #248]	; (80057c4 <HCSR04_Init+0x2a8>)
 80056ca:	4613      	mov	r3, r2
 80056cc:	009b      	lsls	r3, r3, #2
 80056ce:	4413      	add	r3, r2
 80056d0:	009b      	lsls	r3, r3, #2
 80056d2:	440b      	add	r3, r1
 80056d4:	3308      	adds	r3, #8
 80056d6:	681b      	ldr	r3, [r3, #0]
 80056d8:	79fa      	ldrb	r2, [r7, #7]
 80056da:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80056dc:	4840      	ldr	r0, [pc, #256]	; (80057e0 <HCSR04_Init+0x2c4>)
 80056de:	4613      	mov	r3, r2
 80056e0:	00db      	lsls	r3, r3, #3
 80056e2:	4413      	add	r3, r2
 80056e4:	009b      	lsls	r3, r3, #2
 80056e6:	4403      	add	r3, r0
 80056e8:	3308      	adds	r3, #8
 80056ea:	6019      	str	r1, [r3, #0]
	gs_HCSR04_info[au8_HCSR04_Instance].TMR_OVC = 0;
 80056ec:	79fa      	ldrb	r2, [r7, #7]
 80056ee:	493c      	ldr	r1, [pc, #240]	; (80057e0 <HCSR04_Init+0x2c4>)
 80056f0:	4613      	mov	r3, r2
 80056f2:	00db      	lsls	r3, r3, #3
 80056f4:	4413      	add	r3, r2
 80056f6:	009b      	lsls	r3, r3, #2
 80056f8:	440b      	add	r3, r1
 80056fa:	3302      	adds	r3, #2
 80056fc:	2200      	movs	r2, #0
 80056fe:	801a      	strh	r2, [r3, #0]
		gs_HCSR04_info[au8_HCSR04_Instance].HTIM = TMR_Handle;
 8005700:	79fa      	ldrb	r2, [r7, #7]
 8005702:	4937      	ldr	r1, [pc, #220]	; (80057e0 <HCSR04_Init+0x2c4>)
 8005704:	4613      	mov	r3, r2
 8005706:	00db      	lsls	r3, r3, #3
 8005708:	4413      	add	r3, r2
 800570a:	009b      	lsls	r3, r3, #2
 800570c:	440b      	add	r3, r1
 800570e:	331c      	adds	r3, #28
 8005710:	683a      	ldr	r2, [r7, #0]
 8005712:	601a      	str	r2, [r3, #0]
	if(gs_HCSR04_info[au8_HCSR04_Instance].TMR_ARR == 0)
 8005714:	79fa      	ldrb	r2, [r7, #7]
 8005716:	4932      	ldr	r1, [pc, #200]	; (80057e0 <HCSR04_Init+0x2c4>)
 8005718:	4613      	mov	r3, r2
 800571a:	00db      	lsls	r3, r3, #3
 800571c:	4413      	add	r3, r2
 800571e:	009b      	lsls	r3, r3, #2
 8005720:	440b      	add	r3, r1
 8005722:	3308      	adds	r3, #8
 8005724:	681b      	ldr	r3, [r3, #0]
 8005726:	2b00      	cmp	r3, #0
 8005728:	d10a      	bne.n	8005740 <HCSR04_Init+0x224>
	{
		gs_HCSR04_info[au8_HCSR04_Instance].TMR_ARR = 65535;
 800572a:	79fa      	ldrb	r2, [r7, #7]
 800572c:	492c      	ldr	r1, [pc, #176]	; (80057e0 <HCSR04_Init+0x2c4>)
 800572e:	4613      	mov	r3, r2
 8005730:	00db      	lsls	r3, r3, #3
 8005732:	4413      	add	r3, r2
 8005734:	009b      	lsls	r3, r3, #2
 8005736:	440b      	add	r3, r1
 8005738:	3308      	adds	r3, #8
 800573a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800573e:	601a      	str	r2, [r3, #0]
	}
	if(HCSR04_CfgParam[au8_HCSR04_Instance].IC_TIM_CH == TIM_CHANNEL_1)
 8005740:	79fa      	ldrb	r2, [r7, #7]
 8005742:	4920      	ldr	r1, [pc, #128]	; (80057c4 <HCSR04_Init+0x2a8>)
 8005744:	4613      	mov	r3, r2
 8005746:	009b      	lsls	r3, r3, #2
 8005748:	4413      	add	r3, r2
 800574a:	009b      	lsls	r3, r3, #2
 800574c:	440b      	add	r3, r1
 800574e:	330c      	adds	r3, #12
 8005750:	681b      	ldr	r3, [r3, #0]
 8005752:	2b00      	cmp	r3, #0
 8005754:	d10a      	bne.n	800576c <HCSR04_Init+0x250>
	{
		gs_HCSR04_info[au8_HCSR04_Instance].ACTIV_CH = HAL_TIM_ACTIVE_CHANNEL_1;
 8005756:	79fa      	ldrb	r2, [r7, #7]
 8005758:	4921      	ldr	r1, [pc, #132]	; (80057e0 <HCSR04_Init+0x2c4>)
 800575a:	4613      	mov	r3, r2
 800575c:	00db      	lsls	r3, r3, #3
 800575e:	4413      	add	r3, r2
 8005760:	009b      	lsls	r3, r3, #2
 8005762:	440b      	add	r3, r1
 8005764:	3320      	adds	r3, #32
 8005766:	2201      	movs	r2, #1
 8005768:	701a      	strb	r2, [r3, #0]
 800576a:	e050      	b.n	800580e <HCSR04_Init+0x2f2>
	}
	else if(HCSR04_CfgParam[au8_HCSR04_Instance].IC_TIM_CH == TIM_CHANNEL_2)
 800576c:	79fa      	ldrb	r2, [r7, #7]
 800576e:	4915      	ldr	r1, [pc, #84]	; (80057c4 <HCSR04_Init+0x2a8>)
 8005770:	4613      	mov	r3, r2
 8005772:	009b      	lsls	r3, r3, #2
 8005774:	4413      	add	r3, r2
 8005776:	009b      	lsls	r3, r3, #2
 8005778:	440b      	add	r3, r1
 800577a:	330c      	adds	r3, #12
 800577c:	681b      	ldr	r3, [r3, #0]
 800577e:	2b04      	cmp	r3, #4
 8005780:	d10a      	bne.n	8005798 <HCSR04_Init+0x27c>
	{
		gs_HCSR04_info[au8_HCSR04_Instance].ACTIV_CH = HAL_TIM_ACTIVE_CHANNEL_2;
 8005782:	79fa      	ldrb	r2, [r7, #7]
 8005784:	4916      	ldr	r1, [pc, #88]	; (80057e0 <HCSR04_Init+0x2c4>)
 8005786:	4613      	mov	r3, r2
 8005788:	00db      	lsls	r3, r3, #3
 800578a:	4413      	add	r3, r2
 800578c:	009b      	lsls	r3, r3, #2
 800578e:	440b      	add	r3, r1
 8005790:	3320      	adds	r3, #32
 8005792:	2202      	movs	r2, #2
 8005794:	701a      	strb	r2, [r3, #0]
 8005796:	e03a      	b.n	800580e <HCSR04_Init+0x2f2>
	}
	else if(HCSR04_CfgParam[au8_HCSR04_Instance].IC_TIM_CH == TIM_CHANNEL_3)
 8005798:	79fa      	ldrb	r2, [r7, #7]
 800579a:	490a      	ldr	r1, [pc, #40]	; (80057c4 <HCSR04_Init+0x2a8>)
 800579c:	4613      	mov	r3, r2
 800579e:	009b      	lsls	r3, r3, #2
 80057a0:	4413      	add	r3, r2
 80057a2:	009b      	lsls	r3, r3, #2
 80057a4:	440b      	add	r3, r1
 80057a6:	330c      	adds	r3, #12
 80057a8:	681b      	ldr	r3, [r3, #0]
 80057aa:	2b08      	cmp	r3, #8
 80057ac:	d11a      	bne.n	80057e4 <HCSR04_Init+0x2c8>
	{
		gs_HCSR04_info[au8_HCSR04_Instance].ACTIV_CH = HAL_TIM_ACTIVE_CHANNEL_3;
 80057ae:	79fa      	ldrb	r2, [r7, #7]
 80057b0:	490b      	ldr	r1, [pc, #44]	; (80057e0 <HCSR04_Init+0x2c4>)
 80057b2:	4613      	mov	r3, r2
 80057b4:	00db      	lsls	r3, r3, #3
 80057b6:	4413      	add	r3, r2
 80057b8:	009b      	lsls	r3, r3, #2
 80057ba:	440b      	add	r3, r1
 80057bc:	3320      	adds	r3, #32
 80057be:	2204      	movs	r2, #4
 80057c0:	701a      	strb	r2, [r3, #0]
 80057c2:	e024      	b.n	800580e <HCSR04_Init+0x2f2>
 80057c4:	08008d5c 	.word	0x08008d5c
 80057c8:	40020000 	.word	0x40020000
 80057cc:	40023800 	.word	0x40023800
 80057d0:	40020400 	.word	0x40020400
 80057d4:	40020800 	.word	0x40020800
 80057d8:	40020c00 	.word	0x40020c00
 80057dc:	40021000 	.word	0x40021000
 80057e0:	20000228 	.word	0x20000228
	}
	else if(HCSR04_CfgParam[au8_HCSR04_Instance].IC_TIM_CH == TIM_CHANNEL_4)
 80057e4:	79fa      	ldrb	r2, [r7, #7]
 80057e6:	4941      	ldr	r1, [pc, #260]	; (80058ec <HCSR04_Init+0x3d0>)
 80057e8:	4613      	mov	r3, r2
 80057ea:	009b      	lsls	r3, r3, #2
 80057ec:	4413      	add	r3, r2
 80057ee:	009b      	lsls	r3, r3, #2
 80057f0:	440b      	add	r3, r1
 80057f2:	330c      	adds	r3, #12
 80057f4:	681b      	ldr	r3, [r3, #0]
 80057f6:	2b0c      	cmp	r3, #12
 80057f8:	d109      	bne.n	800580e <HCSR04_Init+0x2f2>
	{
		gs_HCSR04_info[au8_HCSR04_Instance].ACTIV_CH = HAL_TIM_ACTIVE_CHANNEL_4;
 80057fa:	79fa      	ldrb	r2, [r7, #7]
 80057fc:	493c      	ldr	r1, [pc, #240]	; (80058f0 <HCSR04_Init+0x3d4>)
 80057fe:	4613      	mov	r3, r2
 8005800:	00db      	lsls	r3, r3, #3
 8005802:	4413      	add	r3, r2
 8005804:	009b      	lsls	r3, r3, #2
 8005806:	440b      	add	r3, r1
 8005808:	3320      	adds	r3, #32
 800580a:	2208      	movs	r2, #8
 800580c:	701a      	strb	r2, [r3, #0]
	}

	/*--------[ Configure The HCSR04 IC Timer Channel ]-------*/

	TMR_Handle->Instance = HCSR04_CfgParam[au8_HCSR04_Instance].TIM_Instance;
 800580e:	79fa      	ldrb	r2, [r7, #7]
 8005810:	4936      	ldr	r1, [pc, #216]	; (80058ec <HCSR04_Init+0x3d0>)
 8005812:	4613      	mov	r3, r2
 8005814:	009b      	lsls	r3, r3, #2
 8005816:	4413      	add	r3, r2
 8005818:	009b      	lsls	r3, r3, #2
 800581a:	440b      	add	r3, r1
 800581c:	3308      	adds	r3, #8
 800581e:	681a      	ldr	r2, [r3, #0]
 8005820:	683b      	ldr	r3, [r7, #0]
 8005822:	601a      	str	r2, [r3, #0]
	TMR_Handle->Init.Prescaler = gs_HCSR04_info[au8_HCSR04_Instance].TMR_PSC;
 8005824:	79fa      	ldrb	r2, [r7, #7]
 8005826:	4932      	ldr	r1, [pc, #200]	; (80058f0 <HCSR04_Init+0x3d4>)
 8005828:	4613      	mov	r3, r2
 800582a:	00db      	lsls	r3, r3, #3
 800582c:	4413      	add	r3, r2
 800582e:	009b      	lsls	r3, r3, #2
 8005830:	440b      	add	r3, r1
 8005832:	3304      	adds	r3, #4
 8005834:	681a      	ldr	r2, [r3, #0]
 8005836:	683b      	ldr	r3, [r7, #0]
 8005838:	605a      	str	r2, [r3, #4]
	TMR_Handle->Init.CounterMode = TIM_COUNTERMODE_UP;
 800583a:	683b      	ldr	r3, [r7, #0]
 800583c:	2200      	movs	r2, #0
 800583e:	609a      	str	r2, [r3, #8]
	TMR_Handle->Init.Period = gs_HCSR04_info[au8_HCSR04_Instance].TMR_ARR;
 8005840:	79fa      	ldrb	r2, [r7, #7]
 8005842:	492b      	ldr	r1, [pc, #172]	; (80058f0 <HCSR04_Init+0x3d4>)
 8005844:	4613      	mov	r3, r2
 8005846:	00db      	lsls	r3, r3, #3
 8005848:	4413      	add	r3, r2
 800584a:	009b      	lsls	r3, r3, #2
 800584c:	440b      	add	r3, r1
 800584e:	3308      	adds	r3, #8
 8005850:	681a      	ldr	r2, [r3, #0]
 8005852:	683b      	ldr	r3, [r7, #0]
 8005854:	60da      	str	r2, [r3, #12]
	TMR_Handle->Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8005856:	683b      	ldr	r3, [r7, #0]
 8005858:	2200      	movs	r2, #0
 800585a:	611a      	str	r2, [r3, #16]
	TMR_Handle->Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 800585c:	683b      	ldr	r3, [r7, #0]
 800585e:	2280      	movs	r2, #128	; 0x80
 8005860:	619a      	str	r2, [r3, #24]
	HAL_TIM_Base_Init(TMR_Handle);
 8005862:	6838      	ldr	r0, [r7, #0]
 8005864:	f7fd ff16 	bl	8003694 <HAL_TIM_Base_Init>
	sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8005868:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800586c:	637b      	str	r3, [r7, #52]	; 0x34
	HAL_TIM_ConfigClockSource(TMR_Handle, &sClockSourceConfig);
 800586e:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8005872:	4619      	mov	r1, r3
 8005874:	6838      	ldr	r0, [r7, #0]
 8005876:	f7fe fccd 	bl	8004214 <HAL_TIM_ConfigClockSource>
	HAL_TIM_IC_Init(TMR_Handle);
 800587a:	6838      	ldr	r0, [r7, #0]
 800587c:	f7fe f8e2 	bl	8003a44 <HAL_TIM_IC_Init>
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8005880:	2300      	movs	r3, #0
 8005882:	62fb      	str	r3, [r7, #44]	; 0x2c
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8005884:	2300      	movs	r3, #0
 8005886:	633b      	str	r3, [r7, #48]	; 0x30
	HAL_TIMEx_MasterConfigSynchronization(TMR_Handle, &sMasterConfig);
 8005888:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800588c:	4619      	mov	r1, r3
 800588e:	6838      	ldr	r0, [r7, #0]
 8005890:	f7ff fa24 	bl	8004cdc <HAL_TIMEx_MasterConfigSynchronization>
	sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8005894:	2300      	movs	r3, #0
 8005896:	61fb      	str	r3, [r7, #28]
	sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8005898:	2301      	movs	r3, #1
 800589a:	623b      	str	r3, [r7, #32]
	sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 800589c:	2300      	movs	r3, #0
 800589e:	627b      	str	r3, [r7, #36]	; 0x24
	sConfigIC.ICFilter = 0;
 80058a0:	2300      	movs	r3, #0
 80058a2:	62bb      	str	r3, [r7, #40]	; 0x28
	HAL_TIM_IC_ConfigChannel(TMR_Handle, &sConfigIC, HCSR04_CfgParam[au8_HCSR04_Instance].IC_TIM_CH);
 80058a4:	79fa      	ldrb	r2, [r7, #7]
 80058a6:	4911      	ldr	r1, [pc, #68]	; (80058ec <HCSR04_Init+0x3d0>)
 80058a8:	4613      	mov	r3, r2
 80058aa:	009b      	lsls	r3, r3, #2
 80058ac:	4413      	add	r3, r2
 80058ae:	009b      	lsls	r3, r3, #2
 80058b0:	440b      	add	r3, r1
 80058b2:	330c      	adds	r3, #12
 80058b4:	681a      	ldr	r2, [r3, #0]
 80058b6:	f107 031c 	add.w	r3, r7, #28
 80058ba:	4619      	mov	r1, r3
 80058bc:	6838      	ldr	r0, [r7, #0]
 80058be:	f7fe fb4b 	bl	8003f58 <HAL_TIM_IC_ConfigChannel>

	/*--------[ Start The ICU Channel ]-------*/

	HAL_TIM_Base_Start_IT(TMR_Handle);
 80058c2:	6838      	ldr	r0, [r7, #0]
 80058c4:	f7fd ff36 	bl	8003734 <HAL_TIM_Base_Start_IT>
	HAL_TIM_IC_Start_IT(TMR_Handle, HCSR04_CfgParam[au8_HCSR04_Instance].IC_TIM_CH);
 80058c8:	79fa      	ldrb	r2, [r7, #7]
 80058ca:	4908      	ldr	r1, [pc, #32]	; (80058ec <HCSR04_Init+0x3d0>)
 80058cc:	4613      	mov	r3, r2
 80058ce:	009b      	lsls	r3, r3, #2
 80058d0:	4413      	add	r3, r2
 80058d2:	009b      	lsls	r3, r3, #2
 80058d4:	440b      	add	r3, r1
 80058d6:	330c      	adds	r3, #12
 80058d8:	681b      	ldr	r3, [r3, #0]
 80058da:	4619      	mov	r1, r3
 80058dc:	6838      	ldr	r0, [r7, #0]
 80058de:	f7fe f90b 	bl	8003af8 <HAL_TIM_IC_Start_IT>
}
 80058e2:	bf00      	nop
 80058e4:	3758      	adds	r7, #88	; 0x58
 80058e6:	46bd      	mov	sp, r7
 80058e8:	bd80      	pop	{r7, pc}
 80058ea:	bf00      	nop
 80058ec:	08008d5c 	.word	0x08008d5c
 80058f0:	20000228 	.word	0x20000228

080058f4 <HCSR04_TMR_OVF_ISR>:


void HCSR04_TMR_OVF_ISR(TIM_HandleTypeDef* htim)
{
 80058f4:	b480      	push	{r7}
 80058f6:	b085      	sub	sp, #20
 80058f8:	af00      	add	r7, sp, #0
 80058fa:	6078      	str	r0, [r7, #4]
	uint8_t i = 0;
 80058fc:	2300      	movs	r3, #0
 80058fe:	73fb      	strb	r3, [r7, #15]
	for(i=0; i<HCSR04_UNITS; i++)
 8005900:	2300      	movs	r3, #0
 8005902:	73fb      	strb	r3, [r7, #15]
 8005904:	e023      	b.n	800594e <HCSR04_TMR_OVF_ISR+0x5a>
	{
		if(htim->Instance == HCSR04_CfgParam[i].TIM_Instance)
 8005906:	687b      	ldr	r3, [r7, #4]
 8005908:	6819      	ldr	r1, [r3, #0]
 800590a:	7bfa      	ldrb	r2, [r7, #15]
 800590c:	4815      	ldr	r0, [pc, #84]	; (8005964 <HCSR04_TMR_OVF_ISR+0x70>)
 800590e:	4613      	mov	r3, r2
 8005910:	009b      	lsls	r3, r3, #2
 8005912:	4413      	add	r3, r2
 8005914:	009b      	lsls	r3, r3, #2
 8005916:	4403      	add	r3, r0
 8005918:	3308      	adds	r3, #8
 800591a:	681b      	ldr	r3, [r3, #0]
 800591c:	4299      	cmp	r1, r3
 800591e:	d113      	bne.n	8005948 <HCSR04_TMR_OVF_ISR+0x54>
		{
			gs_HCSR04_info[i].TMR_OVC++;
 8005920:	7bfa      	ldrb	r2, [r7, #15]
 8005922:	4911      	ldr	r1, [pc, #68]	; (8005968 <HCSR04_TMR_OVF_ISR+0x74>)
 8005924:	4613      	mov	r3, r2
 8005926:	00db      	lsls	r3, r3, #3
 8005928:	4413      	add	r3, r2
 800592a:	009b      	lsls	r3, r3, #2
 800592c:	440b      	add	r3, r1
 800592e:	3302      	adds	r3, #2
 8005930:	881b      	ldrh	r3, [r3, #0]
 8005932:	3301      	adds	r3, #1
 8005934:	b298      	uxth	r0, r3
 8005936:	490c      	ldr	r1, [pc, #48]	; (8005968 <HCSR04_TMR_OVF_ISR+0x74>)
 8005938:	4613      	mov	r3, r2
 800593a:	00db      	lsls	r3, r3, #3
 800593c:	4413      	add	r3, r2
 800593e:	009b      	lsls	r3, r3, #2
 8005940:	440b      	add	r3, r1
 8005942:	3302      	adds	r3, #2
 8005944:	4602      	mov	r2, r0
 8005946:	801a      	strh	r2, [r3, #0]
	for(i=0; i<HCSR04_UNITS; i++)
 8005948:	7bfb      	ldrb	r3, [r7, #15]
 800594a:	3301      	adds	r3, #1
 800594c:	73fb      	strb	r3, [r7, #15]
 800594e:	7bfb      	ldrb	r3, [r7, #15]
 8005950:	2b03      	cmp	r3, #3
 8005952:	d9d8      	bls.n	8005906 <HCSR04_TMR_OVF_ISR+0x12>
		}
	}
}
 8005954:	bf00      	nop
 8005956:	bf00      	nop
 8005958:	3714      	adds	r7, #20
 800595a:	46bd      	mov	sp, r7
 800595c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005960:	4770      	bx	lr
 8005962:	bf00      	nop
 8005964:	08008d5c 	.word	0x08008d5c
 8005968:	20000228 	.word	0x20000228
 800596c:	00000000 	.word	0x00000000

08005970 <HCSR04_TMR_IC_ISR>:


void HCSR04_TMR_IC_ISR(TIM_HandleTypeDef* htim)
{
 8005970:	b5b0      	push	{r4, r5, r7, lr}
 8005972:	b084      	sub	sp, #16
 8005974:	af00      	add	r7, sp, #0
 8005976:	6078      	str	r0, [r7, #4]
	uint8_t i = 0;
 8005978:	2300      	movs	r3, #0
 800597a:	73fb      	strb	r3, [r7, #15]
	uint32_t PS = 0;
 800597c:	2300      	movs	r3, #0
 800597e:	60bb      	str	r3, [r7, #8]
	for(i=0; i<HCSR04_UNITS; i++)
 8005980:	2300      	movs	r3, #0
 8005982:	73fb      	strb	r3, [r7, #15]
 8005984:	e22a      	b.n	8005ddc <HCSR04_TMR_IC_ISR+0x46c>
	{
		if((htim->Instance == HCSR04_CfgParam[i].TIM_Instance) && (htim->Channel == gs_HCSR04_info[i].ACTIV_CH))
 8005986:	687b      	ldr	r3, [r7, #4]
 8005988:	6819      	ldr	r1, [r3, #0]
 800598a:	7bfa      	ldrb	r2, [r7, #15]
 800598c:	486b      	ldr	r0, [pc, #428]	; (8005b3c <HCSR04_TMR_IC_ISR+0x1cc>)
 800598e:	4613      	mov	r3, r2
 8005990:	009b      	lsls	r3, r3, #2
 8005992:	4413      	add	r3, r2
 8005994:	009b      	lsls	r3, r3, #2
 8005996:	4403      	add	r3, r0
 8005998:	3308      	adds	r3, #8
 800599a:	681b      	ldr	r3, [r3, #0]
 800599c:	4299      	cmp	r1, r3
 800599e:	f040 821a 	bne.w	8005dd6 <HCSR04_TMR_IC_ISR+0x466>
 80059a2:	687b      	ldr	r3, [r7, #4]
 80059a4:	7f19      	ldrb	r1, [r3, #28]
 80059a6:	7bfa      	ldrb	r2, [r7, #15]
 80059a8:	4865      	ldr	r0, [pc, #404]	; (8005b40 <HCSR04_TMR_IC_ISR+0x1d0>)
 80059aa:	4613      	mov	r3, r2
 80059ac:	00db      	lsls	r3, r3, #3
 80059ae:	4413      	add	r3, r2
 80059b0:	009b      	lsls	r3, r3, #2
 80059b2:	4403      	add	r3, r0
 80059b4:	3320      	adds	r3, #32
 80059b6:	781b      	ldrb	r3, [r3, #0]
 80059b8:	4299      	cmp	r1, r3
 80059ba:	f040 820c 	bne.w	8005dd6 <HCSR04_TMR_IC_ISR+0x466>
		{
			if (gs_HCSR04_info[i].EDGE_STATE == 0)
 80059be:	7bfa      	ldrb	r2, [r7, #15]
 80059c0:	495f      	ldr	r1, [pc, #380]	; (8005b40 <HCSR04_TMR_IC_ISR+0x1d0>)
 80059c2:	4613      	mov	r3, r2
 80059c4:	00db      	lsls	r3, r3, #3
 80059c6:	4413      	add	r3, r2
 80059c8:	009b      	lsls	r3, r3, #2
 80059ca:	440b      	add	r3, r1
 80059cc:	781b      	ldrb	r3, [r3, #0]
 80059ce:	2b00      	cmp	r3, #0
 80059d0:	f040 80b8 	bne.w	8005b44 <HCSR04_TMR_IC_ISR+0x1d4>
			{
				// Capture T1 & Reverse The ICU Edge Polarity
				gs_HCSR04_info[i].T1 = HAL_TIM_ReadCapturedValue(htim, HCSR04_CfgParam[i].IC_TIM_CH);
 80059d4:	7bfa      	ldrb	r2, [r7, #15]
 80059d6:	4959      	ldr	r1, [pc, #356]	; (8005b3c <HCSR04_TMR_IC_ISR+0x1cc>)
 80059d8:	4613      	mov	r3, r2
 80059da:	009b      	lsls	r3, r3, #2
 80059dc:	4413      	add	r3, r2
 80059de:	009b      	lsls	r3, r3, #2
 80059e0:	440b      	add	r3, r1
 80059e2:	330c      	adds	r3, #12
 80059e4:	681b      	ldr	r3, [r3, #0]
 80059e6:	7bfc      	ldrb	r4, [r7, #15]
 80059e8:	4619      	mov	r1, r3
 80059ea:	6878      	ldr	r0, [r7, #4]
 80059ec:	f7fe fcda 	bl	80043a4 <HAL_TIM_ReadCapturedValue>
 80059f0:	4602      	mov	r2, r0
 80059f2:	4953      	ldr	r1, [pc, #332]	; (8005b40 <HCSR04_TMR_IC_ISR+0x1d0>)
 80059f4:	4623      	mov	r3, r4
 80059f6:	00db      	lsls	r3, r3, #3
 80059f8:	4423      	add	r3, r4
 80059fa:	009b      	lsls	r3, r3, #2
 80059fc:	440b      	add	r3, r1
 80059fe:	330c      	adds	r3, #12
 8005a00:	601a      	str	r2, [r3, #0]
				gs_HCSR04_info[i].EDGE_STATE = 1;
 8005a02:	7bfa      	ldrb	r2, [r7, #15]
 8005a04:	494e      	ldr	r1, [pc, #312]	; (8005b40 <HCSR04_TMR_IC_ISR+0x1d0>)
 8005a06:	4613      	mov	r3, r2
 8005a08:	00db      	lsls	r3, r3, #3
 8005a0a:	4413      	add	r3, r2
 8005a0c:	009b      	lsls	r3, r3, #2
 8005a0e:	440b      	add	r3, r1
 8005a10:	2201      	movs	r2, #1
 8005a12:	701a      	strb	r2, [r3, #0]
				__HAL_TIM_SET_CAPTUREPOLARITY(htim, HCSR04_CfgParam[i].IC_TIM_CH, TIM_INPUTCHANNELPOLARITY_FALLING);
 8005a14:	7bfa      	ldrb	r2, [r7, #15]
 8005a16:	4949      	ldr	r1, [pc, #292]	; (8005b3c <HCSR04_TMR_IC_ISR+0x1cc>)
 8005a18:	4613      	mov	r3, r2
 8005a1a:	009b      	lsls	r3, r3, #2
 8005a1c:	4413      	add	r3, r2
 8005a1e:	009b      	lsls	r3, r3, #2
 8005a20:	440b      	add	r3, r1
 8005a22:	330c      	adds	r3, #12
 8005a24:	681b      	ldr	r3, [r3, #0]
 8005a26:	2b00      	cmp	r3, #0
 8005a28:	d108      	bne.n	8005a3c <HCSR04_TMR_IC_ISR+0xcc>
 8005a2a:	687b      	ldr	r3, [r7, #4]
 8005a2c:	681b      	ldr	r3, [r3, #0]
 8005a2e:	6a1a      	ldr	r2, [r3, #32]
 8005a30:	687b      	ldr	r3, [r7, #4]
 8005a32:	681b      	ldr	r3, [r3, #0]
 8005a34:	f022 020a 	bic.w	r2, r2, #10
 8005a38:	621a      	str	r2, [r3, #32]
 8005a3a:	e02f      	b.n	8005a9c <HCSR04_TMR_IC_ISR+0x12c>
 8005a3c:	7bfa      	ldrb	r2, [r7, #15]
 8005a3e:	493f      	ldr	r1, [pc, #252]	; (8005b3c <HCSR04_TMR_IC_ISR+0x1cc>)
 8005a40:	4613      	mov	r3, r2
 8005a42:	009b      	lsls	r3, r3, #2
 8005a44:	4413      	add	r3, r2
 8005a46:	009b      	lsls	r3, r3, #2
 8005a48:	440b      	add	r3, r1
 8005a4a:	330c      	adds	r3, #12
 8005a4c:	681b      	ldr	r3, [r3, #0]
 8005a4e:	2b04      	cmp	r3, #4
 8005a50:	d108      	bne.n	8005a64 <HCSR04_TMR_IC_ISR+0xf4>
 8005a52:	687b      	ldr	r3, [r7, #4]
 8005a54:	681b      	ldr	r3, [r3, #0]
 8005a56:	6a1b      	ldr	r3, [r3, #32]
 8005a58:	687a      	ldr	r2, [r7, #4]
 8005a5a:	6812      	ldr	r2, [r2, #0]
 8005a5c:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8005a60:	6213      	str	r3, [r2, #32]
 8005a62:	e01b      	b.n	8005a9c <HCSR04_TMR_IC_ISR+0x12c>
 8005a64:	7bfa      	ldrb	r2, [r7, #15]
 8005a66:	4935      	ldr	r1, [pc, #212]	; (8005b3c <HCSR04_TMR_IC_ISR+0x1cc>)
 8005a68:	4613      	mov	r3, r2
 8005a6a:	009b      	lsls	r3, r3, #2
 8005a6c:	4413      	add	r3, r2
 8005a6e:	009b      	lsls	r3, r3, #2
 8005a70:	440b      	add	r3, r1
 8005a72:	330c      	adds	r3, #12
 8005a74:	681b      	ldr	r3, [r3, #0]
 8005a76:	2b08      	cmp	r3, #8
 8005a78:	d108      	bne.n	8005a8c <HCSR04_TMR_IC_ISR+0x11c>
 8005a7a:	687b      	ldr	r3, [r7, #4]
 8005a7c:	681b      	ldr	r3, [r3, #0]
 8005a7e:	6a1b      	ldr	r3, [r3, #32]
 8005a80:	687a      	ldr	r2, [r7, #4]
 8005a82:	6812      	ldr	r2, [r2, #0]
 8005a84:	f423 6320 	bic.w	r3, r3, #2560	; 0xa00
 8005a88:	6213      	str	r3, [r2, #32]
 8005a8a:	e007      	b.n	8005a9c <HCSR04_TMR_IC_ISR+0x12c>
 8005a8c:	687b      	ldr	r3, [r7, #4]
 8005a8e:	681b      	ldr	r3, [r3, #0]
 8005a90:	6a1b      	ldr	r3, [r3, #32]
 8005a92:	687a      	ldr	r2, [r7, #4]
 8005a94:	6812      	ldr	r2, [r2, #0]
 8005a96:	f423 4320 	bic.w	r3, r3, #40960	; 0xa000
 8005a9a:	6213      	str	r3, [r2, #32]
 8005a9c:	7bfa      	ldrb	r2, [r7, #15]
 8005a9e:	4927      	ldr	r1, [pc, #156]	; (8005b3c <HCSR04_TMR_IC_ISR+0x1cc>)
 8005aa0:	4613      	mov	r3, r2
 8005aa2:	009b      	lsls	r3, r3, #2
 8005aa4:	4413      	add	r3, r2
 8005aa6:	009b      	lsls	r3, r3, #2
 8005aa8:	440b      	add	r3, r1
 8005aaa:	330c      	adds	r3, #12
 8005aac:	681b      	ldr	r3, [r3, #0]
 8005aae:	2b00      	cmp	r3, #0
 8005ab0:	d108      	bne.n	8005ac4 <HCSR04_TMR_IC_ISR+0x154>
 8005ab2:	687b      	ldr	r3, [r7, #4]
 8005ab4:	681b      	ldr	r3, [r3, #0]
 8005ab6:	6a1a      	ldr	r2, [r3, #32]
 8005ab8:	687b      	ldr	r3, [r7, #4]
 8005aba:	681b      	ldr	r3, [r3, #0]
 8005abc:	f042 0202 	orr.w	r2, r2, #2
 8005ac0:	621a      	str	r2, [r3, #32]
 8005ac2:	e02f      	b.n	8005b24 <HCSR04_TMR_IC_ISR+0x1b4>
 8005ac4:	7bfa      	ldrb	r2, [r7, #15]
 8005ac6:	491d      	ldr	r1, [pc, #116]	; (8005b3c <HCSR04_TMR_IC_ISR+0x1cc>)
 8005ac8:	4613      	mov	r3, r2
 8005aca:	009b      	lsls	r3, r3, #2
 8005acc:	4413      	add	r3, r2
 8005ace:	009b      	lsls	r3, r3, #2
 8005ad0:	440b      	add	r3, r1
 8005ad2:	330c      	adds	r3, #12
 8005ad4:	681b      	ldr	r3, [r3, #0]
 8005ad6:	2b04      	cmp	r3, #4
 8005ad8:	d108      	bne.n	8005aec <HCSR04_TMR_IC_ISR+0x17c>
 8005ada:	687b      	ldr	r3, [r7, #4]
 8005adc:	681b      	ldr	r3, [r3, #0]
 8005ade:	6a1b      	ldr	r3, [r3, #32]
 8005ae0:	687a      	ldr	r2, [r7, #4]
 8005ae2:	6812      	ldr	r2, [r2, #0]
 8005ae4:	f043 0320 	orr.w	r3, r3, #32
 8005ae8:	6213      	str	r3, [r2, #32]
 8005aea:	e01b      	b.n	8005b24 <HCSR04_TMR_IC_ISR+0x1b4>
 8005aec:	7bfa      	ldrb	r2, [r7, #15]
 8005aee:	4913      	ldr	r1, [pc, #76]	; (8005b3c <HCSR04_TMR_IC_ISR+0x1cc>)
 8005af0:	4613      	mov	r3, r2
 8005af2:	009b      	lsls	r3, r3, #2
 8005af4:	4413      	add	r3, r2
 8005af6:	009b      	lsls	r3, r3, #2
 8005af8:	440b      	add	r3, r1
 8005afa:	330c      	adds	r3, #12
 8005afc:	681b      	ldr	r3, [r3, #0]
 8005afe:	2b08      	cmp	r3, #8
 8005b00:	d108      	bne.n	8005b14 <HCSR04_TMR_IC_ISR+0x1a4>
 8005b02:	687b      	ldr	r3, [r7, #4]
 8005b04:	681b      	ldr	r3, [r3, #0]
 8005b06:	6a1b      	ldr	r3, [r3, #32]
 8005b08:	687a      	ldr	r2, [r7, #4]
 8005b0a:	6812      	ldr	r2, [r2, #0]
 8005b0c:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8005b10:	6213      	str	r3, [r2, #32]
 8005b12:	e007      	b.n	8005b24 <HCSR04_TMR_IC_ISR+0x1b4>
 8005b14:	687b      	ldr	r3, [r7, #4]
 8005b16:	681b      	ldr	r3, [r3, #0]
 8005b18:	6a1b      	ldr	r3, [r3, #32]
 8005b1a:	687a      	ldr	r2, [r7, #4]
 8005b1c:	6812      	ldr	r2, [r2, #0]
 8005b1e:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8005b22:	6213      	str	r3, [r2, #32]
				gs_HCSR04_info[i].TMR_OVC = 0;
 8005b24:	7bfa      	ldrb	r2, [r7, #15]
 8005b26:	4906      	ldr	r1, [pc, #24]	; (8005b40 <HCSR04_TMR_IC_ISR+0x1d0>)
 8005b28:	4613      	mov	r3, r2
 8005b2a:	00db      	lsls	r3, r3, #3
 8005b2c:	4413      	add	r3, r2
 8005b2e:	009b      	lsls	r3, r3, #2
 8005b30:	440b      	add	r3, r1
 8005b32:	3302      	adds	r3, #2
 8005b34:	2200      	movs	r2, #0
 8005b36:	801a      	strh	r2, [r3, #0]
 8005b38:	e14d      	b.n	8005dd6 <HCSR04_TMR_IC_ISR+0x466>
 8005b3a:	bf00      	nop
 8005b3c:	08008d5c 	.word	0x08008d5c
 8005b40:	20000228 	.word	0x20000228
			}
			else if (gs_HCSR04_info[i].EDGE_STATE == 1)
 8005b44:	7bfa      	ldrb	r2, [r7, #15]
 8005b46:	49ac      	ldr	r1, [pc, #688]	; (8005df8 <HCSR04_TMR_IC_ISR+0x488>)
 8005b48:	4613      	mov	r3, r2
 8005b4a:	00db      	lsls	r3, r3, #3
 8005b4c:	4413      	add	r3, r2
 8005b4e:	009b      	lsls	r3, r3, #2
 8005b50:	440b      	add	r3, r1
 8005b52:	781b      	ldrb	r3, [r3, #0]
 8005b54:	2b01      	cmp	r3, #1
 8005b56:	f040 813e 	bne.w	8005dd6 <HCSR04_TMR_IC_ISR+0x466>
			{
				// Read The Current ARR & Prescaler Values For The Timer
				PS = HCSR04_CfgParam[i].TIM_Instance->PSC;
 8005b5a:	7bfa      	ldrb	r2, [r7, #15]
 8005b5c:	49a7      	ldr	r1, [pc, #668]	; (8005dfc <HCSR04_TMR_IC_ISR+0x48c>)
 8005b5e:	4613      	mov	r3, r2
 8005b60:	009b      	lsls	r3, r3, #2
 8005b62:	4413      	add	r3, r2
 8005b64:	009b      	lsls	r3, r3, #2
 8005b66:	440b      	add	r3, r1
 8005b68:	3308      	adds	r3, #8
 8005b6a:	681b      	ldr	r3, [r3, #0]
 8005b6c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005b6e:	60bb      	str	r3, [r7, #8]
				gs_HCSR04_info[i].TMR_ARR = HCSR04_CfgParam[i].TIM_Instance->ARR;
 8005b70:	7bfa      	ldrb	r2, [r7, #15]
 8005b72:	49a2      	ldr	r1, [pc, #648]	; (8005dfc <HCSR04_TMR_IC_ISR+0x48c>)
 8005b74:	4613      	mov	r3, r2
 8005b76:	009b      	lsls	r3, r3, #2
 8005b78:	4413      	add	r3, r2
 8005b7a:	009b      	lsls	r3, r3, #2
 8005b7c:	440b      	add	r3, r1
 8005b7e:	3308      	adds	r3, #8
 8005b80:	681b      	ldr	r3, [r3, #0]
 8005b82:	7bfa      	ldrb	r2, [r7, #15]
 8005b84:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8005b86:	489c      	ldr	r0, [pc, #624]	; (8005df8 <HCSR04_TMR_IC_ISR+0x488>)
 8005b88:	4613      	mov	r3, r2
 8005b8a:	00db      	lsls	r3, r3, #3
 8005b8c:	4413      	add	r3, r2
 8005b8e:	009b      	lsls	r3, r3, #2
 8005b90:	4403      	add	r3, r0
 8005b92:	3308      	adds	r3, #8
 8005b94:	6019      	str	r1, [r3, #0]
				// Capture T2 & Calculate The Distance
				gs_HCSR04_info[i].T2 = HAL_TIM_ReadCapturedValue(htim, HCSR04_CfgParam[i].IC_TIM_CH);
 8005b96:	7bfa      	ldrb	r2, [r7, #15]
 8005b98:	4998      	ldr	r1, [pc, #608]	; (8005dfc <HCSR04_TMR_IC_ISR+0x48c>)
 8005b9a:	4613      	mov	r3, r2
 8005b9c:	009b      	lsls	r3, r3, #2
 8005b9e:	4413      	add	r3, r2
 8005ba0:	009b      	lsls	r3, r3, #2
 8005ba2:	440b      	add	r3, r1
 8005ba4:	330c      	adds	r3, #12
 8005ba6:	681b      	ldr	r3, [r3, #0]
 8005ba8:	7bfc      	ldrb	r4, [r7, #15]
 8005baa:	4619      	mov	r1, r3
 8005bac:	6878      	ldr	r0, [r7, #4]
 8005bae:	f7fe fbf9 	bl	80043a4 <HAL_TIM_ReadCapturedValue>
 8005bb2:	4602      	mov	r2, r0
 8005bb4:	4990      	ldr	r1, [pc, #576]	; (8005df8 <HCSR04_TMR_IC_ISR+0x488>)
 8005bb6:	4623      	mov	r3, r4
 8005bb8:	00db      	lsls	r3, r3, #3
 8005bba:	4423      	add	r3, r4
 8005bbc:	009b      	lsls	r3, r3, #2
 8005bbe:	440b      	add	r3, r1
 8005bc0:	3310      	adds	r3, #16
 8005bc2:	601a      	str	r2, [r3, #0]
				gs_HCSR04_info[i].T2 += (gs_HCSR04_info[i].TMR_OVC * (gs_HCSR04_info[i].TMR_ARR+1));
 8005bc4:	7bfa      	ldrb	r2, [r7, #15]
 8005bc6:	498c      	ldr	r1, [pc, #560]	; (8005df8 <HCSR04_TMR_IC_ISR+0x488>)
 8005bc8:	4613      	mov	r3, r2
 8005bca:	00db      	lsls	r3, r3, #3
 8005bcc:	4413      	add	r3, r2
 8005bce:	009b      	lsls	r3, r3, #2
 8005bd0:	440b      	add	r3, r1
 8005bd2:	3310      	adds	r3, #16
 8005bd4:	6819      	ldr	r1, [r3, #0]
 8005bd6:	7bfa      	ldrb	r2, [r7, #15]
 8005bd8:	4887      	ldr	r0, [pc, #540]	; (8005df8 <HCSR04_TMR_IC_ISR+0x488>)
 8005bda:	4613      	mov	r3, r2
 8005bdc:	00db      	lsls	r3, r3, #3
 8005bde:	4413      	add	r3, r2
 8005be0:	009b      	lsls	r3, r3, #2
 8005be2:	4403      	add	r3, r0
 8005be4:	3302      	adds	r3, #2
 8005be6:	881b      	ldrh	r3, [r3, #0]
 8005be8:	461c      	mov	r4, r3
 8005bea:	7bfa      	ldrb	r2, [r7, #15]
 8005bec:	4882      	ldr	r0, [pc, #520]	; (8005df8 <HCSR04_TMR_IC_ISR+0x488>)
 8005bee:	4613      	mov	r3, r2
 8005bf0:	00db      	lsls	r3, r3, #3
 8005bf2:	4413      	add	r3, r2
 8005bf4:	009b      	lsls	r3, r3, #2
 8005bf6:	4403      	add	r3, r0
 8005bf8:	3308      	adds	r3, #8
 8005bfa:	681b      	ldr	r3, [r3, #0]
 8005bfc:	3301      	adds	r3, #1
 8005bfe:	fb03 f304 	mul.w	r3, r3, r4
 8005c02:	7bfa      	ldrb	r2, [r7, #15]
 8005c04:	4419      	add	r1, r3
 8005c06:	487c      	ldr	r0, [pc, #496]	; (8005df8 <HCSR04_TMR_IC_ISR+0x488>)
 8005c08:	4613      	mov	r3, r2
 8005c0a:	00db      	lsls	r3, r3, #3
 8005c0c:	4413      	add	r3, r2
 8005c0e:	009b      	lsls	r3, r3, #2
 8005c10:	4403      	add	r3, r0
 8005c12:	3310      	adds	r3, #16
 8005c14:	6019      	str	r1, [r3, #0]
				gs_HCSR04_info[i].DIFF = gs_HCSR04_info[i].T2 - gs_HCSR04_info[i].T1;
 8005c16:	7bfa      	ldrb	r2, [r7, #15]
 8005c18:	4977      	ldr	r1, [pc, #476]	; (8005df8 <HCSR04_TMR_IC_ISR+0x488>)
 8005c1a:	4613      	mov	r3, r2
 8005c1c:	00db      	lsls	r3, r3, #3
 8005c1e:	4413      	add	r3, r2
 8005c20:	009b      	lsls	r3, r3, #2
 8005c22:	440b      	add	r3, r1
 8005c24:	3310      	adds	r3, #16
 8005c26:	6819      	ldr	r1, [r3, #0]
 8005c28:	7bfa      	ldrb	r2, [r7, #15]
 8005c2a:	4873      	ldr	r0, [pc, #460]	; (8005df8 <HCSR04_TMR_IC_ISR+0x488>)
 8005c2c:	4613      	mov	r3, r2
 8005c2e:	00db      	lsls	r3, r3, #3
 8005c30:	4413      	add	r3, r2
 8005c32:	009b      	lsls	r3, r3, #2
 8005c34:	4403      	add	r3, r0
 8005c36:	330c      	adds	r3, #12
 8005c38:	681b      	ldr	r3, [r3, #0]
 8005c3a:	7bfa      	ldrb	r2, [r7, #15]
 8005c3c:	1ac9      	subs	r1, r1, r3
 8005c3e:	486e      	ldr	r0, [pc, #440]	; (8005df8 <HCSR04_TMR_IC_ISR+0x488>)
 8005c40:	4613      	mov	r3, r2
 8005c42:	00db      	lsls	r3, r3, #3
 8005c44:	4413      	add	r3, r2
 8005c46:	009b      	lsls	r3, r3, #2
 8005c48:	4403      	add	r3, r0
 8005c4a:	3314      	adds	r3, #20
 8005c4c:	6019      	str	r1, [r3, #0]
				// Write The Distance Value To The Global Struct & Reverse The ICU Edge
				gs_HCSR04_info[i].DISTANCE = (gs_HCSR04_info[i].DIFF * 0.017)/(HCSR04_CfgParam[i].TIM_CLK_MHz/(PS+1));
 8005c4e:	7bfa      	ldrb	r2, [r7, #15]
 8005c50:	4969      	ldr	r1, [pc, #420]	; (8005df8 <HCSR04_TMR_IC_ISR+0x488>)
 8005c52:	4613      	mov	r3, r2
 8005c54:	00db      	lsls	r3, r3, #3
 8005c56:	4413      	add	r3, r2
 8005c58:	009b      	lsls	r3, r3, #2
 8005c5a:	440b      	add	r3, r1
 8005c5c:	3314      	adds	r3, #20
 8005c5e:	681b      	ldr	r3, [r3, #0]
 8005c60:	4618      	mov	r0, r3
 8005c62:	f7fa fc6f 	bl	8000544 <__aeabi_ui2d>
 8005c66:	a362      	add	r3, pc, #392	; (adr r3, 8005df0 <HCSR04_TMR_IC_ISR+0x480>)
 8005c68:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005c6c:	f7fa fce4 	bl	8000638 <__aeabi_dmul>
 8005c70:	4602      	mov	r2, r0
 8005c72:	460b      	mov	r3, r1
 8005c74:	4614      	mov	r4, r2
 8005c76:	461d      	mov	r5, r3
 8005c78:	7bfa      	ldrb	r2, [r7, #15]
 8005c7a:	4960      	ldr	r1, [pc, #384]	; (8005dfc <HCSR04_TMR_IC_ISR+0x48c>)
 8005c7c:	4613      	mov	r3, r2
 8005c7e:	009b      	lsls	r3, r3, #2
 8005c80:	4413      	add	r3, r2
 8005c82:	009b      	lsls	r3, r3, #2
 8005c84:	440b      	add	r3, r1
 8005c86:	3310      	adds	r3, #16
 8005c88:	681a      	ldr	r2, [r3, #0]
 8005c8a:	68bb      	ldr	r3, [r7, #8]
 8005c8c:	3301      	adds	r3, #1
 8005c8e:	fbb2 f3f3 	udiv	r3, r2, r3
 8005c92:	4618      	mov	r0, r3
 8005c94:	f7fa fc56 	bl	8000544 <__aeabi_ui2d>
 8005c98:	4602      	mov	r2, r0
 8005c9a:	460b      	mov	r3, r1
 8005c9c:	4620      	mov	r0, r4
 8005c9e:	4629      	mov	r1, r5
 8005ca0:	f7fa fdf4 	bl	800088c <__aeabi_ddiv>
 8005ca4:	4602      	mov	r2, r0
 8005ca6:	460b      	mov	r3, r1
 8005ca8:	7bfc      	ldrb	r4, [r7, #15]
 8005caa:	4610      	mov	r0, r2
 8005cac:	4619      	mov	r1, r3
 8005cae:	f7fa ff9b 	bl	8000be8 <__aeabi_d2f>
 8005cb2:	4602      	mov	r2, r0
 8005cb4:	4950      	ldr	r1, [pc, #320]	; (8005df8 <HCSR04_TMR_IC_ISR+0x488>)
 8005cb6:	4623      	mov	r3, r4
 8005cb8:	00db      	lsls	r3, r3, #3
 8005cba:	4423      	add	r3, r4
 8005cbc:	009b      	lsls	r3, r3, #2
 8005cbe:	440b      	add	r3, r1
 8005cc0:	3318      	adds	r3, #24
 8005cc2:	601a      	str	r2, [r3, #0]
				gs_HCSR04_info[i].EDGE_STATE = 0;
 8005cc4:	7bfa      	ldrb	r2, [r7, #15]
 8005cc6:	494c      	ldr	r1, [pc, #304]	; (8005df8 <HCSR04_TMR_IC_ISR+0x488>)
 8005cc8:	4613      	mov	r3, r2
 8005cca:	00db      	lsls	r3, r3, #3
 8005ccc:	4413      	add	r3, r2
 8005cce:	009b      	lsls	r3, r3, #2
 8005cd0:	440b      	add	r3, r1
 8005cd2:	2200      	movs	r2, #0
 8005cd4:	701a      	strb	r2, [r3, #0]
				__HAL_TIM_SET_CAPTUREPOLARITY(htim, HCSR04_CfgParam[i].IC_TIM_CH, TIM_INPUTCHANNELPOLARITY_RISING);
 8005cd6:	7bfa      	ldrb	r2, [r7, #15]
 8005cd8:	4948      	ldr	r1, [pc, #288]	; (8005dfc <HCSR04_TMR_IC_ISR+0x48c>)
 8005cda:	4613      	mov	r3, r2
 8005cdc:	009b      	lsls	r3, r3, #2
 8005cde:	4413      	add	r3, r2
 8005ce0:	009b      	lsls	r3, r3, #2
 8005ce2:	440b      	add	r3, r1
 8005ce4:	330c      	adds	r3, #12
 8005ce6:	681b      	ldr	r3, [r3, #0]
 8005ce8:	2b00      	cmp	r3, #0
 8005cea:	d108      	bne.n	8005cfe <HCSR04_TMR_IC_ISR+0x38e>
 8005cec:	687b      	ldr	r3, [r7, #4]
 8005cee:	681b      	ldr	r3, [r3, #0]
 8005cf0:	6a1a      	ldr	r2, [r3, #32]
 8005cf2:	687b      	ldr	r3, [r7, #4]
 8005cf4:	681b      	ldr	r3, [r3, #0]
 8005cf6:	f022 020a 	bic.w	r2, r2, #10
 8005cfa:	621a      	str	r2, [r3, #32]
 8005cfc:	e02f      	b.n	8005d5e <HCSR04_TMR_IC_ISR+0x3ee>
 8005cfe:	7bfa      	ldrb	r2, [r7, #15]
 8005d00:	493e      	ldr	r1, [pc, #248]	; (8005dfc <HCSR04_TMR_IC_ISR+0x48c>)
 8005d02:	4613      	mov	r3, r2
 8005d04:	009b      	lsls	r3, r3, #2
 8005d06:	4413      	add	r3, r2
 8005d08:	009b      	lsls	r3, r3, #2
 8005d0a:	440b      	add	r3, r1
 8005d0c:	330c      	adds	r3, #12
 8005d0e:	681b      	ldr	r3, [r3, #0]
 8005d10:	2b04      	cmp	r3, #4
 8005d12:	d108      	bne.n	8005d26 <HCSR04_TMR_IC_ISR+0x3b6>
 8005d14:	687b      	ldr	r3, [r7, #4]
 8005d16:	681b      	ldr	r3, [r3, #0]
 8005d18:	6a1b      	ldr	r3, [r3, #32]
 8005d1a:	687a      	ldr	r2, [r7, #4]
 8005d1c:	6812      	ldr	r2, [r2, #0]
 8005d1e:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8005d22:	6213      	str	r3, [r2, #32]
 8005d24:	e01b      	b.n	8005d5e <HCSR04_TMR_IC_ISR+0x3ee>
 8005d26:	7bfa      	ldrb	r2, [r7, #15]
 8005d28:	4934      	ldr	r1, [pc, #208]	; (8005dfc <HCSR04_TMR_IC_ISR+0x48c>)
 8005d2a:	4613      	mov	r3, r2
 8005d2c:	009b      	lsls	r3, r3, #2
 8005d2e:	4413      	add	r3, r2
 8005d30:	009b      	lsls	r3, r3, #2
 8005d32:	440b      	add	r3, r1
 8005d34:	330c      	adds	r3, #12
 8005d36:	681b      	ldr	r3, [r3, #0]
 8005d38:	2b08      	cmp	r3, #8
 8005d3a:	d108      	bne.n	8005d4e <HCSR04_TMR_IC_ISR+0x3de>
 8005d3c:	687b      	ldr	r3, [r7, #4]
 8005d3e:	681b      	ldr	r3, [r3, #0]
 8005d40:	6a1b      	ldr	r3, [r3, #32]
 8005d42:	687a      	ldr	r2, [r7, #4]
 8005d44:	6812      	ldr	r2, [r2, #0]
 8005d46:	f423 6320 	bic.w	r3, r3, #2560	; 0xa00
 8005d4a:	6213      	str	r3, [r2, #32]
 8005d4c:	e007      	b.n	8005d5e <HCSR04_TMR_IC_ISR+0x3ee>
 8005d4e:	687b      	ldr	r3, [r7, #4]
 8005d50:	681b      	ldr	r3, [r3, #0]
 8005d52:	6a1b      	ldr	r3, [r3, #32]
 8005d54:	687a      	ldr	r2, [r7, #4]
 8005d56:	6812      	ldr	r2, [r2, #0]
 8005d58:	f423 4320 	bic.w	r3, r3, #40960	; 0xa000
 8005d5c:	6213      	str	r3, [r2, #32]
 8005d5e:	7bfa      	ldrb	r2, [r7, #15]
 8005d60:	4926      	ldr	r1, [pc, #152]	; (8005dfc <HCSR04_TMR_IC_ISR+0x48c>)
 8005d62:	4613      	mov	r3, r2
 8005d64:	009b      	lsls	r3, r3, #2
 8005d66:	4413      	add	r3, r2
 8005d68:	009b      	lsls	r3, r3, #2
 8005d6a:	440b      	add	r3, r1
 8005d6c:	330c      	adds	r3, #12
 8005d6e:	681b      	ldr	r3, [r3, #0]
 8005d70:	2b00      	cmp	r3, #0
 8005d72:	d106      	bne.n	8005d82 <HCSR04_TMR_IC_ISR+0x412>
 8005d74:	687b      	ldr	r3, [r7, #4]
 8005d76:	681a      	ldr	r2, [r3, #0]
 8005d78:	687b      	ldr	r3, [r7, #4]
 8005d7a:	681b      	ldr	r3, [r3, #0]
 8005d7c:	6a12      	ldr	r2, [r2, #32]
 8005d7e:	621a      	str	r2, [r3, #32]
 8005d80:	e029      	b.n	8005dd6 <HCSR04_TMR_IC_ISR+0x466>
 8005d82:	7bfa      	ldrb	r2, [r7, #15]
 8005d84:	491d      	ldr	r1, [pc, #116]	; (8005dfc <HCSR04_TMR_IC_ISR+0x48c>)
 8005d86:	4613      	mov	r3, r2
 8005d88:	009b      	lsls	r3, r3, #2
 8005d8a:	4413      	add	r3, r2
 8005d8c:	009b      	lsls	r3, r3, #2
 8005d8e:	440b      	add	r3, r1
 8005d90:	330c      	adds	r3, #12
 8005d92:	681b      	ldr	r3, [r3, #0]
 8005d94:	2b04      	cmp	r3, #4
 8005d96:	d106      	bne.n	8005da6 <HCSR04_TMR_IC_ISR+0x436>
 8005d98:	687b      	ldr	r3, [r7, #4]
 8005d9a:	681b      	ldr	r3, [r3, #0]
 8005d9c:	687a      	ldr	r2, [r7, #4]
 8005d9e:	6812      	ldr	r2, [r2, #0]
 8005da0:	6a1b      	ldr	r3, [r3, #32]
 8005da2:	6213      	str	r3, [r2, #32]
 8005da4:	e017      	b.n	8005dd6 <HCSR04_TMR_IC_ISR+0x466>
 8005da6:	7bfa      	ldrb	r2, [r7, #15]
 8005da8:	4914      	ldr	r1, [pc, #80]	; (8005dfc <HCSR04_TMR_IC_ISR+0x48c>)
 8005daa:	4613      	mov	r3, r2
 8005dac:	009b      	lsls	r3, r3, #2
 8005dae:	4413      	add	r3, r2
 8005db0:	009b      	lsls	r3, r3, #2
 8005db2:	440b      	add	r3, r1
 8005db4:	330c      	adds	r3, #12
 8005db6:	681b      	ldr	r3, [r3, #0]
 8005db8:	2b08      	cmp	r3, #8
 8005dba:	d106      	bne.n	8005dca <HCSR04_TMR_IC_ISR+0x45a>
 8005dbc:	687b      	ldr	r3, [r7, #4]
 8005dbe:	681b      	ldr	r3, [r3, #0]
 8005dc0:	687a      	ldr	r2, [r7, #4]
 8005dc2:	6812      	ldr	r2, [r2, #0]
 8005dc4:	6a1b      	ldr	r3, [r3, #32]
 8005dc6:	6213      	str	r3, [r2, #32]
 8005dc8:	e005      	b.n	8005dd6 <HCSR04_TMR_IC_ISR+0x466>
 8005dca:	687b      	ldr	r3, [r7, #4]
 8005dcc:	681b      	ldr	r3, [r3, #0]
 8005dce:	687a      	ldr	r2, [r7, #4]
 8005dd0:	6812      	ldr	r2, [r2, #0]
 8005dd2:	6a1b      	ldr	r3, [r3, #32]
 8005dd4:	6213      	str	r3, [r2, #32]
	for(i=0; i<HCSR04_UNITS; i++)
 8005dd6:	7bfb      	ldrb	r3, [r7, #15]
 8005dd8:	3301      	adds	r3, #1
 8005dda:	73fb      	strb	r3, [r7, #15]
 8005ddc:	7bfb      	ldrb	r3, [r7, #15]
 8005dde:	2b03      	cmp	r3, #3
 8005de0:	f67f add1 	bls.w	8005986 <HCSR04_TMR_IC_ISR+0x16>
			}
		}
	}
}
 8005de4:	bf00      	nop
 8005de6:	bf00      	nop
 8005de8:	3710      	adds	r7, #16
 8005dea:	46bd      	mov	sp, r7
 8005dec:	bdb0      	pop	{r4, r5, r7, pc}
 8005dee:	bf00      	nop
 8005df0:	b020c49c 	.word	0xb020c49c
 8005df4:	3f916872 	.word	0x3f916872
 8005df8:	20000228 	.word	0x20000228
 8005dfc:	08008d5c 	.word	0x08008d5c

08005e00 <HCSR04_Read>:

float HCSR04_Read(uint8_t au8_HCSR04_Instance)
{
 8005e00:	b480      	push	{r7}
 8005e02:	b083      	sub	sp, #12
 8005e04:	af00      	add	r7, sp, #0
 8005e06:	4603      	mov	r3, r0
 8005e08:	71fb      	strb	r3, [r7, #7]
	return gs_HCSR04_info[au8_HCSR04_Instance].DISTANCE;
 8005e0a:	79fa      	ldrb	r2, [r7, #7]
 8005e0c:	4908      	ldr	r1, [pc, #32]	; (8005e30 <HCSR04_Read+0x30>)
 8005e0e:	4613      	mov	r3, r2
 8005e10:	00db      	lsls	r3, r3, #3
 8005e12:	4413      	add	r3, r2
 8005e14:	009b      	lsls	r3, r3, #2
 8005e16:	440b      	add	r3, r1
 8005e18:	3318      	adds	r3, #24
 8005e1a:	681b      	ldr	r3, [r3, #0]
 8005e1c:	ee07 3a90 	vmov	s15, r3
}
 8005e20:	eeb0 0a67 	vmov.f32	s0, s15
 8005e24:	370c      	adds	r7, #12
 8005e26:	46bd      	mov	sp, r7
 8005e28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e2c:	4770      	bx	lr
 8005e2e:	bf00      	nop
 8005e30:	20000228 	.word	0x20000228

08005e34 <HCSR04_Trigger>:

void HCSR04_Trigger(uint8_t au8_HCSR04_Instance)
{
 8005e34:	b580      	push	{r7, lr}
 8005e36:	b082      	sub	sp, #8
 8005e38:	af00      	add	r7, sp, #0
 8005e3a:	4603      	mov	r3, r0
 8005e3c:	71fb      	strb	r3, [r7, #7]
	HAL_GPIO_WritePin(HCSR04_CfgParam[au8_HCSR04_Instance].TRIG_GPIO, HCSR04_CfgParam[au8_HCSR04_Instance].TRIG_PIN, 1);
 8005e3e:	79fa      	ldrb	r2, [r7, #7]
 8005e40:	4917      	ldr	r1, [pc, #92]	; (8005ea0 <HCSR04_Trigger+0x6c>)
 8005e42:	4613      	mov	r3, r2
 8005e44:	009b      	lsls	r3, r3, #2
 8005e46:	4413      	add	r3, r2
 8005e48:	009b      	lsls	r3, r3, #2
 8005e4a:	440b      	add	r3, r1
 8005e4c:	6818      	ldr	r0, [r3, #0]
 8005e4e:	79fa      	ldrb	r2, [r7, #7]
 8005e50:	4913      	ldr	r1, [pc, #76]	; (8005ea0 <HCSR04_Trigger+0x6c>)
 8005e52:	4613      	mov	r3, r2
 8005e54:	009b      	lsls	r3, r3, #2
 8005e56:	4413      	add	r3, r2
 8005e58:	009b      	lsls	r3, r3, #2
 8005e5a:	440b      	add	r3, r1
 8005e5c:	3304      	adds	r3, #4
 8005e5e:	881b      	ldrh	r3, [r3, #0]
 8005e60:	2201      	movs	r2, #1
 8005e62:	4619      	mov	r1, r3
 8005e64:	f7fc fe92 	bl	8002b8c <HAL_GPIO_WritePin>
	DWT_Delay_us(2);
 8005e68:	2002      	movs	r0, #2
 8005e6a:	f7ff fb2f 	bl	80054cc <DWT_Delay_us>
	HAL_GPIO_WritePin(HCSR04_CfgParam[au8_HCSR04_Instance].TRIG_GPIO, HCSR04_CfgParam[au8_HCSR04_Instance].TRIG_PIN, 0);
 8005e6e:	79fa      	ldrb	r2, [r7, #7]
 8005e70:	490b      	ldr	r1, [pc, #44]	; (8005ea0 <HCSR04_Trigger+0x6c>)
 8005e72:	4613      	mov	r3, r2
 8005e74:	009b      	lsls	r3, r3, #2
 8005e76:	4413      	add	r3, r2
 8005e78:	009b      	lsls	r3, r3, #2
 8005e7a:	440b      	add	r3, r1
 8005e7c:	6818      	ldr	r0, [r3, #0]
 8005e7e:	79fa      	ldrb	r2, [r7, #7]
 8005e80:	4907      	ldr	r1, [pc, #28]	; (8005ea0 <HCSR04_Trigger+0x6c>)
 8005e82:	4613      	mov	r3, r2
 8005e84:	009b      	lsls	r3, r3, #2
 8005e86:	4413      	add	r3, r2
 8005e88:	009b      	lsls	r3, r3, #2
 8005e8a:	440b      	add	r3, r1
 8005e8c:	3304      	adds	r3, #4
 8005e8e:	881b      	ldrh	r3, [r3, #0]
 8005e90:	2200      	movs	r2, #0
 8005e92:	4619      	mov	r1, r3
 8005e94:	f7fc fe7a 	bl	8002b8c <HAL_GPIO_WritePin>
}
 8005e98:	bf00      	nop
 8005e9a:	3708      	adds	r7, #8
 8005e9c:	46bd      	mov	sp, r7
 8005e9e:	bd80      	pop	{r7, pc}
 8005ea0:	08008d5c 	.word	0x08008d5c

08005ea4 <DWT_Delay_Init>:

#include "DWT_Delay.h"


uint32_t DWT_Delay_Init(void)
{
 8005ea4:	b480      	push	{r7}
 8005ea6:	af00      	add	r7, sp, #0
    /* Disable TRC */
    CoreDebug->DEMCR &= ~CoreDebug_DEMCR_TRCENA_Msk; // ~0x01000000;
 8005ea8:	4b14      	ldr	r3, [pc, #80]	; (8005efc <DWT_Delay_Init+0x58>)
 8005eaa:	68db      	ldr	r3, [r3, #12]
 8005eac:	4a13      	ldr	r2, [pc, #76]	; (8005efc <DWT_Delay_Init+0x58>)
 8005eae:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8005eb2:	60d3      	str	r3, [r2, #12]
    /* Enable TRC */
    CoreDebug->DEMCR |=  CoreDebug_DEMCR_TRCENA_Msk; // 0x01000000;
 8005eb4:	4b11      	ldr	r3, [pc, #68]	; (8005efc <DWT_Delay_Init+0x58>)
 8005eb6:	68db      	ldr	r3, [r3, #12]
 8005eb8:	4a10      	ldr	r2, [pc, #64]	; (8005efc <DWT_Delay_Init+0x58>)
 8005eba:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8005ebe:	60d3      	str	r3, [r2, #12]

    /* Disable clock cycle counter */
    DWT->CTRL &= ~DWT_CTRL_CYCCNTENA_Msk; //~0x00000001;
 8005ec0:	4b0f      	ldr	r3, [pc, #60]	; (8005f00 <DWT_Delay_Init+0x5c>)
 8005ec2:	681b      	ldr	r3, [r3, #0]
 8005ec4:	4a0e      	ldr	r2, [pc, #56]	; (8005f00 <DWT_Delay_Init+0x5c>)
 8005ec6:	f023 0301 	bic.w	r3, r3, #1
 8005eca:	6013      	str	r3, [r2, #0]
    /* Enable  clock cycle counter */
    DWT->CTRL |=  DWT_CTRL_CYCCNTENA_Msk; //0x00000001;
 8005ecc:	4b0c      	ldr	r3, [pc, #48]	; (8005f00 <DWT_Delay_Init+0x5c>)
 8005ece:	681b      	ldr	r3, [r3, #0]
 8005ed0:	4a0b      	ldr	r2, [pc, #44]	; (8005f00 <DWT_Delay_Init+0x5c>)
 8005ed2:	f043 0301 	orr.w	r3, r3, #1
 8005ed6:	6013      	str	r3, [r2, #0]

    /* Reset the clock cycle counter value */
    DWT->CYCCNT = 0;
 8005ed8:	4b09      	ldr	r3, [pc, #36]	; (8005f00 <DWT_Delay_Init+0x5c>)
 8005eda:	2200      	movs	r2, #0
 8005edc:	605a      	str	r2, [r3, #4]

    /* 3 NO OPERATION instructions */
    __ASM volatile ("NOP");
 8005ede:	bf00      	nop
    __ASM volatile ("NOP");
 8005ee0:	bf00      	nop
    __ASM volatile ("NOP");
 8005ee2:	bf00      	nop

    /* Check if clock cycle counter has started */
    if(DWT->CYCCNT)
 8005ee4:	4b06      	ldr	r3, [pc, #24]	; (8005f00 <DWT_Delay_Init+0x5c>)
 8005ee6:	685b      	ldr	r3, [r3, #4]
 8005ee8:	2b00      	cmp	r3, #0
 8005eea:	d001      	beq.n	8005ef0 <DWT_Delay_Init+0x4c>
    {
       return 0; /*clock cycle counter started*/
 8005eec:	2300      	movs	r3, #0
 8005eee:	e000      	b.n	8005ef2 <DWT_Delay_Init+0x4e>
    }
    else
    {
      return 1; /*clock cycle counter not started*/
 8005ef0:	2301      	movs	r3, #1
    }
}
 8005ef2:	4618      	mov	r0, r3
 8005ef4:	46bd      	mov	sp, r7
 8005ef6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005efa:	4770      	bx	lr
 8005efc:	e000edf0 	.word	0xe000edf0
 8005f00:	e0001000 	.word	0xe0001000

08005f04 <__errno>:
 8005f04:	4b01      	ldr	r3, [pc, #4]	; (8005f0c <__errno+0x8>)
 8005f06:	6818      	ldr	r0, [r3, #0]
 8005f08:	4770      	bx	lr
 8005f0a:	bf00      	nop
 8005f0c:	20000028 	.word	0x20000028

08005f10 <__libc_init_array>:
 8005f10:	b570      	push	{r4, r5, r6, lr}
 8005f12:	4d0d      	ldr	r5, [pc, #52]	; (8005f48 <__libc_init_array+0x38>)
 8005f14:	4c0d      	ldr	r4, [pc, #52]	; (8005f4c <__libc_init_array+0x3c>)
 8005f16:	1b64      	subs	r4, r4, r5
 8005f18:	10a4      	asrs	r4, r4, #2
 8005f1a:	2600      	movs	r6, #0
 8005f1c:	42a6      	cmp	r6, r4
 8005f1e:	d109      	bne.n	8005f34 <__libc_init_array+0x24>
 8005f20:	4d0b      	ldr	r5, [pc, #44]	; (8005f50 <__libc_init_array+0x40>)
 8005f22:	4c0c      	ldr	r4, [pc, #48]	; (8005f54 <__libc_init_array+0x44>)
 8005f24:	f002 feb6 	bl	8008c94 <_init>
 8005f28:	1b64      	subs	r4, r4, r5
 8005f2a:	10a4      	asrs	r4, r4, #2
 8005f2c:	2600      	movs	r6, #0
 8005f2e:	42a6      	cmp	r6, r4
 8005f30:	d105      	bne.n	8005f3e <__libc_init_array+0x2e>
 8005f32:	bd70      	pop	{r4, r5, r6, pc}
 8005f34:	f855 3b04 	ldr.w	r3, [r5], #4
 8005f38:	4798      	blx	r3
 8005f3a:	3601      	adds	r6, #1
 8005f3c:	e7ee      	b.n	8005f1c <__libc_init_array+0xc>
 8005f3e:	f855 3b04 	ldr.w	r3, [r5], #4
 8005f42:	4798      	blx	r3
 8005f44:	3601      	adds	r6, #1
 8005f46:	e7f2      	b.n	8005f2e <__libc_init_array+0x1e>
 8005f48:	08009194 	.word	0x08009194
 8005f4c:	08009194 	.word	0x08009194
 8005f50:	08009194 	.word	0x08009194
 8005f54:	08009198 	.word	0x08009198

08005f58 <memset>:
 8005f58:	4402      	add	r2, r0
 8005f5a:	4603      	mov	r3, r0
 8005f5c:	4293      	cmp	r3, r2
 8005f5e:	d100      	bne.n	8005f62 <memset+0xa>
 8005f60:	4770      	bx	lr
 8005f62:	f803 1b01 	strb.w	r1, [r3], #1
 8005f66:	e7f9      	b.n	8005f5c <memset+0x4>

08005f68 <__cvt>:
 8005f68:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005f6c:	ec55 4b10 	vmov	r4, r5, d0
 8005f70:	2d00      	cmp	r5, #0
 8005f72:	460e      	mov	r6, r1
 8005f74:	4619      	mov	r1, r3
 8005f76:	462b      	mov	r3, r5
 8005f78:	bfbb      	ittet	lt
 8005f7a:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8005f7e:	461d      	movlt	r5, r3
 8005f80:	2300      	movge	r3, #0
 8005f82:	232d      	movlt	r3, #45	; 0x2d
 8005f84:	700b      	strb	r3, [r1, #0]
 8005f86:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8005f88:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8005f8c:	4691      	mov	r9, r2
 8005f8e:	f023 0820 	bic.w	r8, r3, #32
 8005f92:	bfbc      	itt	lt
 8005f94:	4622      	movlt	r2, r4
 8005f96:	4614      	movlt	r4, r2
 8005f98:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8005f9c:	d005      	beq.n	8005faa <__cvt+0x42>
 8005f9e:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8005fa2:	d100      	bne.n	8005fa6 <__cvt+0x3e>
 8005fa4:	3601      	adds	r6, #1
 8005fa6:	2102      	movs	r1, #2
 8005fa8:	e000      	b.n	8005fac <__cvt+0x44>
 8005faa:	2103      	movs	r1, #3
 8005fac:	ab03      	add	r3, sp, #12
 8005fae:	9301      	str	r3, [sp, #4]
 8005fb0:	ab02      	add	r3, sp, #8
 8005fb2:	9300      	str	r3, [sp, #0]
 8005fb4:	ec45 4b10 	vmov	d0, r4, r5
 8005fb8:	4653      	mov	r3, sl
 8005fba:	4632      	mov	r2, r6
 8005fbc:	f000 fcec 	bl	8006998 <_dtoa_r>
 8005fc0:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8005fc4:	4607      	mov	r7, r0
 8005fc6:	d102      	bne.n	8005fce <__cvt+0x66>
 8005fc8:	f019 0f01 	tst.w	r9, #1
 8005fcc:	d022      	beq.n	8006014 <__cvt+0xac>
 8005fce:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8005fd2:	eb07 0906 	add.w	r9, r7, r6
 8005fd6:	d110      	bne.n	8005ffa <__cvt+0x92>
 8005fd8:	783b      	ldrb	r3, [r7, #0]
 8005fda:	2b30      	cmp	r3, #48	; 0x30
 8005fdc:	d10a      	bne.n	8005ff4 <__cvt+0x8c>
 8005fde:	2200      	movs	r2, #0
 8005fe0:	2300      	movs	r3, #0
 8005fe2:	4620      	mov	r0, r4
 8005fe4:	4629      	mov	r1, r5
 8005fe6:	f7fa fd8f 	bl	8000b08 <__aeabi_dcmpeq>
 8005fea:	b918      	cbnz	r0, 8005ff4 <__cvt+0x8c>
 8005fec:	f1c6 0601 	rsb	r6, r6, #1
 8005ff0:	f8ca 6000 	str.w	r6, [sl]
 8005ff4:	f8da 3000 	ldr.w	r3, [sl]
 8005ff8:	4499      	add	r9, r3
 8005ffa:	2200      	movs	r2, #0
 8005ffc:	2300      	movs	r3, #0
 8005ffe:	4620      	mov	r0, r4
 8006000:	4629      	mov	r1, r5
 8006002:	f7fa fd81 	bl	8000b08 <__aeabi_dcmpeq>
 8006006:	b108      	cbz	r0, 800600c <__cvt+0xa4>
 8006008:	f8cd 900c 	str.w	r9, [sp, #12]
 800600c:	2230      	movs	r2, #48	; 0x30
 800600e:	9b03      	ldr	r3, [sp, #12]
 8006010:	454b      	cmp	r3, r9
 8006012:	d307      	bcc.n	8006024 <__cvt+0xbc>
 8006014:	9b03      	ldr	r3, [sp, #12]
 8006016:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8006018:	1bdb      	subs	r3, r3, r7
 800601a:	4638      	mov	r0, r7
 800601c:	6013      	str	r3, [r2, #0]
 800601e:	b004      	add	sp, #16
 8006020:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006024:	1c59      	adds	r1, r3, #1
 8006026:	9103      	str	r1, [sp, #12]
 8006028:	701a      	strb	r2, [r3, #0]
 800602a:	e7f0      	b.n	800600e <__cvt+0xa6>

0800602c <__exponent>:
 800602c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800602e:	4603      	mov	r3, r0
 8006030:	2900      	cmp	r1, #0
 8006032:	bfb8      	it	lt
 8006034:	4249      	neglt	r1, r1
 8006036:	f803 2b02 	strb.w	r2, [r3], #2
 800603a:	bfb4      	ite	lt
 800603c:	222d      	movlt	r2, #45	; 0x2d
 800603e:	222b      	movge	r2, #43	; 0x2b
 8006040:	2909      	cmp	r1, #9
 8006042:	7042      	strb	r2, [r0, #1]
 8006044:	dd2a      	ble.n	800609c <__exponent+0x70>
 8006046:	f10d 0407 	add.w	r4, sp, #7
 800604a:	46a4      	mov	ip, r4
 800604c:	270a      	movs	r7, #10
 800604e:	46a6      	mov	lr, r4
 8006050:	460a      	mov	r2, r1
 8006052:	fb91 f6f7 	sdiv	r6, r1, r7
 8006056:	fb07 1516 	mls	r5, r7, r6, r1
 800605a:	3530      	adds	r5, #48	; 0x30
 800605c:	2a63      	cmp	r2, #99	; 0x63
 800605e:	f104 34ff 	add.w	r4, r4, #4294967295	; 0xffffffff
 8006062:	f80e 5c01 	strb.w	r5, [lr, #-1]
 8006066:	4631      	mov	r1, r6
 8006068:	dcf1      	bgt.n	800604e <__exponent+0x22>
 800606a:	3130      	adds	r1, #48	; 0x30
 800606c:	f1ae 0502 	sub.w	r5, lr, #2
 8006070:	f804 1c01 	strb.w	r1, [r4, #-1]
 8006074:	1c44      	adds	r4, r0, #1
 8006076:	4629      	mov	r1, r5
 8006078:	4561      	cmp	r1, ip
 800607a:	d30a      	bcc.n	8006092 <__exponent+0x66>
 800607c:	f10d 0209 	add.w	r2, sp, #9
 8006080:	eba2 020e 	sub.w	r2, r2, lr
 8006084:	4565      	cmp	r5, ip
 8006086:	bf88      	it	hi
 8006088:	2200      	movhi	r2, #0
 800608a:	4413      	add	r3, r2
 800608c:	1a18      	subs	r0, r3, r0
 800608e:	b003      	add	sp, #12
 8006090:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006092:	f811 2b01 	ldrb.w	r2, [r1], #1
 8006096:	f804 2f01 	strb.w	r2, [r4, #1]!
 800609a:	e7ed      	b.n	8006078 <__exponent+0x4c>
 800609c:	2330      	movs	r3, #48	; 0x30
 800609e:	3130      	adds	r1, #48	; 0x30
 80060a0:	7083      	strb	r3, [r0, #2]
 80060a2:	70c1      	strb	r1, [r0, #3]
 80060a4:	1d03      	adds	r3, r0, #4
 80060a6:	e7f1      	b.n	800608c <__exponent+0x60>

080060a8 <_printf_float>:
 80060a8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80060ac:	ed2d 8b02 	vpush	{d8}
 80060b0:	b08d      	sub	sp, #52	; 0x34
 80060b2:	460c      	mov	r4, r1
 80060b4:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 80060b8:	4616      	mov	r6, r2
 80060ba:	461f      	mov	r7, r3
 80060bc:	4605      	mov	r5, r0
 80060be:	f001 fa57 	bl	8007570 <_localeconv_r>
 80060c2:	f8d0 a000 	ldr.w	sl, [r0]
 80060c6:	4650      	mov	r0, sl
 80060c8:	f7fa f8a2 	bl	8000210 <strlen>
 80060cc:	2300      	movs	r3, #0
 80060ce:	930a      	str	r3, [sp, #40]	; 0x28
 80060d0:	6823      	ldr	r3, [r4, #0]
 80060d2:	9305      	str	r3, [sp, #20]
 80060d4:	f8d8 3000 	ldr.w	r3, [r8]
 80060d8:	f894 b018 	ldrb.w	fp, [r4, #24]
 80060dc:	3307      	adds	r3, #7
 80060de:	f023 0307 	bic.w	r3, r3, #7
 80060e2:	f103 0208 	add.w	r2, r3, #8
 80060e6:	f8c8 2000 	str.w	r2, [r8]
 80060ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 80060ee:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 80060f2:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 80060f6:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 80060fa:	9307      	str	r3, [sp, #28]
 80060fc:	f8cd 8018 	str.w	r8, [sp, #24]
 8006100:	ee08 0a10 	vmov	s16, r0
 8006104:	4b9f      	ldr	r3, [pc, #636]	; (8006384 <_printf_float+0x2dc>)
 8006106:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800610a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800610e:	f7fa fd2d 	bl	8000b6c <__aeabi_dcmpun>
 8006112:	bb88      	cbnz	r0, 8006178 <_printf_float+0xd0>
 8006114:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8006118:	4b9a      	ldr	r3, [pc, #616]	; (8006384 <_printf_float+0x2dc>)
 800611a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800611e:	f7fa fd07 	bl	8000b30 <__aeabi_dcmple>
 8006122:	bb48      	cbnz	r0, 8006178 <_printf_float+0xd0>
 8006124:	2200      	movs	r2, #0
 8006126:	2300      	movs	r3, #0
 8006128:	4640      	mov	r0, r8
 800612a:	4649      	mov	r1, r9
 800612c:	f7fa fcf6 	bl	8000b1c <__aeabi_dcmplt>
 8006130:	b110      	cbz	r0, 8006138 <_printf_float+0x90>
 8006132:	232d      	movs	r3, #45	; 0x2d
 8006134:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006138:	4b93      	ldr	r3, [pc, #588]	; (8006388 <_printf_float+0x2e0>)
 800613a:	4894      	ldr	r0, [pc, #592]	; (800638c <_printf_float+0x2e4>)
 800613c:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 8006140:	bf94      	ite	ls
 8006142:	4698      	movls	r8, r3
 8006144:	4680      	movhi	r8, r0
 8006146:	2303      	movs	r3, #3
 8006148:	6123      	str	r3, [r4, #16]
 800614a:	9b05      	ldr	r3, [sp, #20]
 800614c:	f023 0204 	bic.w	r2, r3, #4
 8006150:	6022      	str	r2, [r4, #0]
 8006152:	f04f 0900 	mov.w	r9, #0
 8006156:	9700      	str	r7, [sp, #0]
 8006158:	4633      	mov	r3, r6
 800615a:	aa0b      	add	r2, sp, #44	; 0x2c
 800615c:	4621      	mov	r1, r4
 800615e:	4628      	mov	r0, r5
 8006160:	f000 f9d8 	bl	8006514 <_printf_common>
 8006164:	3001      	adds	r0, #1
 8006166:	f040 8090 	bne.w	800628a <_printf_float+0x1e2>
 800616a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800616e:	b00d      	add	sp, #52	; 0x34
 8006170:	ecbd 8b02 	vpop	{d8}
 8006174:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006178:	4642      	mov	r2, r8
 800617a:	464b      	mov	r3, r9
 800617c:	4640      	mov	r0, r8
 800617e:	4649      	mov	r1, r9
 8006180:	f7fa fcf4 	bl	8000b6c <__aeabi_dcmpun>
 8006184:	b140      	cbz	r0, 8006198 <_printf_float+0xf0>
 8006186:	464b      	mov	r3, r9
 8006188:	2b00      	cmp	r3, #0
 800618a:	bfbc      	itt	lt
 800618c:	232d      	movlt	r3, #45	; 0x2d
 800618e:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8006192:	487f      	ldr	r0, [pc, #508]	; (8006390 <_printf_float+0x2e8>)
 8006194:	4b7f      	ldr	r3, [pc, #508]	; (8006394 <_printf_float+0x2ec>)
 8006196:	e7d1      	b.n	800613c <_printf_float+0x94>
 8006198:	6863      	ldr	r3, [r4, #4]
 800619a:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 800619e:	9206      	str	r2, [sp, #24]
 80061a0:	1c5a      	adds	r2, r3, #1
 80061a2:	d13f      	bne.n	8006224 <_printf_float+0x17c>
 80061a4:	2306      	movs	r3, #6
 80061a6:	6063      	str	r3, [r4, #4]
 80061a8:	9b05      	ldr	r3, [sp, #20]
 80061aa:	6861      	ldr	r1, [r4, #4]
 80061ac:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 80061b0:	2300      	movs	r3, #0
 80061b2:	9303      	str	r3, [sp, #12]
 80061b4:	ab0a      	add	r3, sp, #40	; 0x28
 80061b6:	e9cd b301 	strd	fp, r3, [sp, #4]
 80061ba:	ab09      	add	r3, sp, #36	; 0x24
 80061bc:	ec49 8b10 	vmov	d0, r8, r9
 80061c0:	9300      	str	r3, [sp, #0]
 80061c2:	6022      	str	r2, [r4, #0]
 80061c4:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 80061c8:	4628      	mov	r0, r5
 80061ca:	f7ff fecd 	bl	8005f68 <__cvt>
 80061ce:	9b06      	ldr	r3, [sp, #24]
 80061d0:	9909      	ldr	r1, [sp, #36]	; 0x24
 80061d2:	2b47      	cmp	r3, #71	; 0x47
 80061d4:	4680      	mov	r8, r0
 80061d6:	d108      	bne.n	80061ea <_printf_float+0x142>
 80061d8:	1cc8      	adds	r0, r1, #3
 80061da:	db02      	blt.n	80061e2 <_printf_float+0x13a>
 80061dc:	6863      	ldr	r3, [r4, #4]
 80061de:	4299      	cmp	r1, r3
 80061e0:	dd41      	ble.n	8006266 <_printf_float+0x1be>
 80061e2:	f1ab 0b02 	sub.w	fp, fp, #2
 80061e6:	fa5f fb8b 	uxtb.w	fp, fp
 80061ea:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 80061ee:	d820      	bhi.n	8006232 <_printf_float+0x18a>
 80061f0:	3901      	subs	r1, #1
 80061f2:	465a      	mov	r2, fp
 80061f4:	f104 0050 	add.w	r0, r4, #80	; 0x50
 80061f8:	9109      	str	r1, [sp, #36]	; 0x24
 80061fa:	f7ff ff17 	bl	800602c <__exponent>
 80061fe:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8006200:	1813      	adds	r3, r2, r0
 8006202:	2a01      	cmp	r2, #1
 8006204:	4681      	mov	r9, r0
 8006206:	6123      	str	r3, [r4, #16]
 8006208:	dc02      	bgt.n	8006210 <_printf_float+0x168>
 800620a:	6822      	ldr	r2, [r4, #0]
 800620c:	07d2      	lsls	r2, r2, #31
 800620e:	d501      	bpl.n	8006214 <_printf_float+0x16c>
 8006210:	3301      	adds	r3, #1
 8006212:	6123      	str	r3, [r4, #16]
 8006214:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8006218:	2b00      	cmp	r3, #0
 800621a:	d09c      	beq.n	8006156 <_printf_float+0xae>
 800621c:	232d      	movs	r3, #45	; 0x2d
 800621e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006222:	e798      	b.n	8006156 <_printf_float+0xae>
 8006224:	9a06      	ldr	r2, [sp, #24]
 8006226:	2a47      	cmp	r2, #71	; 0x47
 8006228:	d1be      	bne.n	80061a8 <_printf_float+0x100>
 800622a:	2b00      	cmp	r3, #0
 800622c:	d1bc      	bne.n	80061a8 <_printf_float+0x100>
 800622e:	2301      	movs	r3, #1
 8006230:	e7b9      	b.n	80061a6 <_printf_float+0xfe>
 8006232:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 8006236:	d118      	bne.n	800626a <_printf_float+0x1c2>
 8006238:	2900      	cmp	r1, #0
 800623a:	6863      	ldr	r3, [r4, #4]
 800623c:	dd0b      	ble.n	8006256 <_printf_float+0x1ae>
 800623e:	6121      	str	r1, [r4, #16]
 8006240:	b913      	cbnz	r3, 8006248 <_printf_float+0x1a0>
 8006242:	6822      	ldr	r2, [r4, #0]
 8006244:	07d0      	lsls	r0, r2, #31
 8006246:	d502      	bpl.n	800624e <_printf_float+0x1a6>
 8006248:	3301      	adds	r3, #1
 800624a:	440b      	add	r3, r1
 800624c:	6123      	str	r3, [r4, #16]
 800624e:	65a1      	str	r1, [r4, #88]	; 0x58
 8006250:	f04f 0900 	mov.w	r9, #0
 8006254:	e7de      	b.n	8006214 <_printf_float+0x16c>
 8006256:	b913      	cbnz	r3, 800625e <_printf_float+0x1b6>
 8006258:	6822      	ldr	r2, [r4, #0]
 800625a:	07d2      	lsls	r2, r2, #31
 800625c:	d501      	bpl.n	8006262 <_printf_float+0x1ba>
 800625e:	3302      	adds	r3, #2
 8006260:	e7f4      	b.n	800624c <_printf_float+0x1a4>
 8006262:	2301      	movs	r3, #1
 8006264:	e7f2      	b.n	800624c <_printf_float+0x1a4>
 8006266:	f04f 0b67 	mov.w	fp, #103	; 0x67
 800626a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800626c:	4299      	cmp	r1, r3
 800626e:	db05      	blt.n	800627c <_printf_float+0x1d4>
 8006270:	6823      	ldr	r3, [r4, #0]
 8006272:	6121      	str	r1, [r4, #16]
 8006274:	07d8      	lsls	r0, r3, #31
 8006276:	d5ea      	bpl.n	800624e <_printf_float+0x1a6>
 8006278:	1c4b      	adds	r3, r1, #1
 800627a:	e7e7      	b.n	800624c <_printf_float+0x1a4>
 800627c:	2900      	cmp	r1, #0
 800627e:	bfd4      	ite	le
 8006280:	f1c1 0202 	rsble	r2, r1, #2
 8006284:	2201      	movgt	r2, #1
 8006286:	4413      	add	r3, r2
 8006288:	e7e0      	b.n	800624c <_printf_float+0x1a4>
 800628a:	6823      	ldr	r3, [r4, #0]
 800628c:	055a      	lsls	r2, r3, #21
 800628e:	d407      	bmi.n	80062a0 <_printf_float+0x1f8>
 8006290:	6923      	ldr	r3, [r4, #16]
 8006292:	4642      	mov	r2, r8
 8006294:	4631      	mov	r1, r6
 8006296:	4628      	mov	r0, r5
 8006298:	47b8      	blx	r7
 800629a:	3001      	adds	r0, #1
 800629c:	d12c      	bne.n	80062f8 <_printf_float+0x250>
 800629e:	e764      	b.n	800616a <_printf_float+0xc2>
 80062a0:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 80062a4:	f240 80e0 	bls.w	8006468 <_printf_float+0x3c0>
 80062a8:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80062ac:	2200      	movs	r2, #0
 80062ae:	2300      	movs	r3, #0
 80062b0:	f7fa fc2a 	bl	8000b08 <__aeabi_dcmpeq>
 80062b4:	2800      	cmp	r0, #0
 80062b6:	d034      	beq.n	8006322 <_printf_float+0x27a>
 80062b8:	4a37      	ldr	r2, [pc, #220]	; (8006398 <_printf_float+0x2f0>)
 80062ba:	2301      	movs	r3, #1
 80062bc:	4631      	mov	r1, r6
 80062be:	4628      	mov	r0, r5
 80062c0:	47b8      	blx	r7
 80062c2:	3001      	adds	r0, #1
 80062c4:	f43f af51 	beq.w	800616a <_printf_float+0xc2>
 80062c8:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80062cc:	429a      	cmp	r2, r3
 80062ce:	db02      	blt.n	80062d6 <_printf_float+0x22e>
 80062d0:	6823      	ldr	r3, [r4, #0]
 80062d2:	07d8      	lsls	r0, r3, #31
 80062d4:	d510      	bpl.n	80062f8 <_printf_float+0x250>
 80062d6:	ee18 3a10 	vmov	r3, s16
 80062da:	4652      	mov	r2, sl
 80062dc:	4631      	mov	r1, r6
 80062de:	4628      	mov	r0, r5
 80062e0:	47b8      	blx	r7
 80062e2:	3001      	adds	r0, #1
 80062e4:	f43f af41 	beq.w	800616a <_printf_float+0xc2>
 80062e8:	f04f 0800 	mov.w	r8, #0
 80062ec:	f104 091a 	add.w	r9, r4, #26
 80062f0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80062f2:	3b01      	subs	r3, #1
 80062f4:	4543      	cmp	r3, r8
 80062f6:	dc09      	bgt.n	800630c <_printf_float+0x264>
 80062f8:	6823      	ldr	r3, [r4, #0]
 80062fa:	079b      	lsls	r3, r3, #30
 80062fc:	f100 8105 	bmi.w	800650a <_printf_float+0x462>
 8006300:	68e0      	ldr	r0, [r4, #12]
 8006302:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006304:	4298      	cmp	r0, r3
 8006306:	bfb8      	it	lt
 8006308:	4618      	movlt	r0, r3
 800630a:	e730      	b.n	800616e <_printf_float+0xc6>
 800630c:	2301      	movs	r3, #1
 800630e:	464a      	mov	r2, r9
 8006310:	4631      	mov	r1, r6
 8006312:	4628      	mov	r0, r5
 8006314:	47b8      	blx	r7
 8006316:	3001      	adds	r0, #1
 8006318:	f43f af27 	beq.w	800616a <_printf_float+0xc2>
 800631c:	f108 0801 	add.w	r8, r8, #1
 8006320:	e7e6      	b.n	80062f0 <_printf_float+0x248>
 8006322:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006324:	2b00      	cmp	r3, #0
 8006326:	dc39      	bgt.n	800639c <_printf_float+0x2f4>
 8006328:	4a1b      	ldr	r2, [pc, #108]	; (8006398 <_printf_float+0x2f0>)
 800632a:	2301      	movs	r3, #1
 800632c:	4631      	mov	r1, r6
 800632e:	4628      	mov	r0, r5
 8006330:	47b8      	blx	r7
 8006332:	3001      	adds	r0, #1
 8006334:	f43f af19 	beq.w	800616a <_printf_float+0xc2>
 8006338:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800633c:	4313      	orrs	r3, r2
 800633e:	d102      	bne.n	8006346 <_printf_float+0x29e>
 8006340:	6823      	ldr	r3, [r4, #0]
 8006342:	07d9      	lsls	r1, r3, #31
 8006344:	d5d8      	bpl.n	80062f8 <_printf_float+0x250>
 8006346:	ee18 3a10 	vmov	r3, s16
 800634a:	4652      	mov	r2, sl
 800634c:	4631      	mov	r1, r6
 800634e:	4628      	mov	r0, r5
 8006350:	47b8      	blx	r7
 8006352:	3001      	adds	r0, #1
 8006354:	f43f af09 	beq.w	800616a <_printf_float+0xc2>
 8006358:	f04f 0900 	mov.w	r9, #0
 800635c:	f104 0a1a 	add.w	sl, r4, #26
 8006360:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006362:	425b      	negs	r3, r3
 8006364:	454b      	cmp	r3, r9
 8006366:	dc01      	bgt.n	800636c <_printf_float+0x2c4>
 8006368:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800636a:	e792      	b.n	8006292 <_printf_float+0x1ea>
 800636c:	2301      	movs	r3, #1
 800636e:	4652      	mov	r2, sl
 8006370:	4631      	mov	r1, r6
 8006372:	4628      	mov	r0, r5
 8006374:	47b8      	blx	r7
 8006376:	3001      	adds	r0, #1
 8006378:	f43f aef7 	beq.w	800616a <_printf_float+0xc2>
 800637c:	f109 0901 	add.w	r9, r9, #1
 8006380:	e7ee      	b.n	8006360 <_printf_float+0x2b8>
 8006382:	bf00      	nop
 8006384:	7fefffff 	.word	0x7fefffff
 8006388:	08008db0 	.word	0x08008db0
 800638c:	08008db4 	.word	0x08008db4
 8006390:	08008dbc 	.word	0x08008dbc
 8006394:	08008db8 	.word	0x08008db8
 8006398:	08008dc0 	.word	0x08008dc0
 800639c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800639e:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80063a0:	429a      	cmp	r2, r3
 80063a2:	bfa8      	it	ge
 80063a4:	461a      	movge	r2, r3
 80063a6:	2a00      	cmp	r2, #0
 80063a8:	4691      	mov	r9, r2
 80063aa:	dc37      	bgt.n	800641c <_printf_float+0x374>
 80063ac:	f04f 0b00 	mov.w	fp, #0
 80063b0:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80063b4:	f104 021a 	add.w	r2, r4, #26
 80063b8:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80063ba:	9305      	str	r3, [sp, #20]
 80063bc:	eba3 0309 	sub.w	r3, r3, r9
 80063c0:	455b      	cmp	r3, fp
 80063c2:	dc33      	bgt.n	800642c <_printf_float+0x384>
 80063c4:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80063c8:	429a      	cmp	r2, r3
 80063ca:	db3b      	blt.n	8006444 <_printf_float+0x39c>
 80063cc:	6823      	ldr	r3, [r4, #0]
 80063ce:	07da      	lsls	r2, r3, #31
 80063d0:	d438      	bmi.n	8006444 <_printf_float+0x39c>
 80063d2:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80063d4:	9b05      	ldr	r3, [sp, #20]
 80063d6:	9909      	ldr	r1, [sp, #36]	; 0x24
 80063d8:	1ad3      	subs	r3, r2, r3
 80063da:	eba2 0901 	sub.w	r9, r2, r1
 80063de:	4599      	cmp	r9, r3
 80063e0:	bfa8      	it	ge
 80063e2:	4699      	movge	r9, r3
 80063e4:	f1b9 0f00 	cmp.w	r9, #0
 80063e8:	dc35      	bgt.n	8006456 <_printf_float+0x3ae>
 80063ea:	f04f 0800 	mov.w	r8, #0
 80063ee:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80063f2:	f104 0a1a 	add.w	sl, r4, #26
 80063f6:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80063fa:	1a9b      	subs	r3, r3, r2
 80063fc:	eba3 0309 	sub.w	r3, r3, r9
 8006400:	4543      	cmp	r3, r8
 8006402:	f77f af79 	ble.w	80062f8 <_printf_float+0x250>
 8006406:	2301      	movs	r3, #1
 8006408:	4652      	mov	r2, sl
 800640a:	4631      	mov	r1, r6
 800640c:	4628      	mov	r0, r5
 800640e:	47b8      	blx	r7
 8006410:	3001      	adds	r0, #1
 8006412:	f43f aeaa 	beq.w	800616a <_printf_float+0xc2>
 8006416:	f108 0801 	add.w	r8, r8, #1
 800641a:	e7ec      	b.n	80063f6 <_printf_float+0x34e>
 800641c:	4613      	mov	r3, r2
 800641e:	4631      	mov	r1, r6
 8006420:	4642      	mov	r2, r8
 8006422:	4628      	mov	r0, r5
 8006424:	47b8      	blx	r7
 8006426:	3001      	adds	r0, #1
 8006428:	d1c0      	bne.n	80063ac <_printf_float+0x304>
 800642a:	e69e      	b.n	800616a <_printf_float+0xc2>
 800642c:	2301      	movs	r3, #1
 800642e:	4631      	mov	r1, r6
 8006430:	4628      	mov	r0, r5
 8006432:	9205      	str	r2, [sp, #20]
 8006434:	47b8      	blx	r7
 8006436:	3001      	adds	r0, #1
 8006438:	f43f ae97 	beq.w	800616a <_printf_float+0xc2>
 800643c:	9a05      	ldr	r2, [sp, #20]
 800643e:	f10b 0b01 	add.w	fp, fp, #1
 8006442:	e7b9      	b.n	80063b8 <_printf_float+0x310>
 8006444:	ee18 3a10 	vmov	r3, s16
 8006448:	4652      	mov	r2, sl
 800644a:	4631      	mov	r1, r6
 800644c:	4628      	mov	r0, r5
 800644e:	47b8      	blx	r7
 8006450:	3001      	adds	r0, #1
 8006452:	d1be      	bne.n	80063d2 <_printf_float+0x32a>
 8006454:	e689      	b.n	800616a <_printf_float+0xc2>
 8006456:	9a05      	ldr	r2, [sp, #20]
 8006458:	464b      	mov	r3, r9
 800645a:	4442      	add	r2, r8
 800645c:	4631      	mov	r1, r6
 800645e:	4628      	mov	r0, r5
 8006460:	47b8      	blx	r7
 8006462:	3001      	adds	r0, #1
 8006464:	d1c1      	bne.n	80063ea <_printf_float+0x342>
 8006466:	e680      	b.n	800616a <_printf_float+0xc2>
 8006468:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800646a:	2a01      	cmp	r2, #1
 800646c:	dc01      	bgt.n	8006472 <_printf_float+0x3ca>
 800646e:	07db      	lsls	r3, r3, #31
 8006470:	d538      	bpl.n	80064e4 <_printf_float+0x43c>
 8006472:	2301      	movs	r3, #1
 8006474:	4642      	mov	r2, r8
 8006476:	4631      	mov	r1, r6
 8006478:	4628      	mov	r0, r5
 800647a:	47b8      	blx	r7
 800647c:	3001      	adds	r0, #1
 800647e:	f43f ae74 	beq.w	800616a <_printf_float+0xc2>
 8006482:	ee18 3a10 	vmov	r3, s16
 8006486:	4652      	mov	r2, sl
 8006488:	4631      	mov	r1, r6
 800648a:	4628      	mov	r0, r5
 800648c:	47b8      	blx	r7
 800648e:	3001      	adds	r0, #1
 8006490:	f43f ae6b 	beq.w	800616a <_printf_float+0xc2>
 8006494:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8006498:	2200      	movs	r2, #0
 800649a:	2300      	movs	r3, #0
 800649c:	f7fa fb34 	bl	8000b08 <__aeabi_dcmpeq>
 80064a0:	b9d8      	cbnz	r0, 80064da <_printf_float+0x432>
 80064a2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80064a4:	f108 0201 	add.w	r2, r8, #1
 80064a8:	3b01      	subs	r3, #1
 80064aa:	4631      	mov	r1, r6
 80064ac:	4628      	mov	r0, r5
 80064ae:	47b8      	blx	r7
 80064b0:	3001      	adds	r0, #1
 80064b2:	d10e      	bne.n	80064d2 <_printf_float+0x42a>
 80064b4:	e659      	b.n	800616a <_printf_float+0xc2>
 80064b6:	2301      	movs	r3, #1
 80064b8:	4652      	mov	r2, sl
 80064ba:	4631      	mov	r1, r6
 80064bc:	4628      	mov	r0, r5
 80064be:	47b8      	blx	r7
 80064c0:	3001      	adds	r0, #1
 80064c2:	f43f ae52 	beq.w	800616a <_printf_float+0xc2>
 80064c6:	f108 0801 	add.w	r8, r8, #1
 80064ca:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80064cc:	3b01      	subs	r3, #1
 80064ce:	4543      	cmp	r3, r8
 80064d0:	dcf1      	bgt.n	80064b6 <_printf_float+0x40e>
 80064d2:	464b      	mov	r3, r9
 80064d4:	f104 0250 	add.w	r2, r4, #80	; 0x50
 80064d8:	e6dc      	b.n	8006294 <_printf_float+0x1ec>
 80064da:	f04f 0800 	mov.w	r8, #0
 80064de:	f104 0a1a 	add.w	sl, r4, #26
 80064e2:	e7f2      	b.n	80064ca <_printf_float+0x422>
 80064e4:	2301      	movs	r3, #1
 80064e6:	4642      	mov	r2, r8
 80064e8:	e7df      	b.n	80064aa <_printf_float+0x402>
 80064ea:	2301      	movs	r3, #1
 80064ec:	464a      	mov	r2, r9
 80064ee:	4631      	mov	r1, r6
 80064f0:	4628      	mov	r0, r5
 80064f2:	47b8      	blx	r7
 80064f4:	3001      	adds	r0, #1
 80064f6:	f43f ae38 	beq.w	800616a <_printf_float+0xc2>
 80064fa:	f108 0801 	add.w	r8, r8, #1
 80064fe:	68e3      	ldr	r3, [r4, #12]
 8006500:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8006502:	1a5b      	subs	r3, r3, r1
 8006504:	4543      	cmp	r3, r8
 8006506:	dcf0      	bgt.n	80064ea <_printf_float+0x442>
 8006508:	e6fa      	b.n	8006300 <_printf_float+0x258>
 800650a:	f04f 0800 	mov.w	r8, #0
 800650e:	f104 0919 	add.w	r9, r4, #25
 8006512:	e7f4      	b.n	80064fe <_printf_float+0x456>

08006514 <_printf_common>:
 8006514:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006518:	4616      	mov	r6, r2
 800651a:	4699      	mov	r9, r3
 800651c:	688a      	ldr	r2, [r1, #8]
 800651e:	690b      	ldr	r3, [r1, #16]
 8006520:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8006524:	4293      	cmp	r3, r2
 8006526:	bfb8      	it	lt
 8006528:	4613      	movlt	r3, r2
 800652a:	6033      	str	r3, [r6, #0]
 800652c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8006530:	4607      	mov	r7, r0
 8006532:	460c      	mov	r4, r1
 8006534:	b10a      	cbz	r2, 800653a <_printf_common+0x26>
 8006536:	3301      	adds	r3, #1
 8006538:	6033      	str	r3, [r6, #0]
 800653a:	6823      	ldr	r3, [r4, #0]
 800653c:	0699      	lsls	r1, r3, #26
 800653e:	bf42      	ittt	mi
 8006540:	6833      	ldrmi	r3, [r6, #0]
 8006542:	3302      	addmi	r3, #2
 8006544:	6033      	strmi	r3, [r6, #0]
 8006546:	6825      	ldr	r5, [r4, #0]
 8006548:	f015 0506 	ands.w	r5, r5, #6
 800654c:	d106      	bne.n	800655c <_printf_common+0x48>
 800654e:	f104 0a19 	add.w	sl, r4, #25
 8006552:	68e3      	ldr	r3, [r4, #12]
 8006554:	6832      	ldr	r2, [r6, #0]
 8006556:	1a9b      	subs	r3, r3, r2
 8006558:	42ab      	cmp	r3, r5
 800655a:	dc26      	bgt.n	80065aa <_printf_common+0x96>
 800655c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8006560:	1e13      	subs	r3, r2, #0
 8006562:	6822      	ldr	r2, [r4, #0]
 8006564:	bf18      	it	ne
 8006566:	2301      	movne	r3, #1
 8006568:	0692      	lsls	r2, r2, #26
 800656a:	d42b      	bmi.n	80065c4 <_printf_common+0xb0>
 800656c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8006570:	4649      	mov	r1, r9
 8006572:	4638      	mov	r0, r7
 8006574:	47c0      	blx	r8
 8006576:	3001      	adds	r0, #1
 8006578:	d01e      	beq.n	80065b8 <_printf_common+0xa4>
 800657a:	6823      	ldr	r3, [r4, #0]
 800657c:	68e5      	ldr	r5, [r4, #12]
 800657e:	6832      	ldr	r2, [r6, #0]
 8006580:	f003 0306 	and.w	r3, r3, #6
 8006584:	2b04      	cmp	r3, #4
 8006586:	bf08      	it	eq
 8006588:	1aad      	subeq	r5, r5, r2
 800658a:	68a3      	ldr	r3, [r4, #8]
 800658c:	6922      	ldr	r2, [r4, #16]
 800658e:	bf0c      	ite	eq
 8006590:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8006594:	2500      	movne	r5, #0
 8006596:	4293      	cmp	r3, r2
 8006598:	bfc4      	itt	gt
 800659a:	1a9b      	subgt	r3, r3, r2
 800659c:	18ed      	addgt	r5, r5, r3
 800659e:	2600      	movs	r6, #0
 80065a0:	341a      	adds	r4, #26
 80065a2:	42b5      	cmp	r5, r6
 80065a4:	d11a      	bne.n	80065dc <_printf_common+0xc8>
 80065a6:	2000      	movs	r0, #0
 80065a8:	e008      	b.n	80065bc <_printf_common+0xa8>
 80065aa:	2301      	movs	r3, #1
 80065ac:	4652      	mov	r2, sl
 80065ae:	4649      	mov	r1, r9
 80065b0:	4638      	mov	r0, r7
 80065b2:	47c0      	blx	r8
 80065b4:	3001      	adds	r0, #1
 80065b6:	d103      	bne.n	80065c0 <_printf_common+0xac>
 80065b8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80065bc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80065c0:	3501      	adds	r5, #1
 80065c2:	e7c6      	b.n	8006552 <_printf_common+0x3e>
 80065c4:	18e1      	adds	r1, r4, r3
 80065c6:	1c5a      	adds	r2, r3, #1
 80065c8:	2030      	movs	r0, #48	; 0x30
 80065ca:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80065ce:	4422      	add	r2, r4
 80065d0:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80065d4:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80065d8:	3302      	adds	r3, #2
 80065da:	e7c7      	b.n	800656c <_printf_common+0x58>
 80065dc:	2301      	movs	r3, #1
 80065de:	4622      	mov	r2, r4
 80065e0:	4649      	mov	r1, r9
 80065e2:	4638      	mov	r0, r7
 80065e4:	47c0      	blx	r8
 80065e6:	3001      	adds	r0, #1
 80065e8:	d0e6      	beq.n	80065b8 <_printf_common+0xa4>
 80065ea:	3601      	adds	r6, #1
 80065ec:	e7d9      	b.n	80065a2 <_printf_common+0x8e>
	...

080065f0 <_printf_i>:
 80065f0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80065f4:	460c      	mov	r4, r1
 80065f6:	4691      	mov	r9, r2
 80065f8:	7e27      	ldrb	r7, [r4, #24]
 80065fa:	990c      	ldr	r1, [sp, #48]	; 0x30
 80065fc:	2f78      	cmp	r7, #120	; 0x78
 80065fe:	4680      	mov	r8, r0
 8006600:	469a      	mov	sl, r3
 8006602:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8006606:	d807      	bhi.n	8006618 <_printf_i+0x28>
 8006608:	2f62      	cmp	r7, #98	; 0x62
 800660a:	d80a      	bhi.n	8006622 <_printf_i+0x32>
 800660c:	2f00      	cmp	r7, #0
 800660e:	f000 80d8 	beq.w	80067c2 <_printf_i+0x1d2>
 8006612:	2f58      	cmp	r7, #88	; 0x58
 8006614:	f000 80a3 	beq.w	800675e <_printf_i+0x16e>
 8006618:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800661c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8006620:	e03a      	b.n	8006698 <_printf_i+0xa8>
 8006622:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8006626:	2b15      	cmp	r3, #21
 8006628:	d8f6      	bhi.n	8006618 <_printf_i+0x28>
 800662a:	a001      	add	r0, pc, #4	; (adr r0, 8006630 <_printf_i+0x40>)
 800662c:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8006630:	08006689 	.word	0x08006689
 8006634:	0800669d 	.word	0x0800669d
 8006638:	08006619 	.word	0x08006619
 800663c:	08006619 	.word	0x08006619
 8006640:	08006619 	.word	0x08006619
 8006644:	08006619 	.word	0x08006619
 8006648:	0800669d 	.word	0x0800669d
 800664c:	08006619 	.word	0x08006619
 8006650:	08006619 	.word	0x08006619
 8006654:	08006619 	.word	0x08006619
 8006658:	08006619 	.word	0x08006619
 800665c:	080067a9 	.word	0x080067a9
 8006660:	080066cd 	.word	0x080066cd
 8006664:	0800678b 	.word	0x0800678b
 8006668:	08006619 	.word	0x08006619
 800666c:	08006619 	.word	0x08006619
 8006670:	080067cb 	.word	0x080067cb
 8006674:	08006619 	.word	0x08006619
 8006678:	080066cd 	.word	0x080066cd
 800667c:	08006619 	.word	0x08006619
 8006680:	08006619 	.word	0x08006619
 8006684:	08006793 	.word	0x08006793
 8006688:	680b      	ldr	r3, [r1, #0]
 800668a:	1d1a      	adds	r2, r3, #4
 800668c:	681b      	ldr	r3, [r3, #0]
 800668e:	600a      	str	r2, [r1, #0]
 8006690:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8006694:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8006698:	2301      	movs	r3, #1
 800669a:	e0a3      	b.n	80067e4 <_printf_i+0x1f4>
 800669c:	6825      	ldr	r5, [r4, #0]
 800669e:	6808      	ldr	r0, [r1, #0]
 80066a0:	062e      	lsls	r6, r5, #24
 80066a2:	f100 0304 	add.w	r3, r0, #4
 80066a6:	d50a      	bpl.n	80066be <_printf_i+0xce>
 80066a8:	6805      	ldr	r5, [r0, #0]
 80066aa:	600b      	str	r3, [r1, #0]
 80066ac:	2d00      	cmp	r5, #0
 80066ae:	da03      	bge.n	80066b8 <_printf_i+0xc8>
 80066b0:	232d      	movs	r3, #45	; 0x2d
 80066b2:	426d      	negs	r5, r5
 80066b4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80066b8:	485e      	ldr	r0, [pc, #376]	; (8006834 <_printf_i+0x244>)
 80066ba:	230a      	movs	r3, #10
 80066bc:	e019      	b.n	80066f2 <_printf_i+0x102>
 80066be:	f015 0f40 	tst.w	r5, #64	; 0x40
 80066c2:	6805      	ldr	r5, [r0, #0]
 80066c4:	600b      	str	r3, [r1, #0]
 80066c6:	bf18      	it	ne
 80066c8:	b22d      	sxthne	r5, r5
 80066ca:	e7ef      	b.n	80066ac <_printf_i+0xbc>
 80066cc:	680b      	ldr	r3, [r1, #0]
 80066ce:	6825      	ldr	r5, [r4, #0]
 80066d0:	1d18      	adds	r0, r3, #4
 80066d2:	6008      	str	r0, [r1, #0]
 80066d4:	0628      	lsls	r0, r5, #24
 80066d6:	d501      	bpl.n	80066dc <_printf_i+0xec>
 80066d8:	681d      	ldr	r5, [r3, #0]
 80066da:	e002      	b.n	80066e2 <_printf_i+0xf2>
 80066dc:	0669      	lsls	r1, r5, #25
 80066de:	d5fb      	bpl.n	80066d8 <_printf_i+0xe8>
 80066e0:	881d      	ldrh	r5, [r3, #0]
 80066e2:	4854      	ldr	r0, [pc, #336]	; (8006834 <_printf_i+0x244>)
 80066e4:	2f6f      	cmp	r7, #111	; 0x6f
 80066e6:	bf0c      	ite	eq
 80066e8:	2308      	moveq	r3, #8
 80066ea:	230a      	movne	r3, #10
 80066ec:	2100      	movs	r1, #0
 80066ee:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80066f2:	6866      	ldr	r6, [r4, #4]
 80066f4:	60a6      	str	r6, [r4, #8]
 80066f6:	2e00      	cmp	r6, #0
 80066f8:	bfa2      	ittt	ge
 80066fa:	6821      	ldrge	r1, [r4, #0]
 80066fc:	f021 0104 	bicge.w	r1, r1, #4
 8006700:	6021      	strge	r1, [r4, #0]
 8006702:	b90d      	cbnz	r5, 8006708 <_printf_i+0x118>
 8006704:	2e00      	cmp	r6, #0
 8006706:	d04d      	beq.n	80067a4 <_printf_i+0x1b4>
 8006708:	4616      	mov	r6, r2
 800670a:	fbb5 f1f3 	udiv	r1, r5, r3
 800670e:	fb03 5711 	mls	r7, r3, r1, r5
 8006712:	5dc7      	ldrb	r7, [r0, r7]
 8006714:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8006718:	462f      	mov	r7, r5
 800671a:	42bb      	cmp	r3, r7
 800671c:	460d      	mov	r5, r1
 800671e:	d9f4      	bls.n	800670a <_printf_i+0x11a>
 8006720:	2b08      	cmp	r3, #8
 8006722:	d10b      	bne.n	800673c <_printf_i+0x14c>
 8006724:	6823      	ldr	r3, [r4, #0]
 8006726:	07df      	lsls	r7, r3, #31
 8006728:	d508      	bpl.n	800673c <_printf_i+0x14c>
 800672a:	6923      	ldr	r3, [r4, #16]
 800672c:	6861      	ldr	r1, [r4, #4]
 800672e:	4299      	cmp	r1, r3
 8006730:	bfde      	ittt	le
 8006732:	2330      	movle	r3, #48	; 0x30
 8006734:	f806 3c01 	strble.w	r3, [r6, #-1]
 8006738:	f106 36ff 	addle.w	r6, r6, #4294967295	; 0xffffffff
 800673c:	1b92      	subs	r2, r2, r6
 800673e:	6122      	str	r2, [r4, #16]
 8006740:	f8cd a000 	str.w	sl, [sp]
 8006744:	464b      	mov	r3, r9
 8006746:	aa03      	add	r2, sp, #12
 8006748:	4621      	mov	r1, r4
 800674a:	4640      	mov	r0, r8
 800674c:	f7ff fee2 	bl	8006514 <_printf_common>
 8006750:	3001      	adds	r0, #1
 8006752:	d14c      	bne.n	80067ee <_printf_i+0x1fe>
 8006754:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8006758:	b004      	add	sp, #16
 800675a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800675e:	4835      	ldr	r0, [pc, #212]	; (8006834 <_printf_i+0x244>)
 8006760:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8006764:	6823      	ldr	r3, [r4, #0]
 8006766:	680e      	ldr	r6, [r1, #0]
 8006768:	061f      	lsls	r7, r3, #24
 800676a:	f856 5b04 	ldr.w	r5, [r6], #4
 800676e:	600e      	str	r6, [r1, #0]
 8006770:	d514      	bpl.n	800679c <_printf_i+0x1ac>
 8006772:	07d9      	lsls	r1, r3, #31
 8006774:	bf44      	itt	mi
 8006776:	f043 0320 	orrmi.w	r3, r3, #32
 800677a:	6023      	strmi	r3, [r4, #0]
 800677c:	b91d      	cbnz	r5, 8006786 <_printf_i+0x196>
 800677e:	6823      	ldr	r3, [r4, #0]
 8006780:	f023 0320 	bic.w	r3, r3, #32
 8006784:	6023      	str	r3, [r4, #0]
 8006786:	2310      	movs	r3, #16
 8006788:	e7b0      	b.n	80066ec <_printf_i+0xfc>
 800678a:	6823      	ldr	r3, [r4, #0]
 800678c:	f043 0320 	orr.w	r3, r3, #32
 8006790:	6023      	str	r3, [r4, #0]
 8006792:	2378      	movs	r3, #120	; 0x78
 8006794:	4828      	ldr	r0, [pc, #160]	; (8006838 <_printf_i+0x248>)
 8006796:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800679a:	e7e3      	b.n	8006764 <_printf_i+0x174>
 800679c:	065e      	lsls	r6, r3, #25
 800679e:	bf48      	it	mi
 80067a0:	b2ad      	uxthmi	r5, r5
 80067a2:	e7e6      	b.n	8006772 <_printf_i+0x182>
 80067a4:	4616      	mov	r6, r2
 80067a6:	e7bb      	b.n	8006720 <_printf_i+0x130>
 80067a8:	680b      	ldr	r3, [r1, #0]
 80067aa:	6826      	ldr	r6, [r4, #0]
 80067ac:	6960      	ldr	r0, [r4, #20]
 80067ae:	1d1d      	adds	r5, r3, #4
 80067b0:	600d      	str	r5, [r1, #0]
 80067b2:	0635      	lsls	r5, r6, #24
 80067b4:	681b      	ldr	r3, [r3, #0]
 80067b6:	d501      	bpl.n	80067bc <_printf_i+0x1cc>
 80067b8:	6018      	str	r0, [r3, #0]
 80067ba:	e002      	b.n	80067c2 <_printf_i+0x1d2>
 80067bc:	0671      	lsls	r1, r6, #25
 80067be:	d5fb      	bpl.n	80067b8 <_printf_i+0x1c8>
 80067c0:	8018      	strh	r0, [r3, #0]
 80067c2:	2300      	movs	r3, #0
 80067c4:	6123      	str	r3, [r4, #16]
 80067c6:	4616      	mov	r6, r2
 80067c8:	e7ba      	b.n	8006740 <_printf_i+0x150>
 80067ca:	680b      	ldr	r3, [r1, #0]
 80067cc:	1d1a      	adds	r2, r3, #4
 80067ce:	600a      	str	r2, [r1, #0]
 80067d0:	681e      	ldr	r6, [r3, #0]
 80067d2:	6862      	ldr	r2, [r4, #4]
 80067d4:	2100      	movs	r1, #0
 80067d6:	4630      	mov	r0, r6
 80067d8:	f7f9 fd22 	bl	8000220 <memchr>
 80067dc:	b108      	cbz	r0, 80067e2 <_printf_i+0x1f2>
 80067de:	1b80      	subs	r0, r0, r6
 80067e0:	6060      	str	r0, [r4, #4]
 80067e2:	6863      	ldr	r3, [r4, #4]
 80067e4:	6123      	str	r3, [r4, #16]
 80067e6:	2300      	movs	r3, #0
 80067e8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80067ec:	e7a8      	b.n	8006740 <_printf_i+0x150>
 80067ee:	6923      	ldr	r3, [r4, #16]
 80067f0:	4632      	mov	r2, r6
 80067f2:	4649      	mov	r1, r9
 80067f4:	4640      	mov	r0, r8
 80067f6:	47d0      	blx	sl
 80067f8:	3001      	adds	r0, #1
 80067fa:	d0ab      	beq.n	8006754 <_printf_i+0x164>
 80067fc:	6823      	ldr	r3, [r4, #0]
 80067fe:	079b      	lsls	r3, r3, #30
 8006800:	d413      	bmi.n	800682a <_printf_i+0x23a>
 8006802:	68e0      	ldr	r0, [r4, #12]
 8006804:	9b03      	ldr	r3, [sp, #12]
 8006806:	4298      	cmp	r0, r3
 8006808:	bfb8      	it	lt
 800680a:	4618      	movlt	r0, r3
 800680c:	e7a4      	b.n	8006758 <_printf_i+0x168>
 800680e:	2301      	movs	r3, #1
 8006810:	4632      	mov	r2, r6
 8006812:	4649      	mov	r1, r9
 8006814:	4640      	mov	r0, r8
 8006816:	47d0      	blx	sl
 8006818:	3001      	adds	r0, #1
 800681a:	d09b      	beq.n	8006754 <_printf_i+0x164>
 800681c:	3501      	adds	r5, #1
 800681e:	68e3      	ldr	r3, [r4, #12]
 8006820:	9903      	ldr	r1, [sp, #12]
 8006822:	1a5b      	subs	r3, r3, r1
 8006824:	42ab      	cmp	r3, r5
 8006826:	dcf2      	bgt.n	800680e <_printf_i+0x21e>
 8006828:	e7eb      	b.n	8006802 <_printf_i+0x212>
 800682a:	2500      	movs	r5, #0
 800682c:	f104 0619 	add.w	r6, r4, #25
 8006830:	e7f5      	b.n	800681e <_printf_i+0x22e>
 8006832:	bf00      	nop
 8006834:	08008dc2 	.word	0x08008dc2
 8006838:	08008dd3 	.word	0x08008dd3

0800683c <siprintf>:
 800683c:	b40e      	push	{r1, r2, r3}
 800683e:	b500      	push	{lr}
 8006840:	b09c      	sub	sp, #112	; 0x70
 8006842:	ab1d      	add	r3, sp, #116	; 0x74
 8006844:	9002      	str	r0, [sp, #8]
 8006846:	9006      	str	r0, [sp, #24]
 8006848:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800684c:	4809      	ldr	r0, [pc, #36]	; (8006874 <siprintf+0x38>)
 800684e:	9107      	str	r1, [sp, #28]
 8006850:	9104      	str	r1, [sp, #16]
 8006852:	4909      	ldr	r1, [pc, #36]	; (8006878 <siprintf+0x3c>)
 8006854:	f853 2b04 	ldr.w	r2, [r3], #4
 8006858:	9105      	str	r1, [sp, #20]
 800685a:	6800      	ldr	r0, [r0, #0]
 800685c:	9301      	str	r3, [sp, #4]
 800685e:	a902      	add	r1, sp, #8
 8006860:	f001 fb34 	bl	8007ecc <_svfiprintf_r>
 8006864:	9b02      	ldr	r3, [sp, #8]
 8006866:	2200      	movs	r2, #0
 8006868:	701a      	strb	r2, [r3, #0]
 800686a:	b01c      	add	sp, #112	; 0x70
 800686c:	f85d eb04 	ldr.w	lr, [sp], #4
 8006870:	b003      	add	sp, #12
 8006872:	4770      	bx	lr
 8006874:	20000028 	.word	0x20000028
 8006878:	ffff0208 	.word	0xffff0208

0800687c <quorem>:
 800687c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006880:	6903      	ldr	r3, [r0, #16]
 8006882:	690c      	ldr	r4, [r1, #16]
 8006884:	42a3      	cmp	r3, r4
 8006886:	4607      	mov	r7, r0
 8006888:	f2c0 8081 	blt.w	800698e <quorem+0x112>
 800688c:	3c01      	subs	r4, #1
 800688e:	f101 0814 	add.w	r8, r1, #20
 8006892:	f100 0514 	add.w	r5, r0, #20
 8006896:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800689a:	9301      	str	r3, [sp, #4]
 800689c:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 80068a0:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80068a4:	3301      	adds	r3, #1
 80068a6:	429a      	cmp	r2, r3
 80068a8:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 80068ac:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 80068b0:	fbb2 f6f3 	udiv	r6, r2, r3
 80068b4:	d331      	bcc.n	800691a <quorem+0x9e>
 80068b6:	f04f 0e00 	mov.w	lr, #0
 80068ba:	4640      	mov	r0, r8
 80068bc:	46ac      	mov	ip, r5
 80068be:	46f2      	mov	sl, lr
 80068c0:	f850 2b04 	ldr.w	r2, [r0], #4
 80068c4:	b293      	uxth	r3, r2
 80068c6:	fb06 e303 	mla	r3, r6, r3, lr
 80068ca:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 80068ce:	b29b      	uxth	r3, r3
 80068d0:	ebaa 0303 	sub.w	r3, sl, r3
 80068d4:	0c12      	lsrs	r2, r2, #16
 80068d6:	f8dc a000 	ldr.w	sl, [ip]
 80068da:	fb06 e202 	mla	r2, r6, r2, lr
 80068de:	fa13 f38a 	uxtah	r3, r3, sl
 80068e2:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 80068e6:	fa1f fa82 	uxth.w	sl, r2
 80068ea:	f8dc 2000 	ldr.w	r2, [ip]
 80068ee:	ebca 4212 	rsb	r2, sl, r2, lsr #16
 80068f2:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80068f6:	b29b      	uxth	r3, r3
 80068f8:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80068fc:	4581      	cmp	r9, r0
 80068fe:	f84c 3b04 	str.w	r3, [ip], #4
 8006902:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8006906:	d2db      	bcs.n	80068c0 <quorem+0x44>
 8006908:	f855 300b 	ldr.w	r3, [r5, fp]
 800690c:	b92b      	cbnz	r3, 800691a <quorem+0x9e>
 800690e:	9b01      	ldr	r3, [sp, #4]
 8006910:	3b04      	subs	r3, #4
 8006912:	429d      	cmp	r5, r3
 8006914:	461a      	mov	r2, r3
 8006916:	d32e      	bcc.n	8006976 <quorem+0xfa>
 8006918:	613c      	str	r4, [r7, #16]
 800691a:	4638      	mov	r0, r7
 800691c:	f001 f8c0 	bl	8007aa0 <__mcmp>
 8006920:	2800      	cmp	r0, #0
 8006922:	db24      	blt.n	800696e <quorem+0xf2>
 8006924:	3601      	adds	r6, #1
 8006926:	4628      	mov	r0, r5
 8006928:	f04f 0c00 	mov.w	ip, #0
 800692c:	f858 2b04 	ldr.w	r2, [r8], #4
 8006930:	f8d0 e000 	ldr.w	lr, [r0]
 8006934:	b293      	uxth	r3, r2
 8006936:	ebac 0303 	sub.w	r3, ip, r3
 800693a:	0c12      	lsrs	r2, r2, #16
 800693c:	fa13 f38e 	uxtah	r3, r3, lr
 8006940:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8006944:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8006948:	b29b      	uxth	r3, r3
 800694a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800694e:	45c1      	cmp	r9, r8
 8006950:	f840 3b04 	str.w	r3, [r0], #4
 8006954:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8006958:	d2e8      	bcs.n	800692c <quorem+0xb0>
 800695a:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800695e:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8006962:	b922      	cbnz	r2, 800696e <quorem+0xf2>
 8006964:	3b04      	subs	r3, #4
 8006966:	429d      	cmp	r5, r3
 8006968:	461a      	mov	r2, r3
 800696a:	d30a      	bcc.n	8006982 <quorem+0x106>
 800696c:	613c      	str	r4, [r7, #16]
 800696e:	4630      	mov	r0, r6
 8006970:	b003      	add	sp, #12
 8006972:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006976:	6812      	ldr	r2, [r2, #0]
 8006978:	3b04      	subs	r3, #4
 800697a:	2a00      	cmp	r2, #0
 800697c:	d1cc      	bne.n	8006918 <quorem+0x9c>
 800697e:	3c01      	subs	r4, #1
 8006980:	e7c7      	b.n	8006912 <quorem+0x96>
 8006982:	6812      	ldr	r2, [r2, #0]
 8006984:	3b04      	subs	r3, #4
 8006986:	2a00      	cmp	r2, #0
 8006988:	d1f0      	bne.n	800696c <quorem+0xf0>
 800698a:	3c01      	subs	r4, #1
 800698c:	e7eb      	b.n	8006966 <quorem+0xea>
 800698e:	2000      	movs	r0, #0
 8006990:	e7ee      	b.n	8006970 <quorem+0xf4>
 8006992:	0000      	movs	r0, r0
 8006994:	0000      	movs	r0, r0
	...

08006998 <_dtoa_r>:
 8006998:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800699c:	ed2d 8b02 	vpush	{d8}
 80069a0:	ec57 6b10 	vmov	r6, r7, d0
 80069a4:	b095      	sub	sp, #84	; 0x54
 80069a6:	6a45      	ldr	r5, [r0, #36]	; 0x24
 80069a8:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 80069ac:	9105      	str	r1, [sp, #20]
 80069ae:	e9cd 6702 	strd	r6, r7, [sp, #8]
 80069b2:	4604      	mov	r4, r0
 80069b4:	9209      	str	r2, [sp, #36]	; 0x24
 80069b6:	930f      	str	r3, [sp, #60]	; 0x3c
 80069b8:	b975      	cbnz	r5, 80069d8 <_dtoa_r+0x40>
 80069ba:	2010      	movs	r0, #16
 80069bc:	f000 fddc 	bl	8007578 <malloc>
 80069c0:	4602      	mov	r2, r0
 80069c2:	6260      	str	r0, [r4, #36]	; 0x24
 80069c4:	b920      	cbnz	r0, 80069d0 <_dtoa_r+0x38>
 80069c6:	4bb2      	ldr	r3, [pc, #712]	; (8006c90 <_dtoa_r+0x2f8>)
 80069c8:	21ea      	movs	r1, #234	; 0xea
 80069ca:	48b2      	ldr	r0, [pc, #712]	; (8006c94 <_dtoa_r+0x2fc>)
 80069cc:	f001 fb8e 	bl	80080ec <__assert_func>
 80069d0:	e9c0 5501 	strd	r5, r5, [r0, #4]
 80069d4:	6005      	str	r5, [r0, #0]
 80069d6:	60c5      	str	r5, [r0, #12]
 80069d8:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80069da:	6819      	ldr	r1, [r3, #0]
 80069dc:	b151      	cbz	r1, 80069f4 <_dtoa_r+0x5c>
 80069de:	685a      	ldr	r2, [r3, #4]
 80069e0:	604a      	str	r2, [r1, #4]
 80069e2:	2301      	movs	r3, #1
 80069e4:	4093      	lsls	r3, r2
 80069e6:	608b      	str	r3, [r1, #8]
 80069e8:	4620      	mov	r0, r4
 80069ea:	f000 fe1b 	bl	8007624 <_Bfree>
 80069ee:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80069f0:	2200      	movs	r2, #0
 80069f2:	601a      	str	r2, [r3, #0]
 80069f4:	1e3b      	subs	r3, r7, #0
 80069f6:	bfb9      	ittee	lt
 80069f8:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 80069fc:	9303      	strlt	r3, [sp, #12]
 80069fe:	2300      	movge	r3, #0
 8006a00:	f8c8 3000 	strge.w	r3, [r8]
 8006a04:	f8dd 900c 	ldr.w	r9, [sp, #12]
 8006a08:	4ba3      	ldr	r3, [pc, #652]	; (8006c98 <_dtoa_r+0x300>)
 8006a0a:	bfbc      	itt	lt
 8006a0c:	2201      	movlt	r2, #1
 8006a0e:	f8c8 2000 	strlt.w	r2, [r8]
 8006a12:	ea33 0309 	bics.w	r3, r3, r9
 8006a16:	d11b      	bne.n	8006a50 <_dtoa_r+0xb8>
 8006a18:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8006a1a:	f242 730f 	movw	r3, #9999	; 0x270f
 8006a1e:	6013      	str	r3, [r2, #0]
 8006a20:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8006a24:	4333      	orrs	r3, r6
 8006a26:	f000 857a 	beq.w	800751e <_dtoa_r+0xb86>
 8006a2a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8006a2c:	b963      	cbnz	r3, 8006a48 <_dtoa_r+0xb0>
 8006a2e:	4b9b      	ldr	r3, [pc, #620]	; (8006c9c <_dtoa_r+0x304>)
 8006a30:	e024      	b.n	8006a7c <_dtoa_r+0xe4>
 8006a32:	4b9b      	ldr	r3, [pc, #620]	; (8006ca0 <_dtoa_r+0x308>)
 8006a34:	9300      	str	r3, [sp, #0]
 8006a36:	3308      	adds	r3, #8
 8006a38:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8006a3a:	6013      	str	r3, [r2, #0]
 8006a3c:	9800      	ldr	r0, [sp, #0]
 8006a3e:	b015      	add	sp, #84	; 0x54
 8006a40:	ecbd 8b02 	vpop	{d8}
 8006a44:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006a48:	4b94      	ldr	r3, [pc, #592]	; (8006c9c <_dtoa_r+0x304>)
 8006a4a:	9300      	str	r3, [sp, #0]
 8006a4c:	3303      	adds	r3, #3
 8006a4e:	e7f3      	b.n	8006a38 <_dtoa_r+0xa0>
 8006a50:	ed9d 7b02 	vldr	d7, [sp, #8]
 8006a54:	2200      	movs	r2, #0
 8006a56:	ec51 0b17 	vmov	r0, r1, d7
 8006a5a:	2300      	movs	r3, #0
 8006a5c:	ed8d 7b0a 	vstr	d7, [sp, #40]	; 0x28
 8006a60:	f7fa f852 	bl	8000b08 <__aeabi_dcmpeq>
 8006a64:	4680      	mov	r8, r0
 8006a66:	b158      	cbz	r0, 8006a80 <_dtoa_r+0xe8>
 8006a68:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8006a6a:	2301      	movs	r3, #1
 8006a6c:	6013      	str	r3, [r2, #0]
 8006a6e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8006a70:	2b00      	cmp	r3, #0
 8006a72:	f000 8551 	beq.w	8007518 <_dtoa_r+0xb80>
 8006a76:	488b      	ldr	r0, [pc, #556]	; (8006ca4 <_dtoa_r+0x30c>)
 8006a78:	6018      	str	r0, [r3, #0]
 8006a7a:	1e43      	subs	r3, r0, #1
 8006a7c:	9300      	str	r3, [sp, #0]
 8006a7e:	e7dd      	b.n	8006a3c <_dtoa_r+0xa4>
 8006a80:	ed9d 0b0a 	vldr	d0, [sp, #40]	; 0x28
 8006a84:	aa12      	add	r2, sp, #72	; 0x48
 8006a86:	a913      	add	r1, sp, #76	; 0x4c
 8006a88:	4620      	mov	r0, r4
 8006a8a:	f001 f8ad 	bl	8007be8 <__d2b>
 8006a8e:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8006a92:	4683      	mov	fp, r0
 8006a94:	2d00      	cmp	r5, #0
 8006a96:	d07c      	beq.n	8006b92 <_dtoa_r+0x1fa>
 8006a98:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006a9a:	f8cd 8040 	str.w	r8, [sp, #64]	; 0x40
 8006a9e:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8006aa2:	e9dd 670a 	ldrd	r6, r7, [sp, #40]	; 0x28
 8006aa6:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 8006aaa:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 8006aae:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8006ab2:	4b7d      	ldr	r3, [pc, #500]	; (8006ca8 <_dtoa_r+0x310>)
 8006ab4:	2200      	movs	r2, #0
 8006ab6:	4630      	mov	r0, r6
 8006ab8:	4639      	mov	r1, r7
 8006aba:	f7f9 fc05 	bl	80002c8 <__aeabi_dsub>
 8006abe:	a36e      	add	r3, pc, #440	; (adr r3, 8006c78 <_dtoa_r+0x2e0>)
 8006ac0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006ac4:	f7f9 fdb8 	bl	8000638 <__aeabi_dmul>
 8006ac8:	a36d      	add	r3, pc, #436	; (adr r3, 8006c80 <_dtoa_r+0x2e8>)
 8006aca:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006ace:	f7f9 fbfd 	bl	80002cc <__adddf3>
 8006ad2:	4606      	mov	r6, r0
 8006ad4:	4628      	mov	r0, r5
 8006ad6:	460f      	mov	r7, r1
 8006ad8:	f7f9 fd44 	bl	8000564 <__aeabi_i2d>
 8006adc:	a36a      	add	r3, pc, #424	; (adr r3, 8006c88 <_dtoa_r+0x2f0>)
 8006ade:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006ae2:	f7f9 fda9 	bl	8000638 <__aeabi_dmul>
 8006ae6:	4602      	mov	r2, r0
 8006ae8:	460b      	mov	r3, r1
 8006aea:	4630      	mov	r0, r6
 8006aec:	4639      	mov	r1, r7
 8006aee:	f7f9 fbed 	bl	80002cc <__adddf3>
 8006af2:	4606      	mov	r6, r0
 8006af4:	460f      	mov	r7, r1
 8006af6:	f7fa f84f 	bl	8000b98 <__aeabi_d2iz>
 8006afa:	2200      	movs	r2, #0
 8006afc:	4682      	mov	sl, r0
 8006afe:	2300      	movs	r3, #0
 8006b00:	4630      	mov	r0, r6
 8006b02:	4639      	mov	r1, r7
 8006b04:	f7fa f80a 	bl	8000b1c <__aeabi_dcmplt>
 8006b08:	b148      	cbz	r0, 8006b1e <_dtoa_r+0x186>
 8006b0a:	4650      	mov	r0, sl
 8006b0c:	f7f9 fd2a 	bl	8000564 <__aeabi_i2d>
 8006b10:	4632      	mov	r2, r6
 8006b12:	463b      	mov	r3, r7
 8006b14:	f7f9 fff8 	bl	8000b08 <__aeabi_dcmpeq>
 8006b18:	b908      	cbnz	r0, 8006b1e <_dtoa_r+0x186>
 8006b1a:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 8006b1e:	f1ba 0f16 	cmp.w	sl, #22
 8006b22:	d854      	bhi.n	8006bce <_dtoa_r+0x236>
 8006b24:	4b61      	ldr	r3, [pc, #388]	; (8006cac <_dtoa_r+0x314>)
 8006b26:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8006b2a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006b2e:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8006b32:	f7f9 fff3 	bl	8000b1c <__aeabi_dcmplt>
 8006b36:	2800      	cmp	r0, #0
 8006b38:	d04b      	beq.n	8006bd2 <_dtoa_r+0x23a>
 8006b3a:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 8006b3e:	2300      	movs	r3, #0
 8006b40:	930e      	str	r3, [sp, #56]	; 0x38
 8006b42:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8006b44:	1b5d      	subs	r5, r3, r5
 8006b46:	1e6b      	subs	r3, r5, #1
 8006b48:	9304      	str	r3, [sp, #16]
 8006b4a:	bf43      	ittte	mi
 8006b4c:	2300      	movmi	r3, #0
 8006b4e:	f1c5 0801 	rsbmi	r8, r5, #1
 8006b52:	9304      	strmi	r3, [sp, #16]
 8006b54:	f04f 0800 	movpl.w	r8, #0
 8006b58:	f1ba 0f00 	cmp.w	sl, #0
 8006b5c:	db3b      	blt.n	8006bd6 <_dtoa_r+0x23e>
 8006b5e:	9b04      	ldr	r3, [sp, #16]
 8006b60:	f8cd a034 	str.w	sl, [sp, #52]	; 0x34
 8006b64:	4453      	add	r3, sl
 8006b66:	9304      	str	r3, [sp, #16]
 8006b68:	2300      	movs	r3, #0
 8006b6a:	9306      	str	r3, [sp, #24]
 8006b6c:	9b05      	ldr	r3, [sp, #20]
 8006b6e:	2b09      	cmp	r3, #9
 8006b70:	d869      	bhi.n	8006c46 <_dtoa_r+0x2ae>
 8006b72:	2b05      	cmp	r3, #5
 8006b74:	bfc4      	itt	gt
 8006b76:	3b04      	subgt	r3, #4
 8006b78:	9305      	strgt	r3, [sp, #20]
 8006b7a:	9b05      	ldr	r3, [sp, #20]
 8006b7c:	f1a3 0302 	sub.w	r3, r3, #2
 8006b80:	bfcc      	ite	gt
 8006b82:	2500      	movgt	r5, #0
 8006b84:	2501      	movle	r5, #1
 8006b86:	2b03      	cmp	r3, #3
 8006b88:	d869      	bhi.n	8006c5e <_dtoa_r+0x2c6>
 8006b8a:	e8df f003 	tbb	[pc, r3]
 8006b8e:	4e2c      	.short	0x4e2c
 8006b90:	5a4c      	.short	0x5a4c
 8006b92:	e9dd 5312 	ldrd	r5, r3, [sp, #72]	; 0x48
 8006b96:	441d      	add	r5, r3
 8006b98:	f205 4332 	addw	r3, r5, #1074	; 0x432
 8006b9c:	2b20      	cmp	r3, #32
 8006b9e:	bfc1      	itttt	gt
 8006ba0:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8006ba4:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 8006ba8:	fa09 f303 	lslgt.w	r3, r9, r3
 8006bac:	fa26 f000 	lsrgt.w	r0, r6, r0
 8006bb0:	bfda      	itte	le
 8006bb2:	f1c3 0320 	rsble	r3, r3, #32
 8006bb6:	fa06 f003 	lslle.w	r0, r6, r3
 8006bba:	4318      	orrgt	r0, r3
 8006bbc:	f7f9 fcc2 	bl	8000544 <__aeabi_ui2d>
 8006bc0:	2301      	movs	r3, #1
 8006bc2:	4606      	mov	r6, r0
 8006bc4:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 8006bc8:	3d01      	subs	r5, #1
 8006bca:	9310      	str	r3, [sp, #64]	; 0x40
 8006bcc:	e771      	b.n	8006ab2 <_dtoa_r+0x11a>
 8006bce:	2301      	movs	r3, #1
 8006bd0:	e7b6      	b.n	8006b40 <_dtoa_r+0x1a8>
 8006bd2:	900e      	str	r0, [sp, #56]	; 0x38
 8006bd4:	e7b5      	b.n	8006b42 <_dtoa_r+0x1aa>
 8006bd6:	f1ca 0300 	rsb	r3, sl, #0
 8006bda:	9306      	str	r3, [sp, #24]
 8006bdc:	2300      	movs	r3, #0
 8006bde:	eba8 080a 	sub.w	r8, r8, sl
 8006be2:	930d      	str	r3, [sp, #52]	; 0x34
 8006be4:	e7c2      	b.n	8006b6c <_dtoa_r+0x1d4>
 8006be6:	2300      	movs	r3, #0
 8006be8:	9308      	str	r3, [sp, #32]
 8006bea:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006bec:	2b00      	cmp	r3, #0
 8006bee:	dc39      	bgt.n	8006c64 <_dtoa_r+0x2cc>
 8006bf0:	f04f 0901 	mov.w	r9, #1
 8006bf4:	f8cd 9004 	str.w	r9, [sp, #4]
 8006bf8:	464b      	mov	r3, r9
 8006bfa:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
 8006bfe:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8006c00:	2200      	movs	r2, #0
 8006c02:	6042      	str	r2, [r0, #4]
 8006c04:	2204      	movs	r2, #4
 8006c06:	f102 0614 	add.w	r6, r2, #20
 8006c0a:	429e      	cmp	r6, r3
 8006c0c:	6841      	ldr	r1, [r0, #4]
 8006c0e:	d92f      	bls.n	8006c70 <_dtoa_r+0x2d8>
 8006c10:	4620      	mov	r0, r4
 8006c12:	f000 fcc7 	bl	80075a4 <_Balloc>
 8006c16:	9000      	str	r0, [sp, #0]
 8006c18:	2800      	cmp	r0, #0
 8006c1a:	d14b      	bne.n	8006cb4 <_dtoa_r+0x31c>
 8006c1c:	4b24      	ldr	r3, [pc, #144]	; (8006cb0 <_dtoa_r+0x318>)
 8006c1e:	4602      	mov	r2, r0
 8006c20:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8006c24:	e6d1      	b.n	80069ca <_dtoa_r+0x32>
 8006c26:	2301      	movs	r3, #1
 8006c28:	e7de      	b.n	8006be8 <_dtoa_r+0x250>
 8006c2a:	2300      	movs	r3, #0
 8006c2c:	9308      	str	r3, [sp, #32]
 8006c2e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006c30:	eb0a 0903 	add.w	r9, sl, r3
 8006c34:	f109 0301 	add.w	r3, r9, #1
 8006c38:	2b01      	cmp	r3, #1
 8006c3a:	9301      	str	r3, [sp, #4]
 8006c3c:	bfb8      	it	lt
 8006c3e:	2301      	movlt	r3, #1
 8006c40:	e7dd      	b.n	8006bfe <_dtoa_r+0x266>
 8006c42:	2301      	movs	r3, #1
 8006c44:	e7f2      	b.n	8006c2c <_dtoa_r+0x294>
 8006c46:	2501      	movs	r5, #1
 8006c48:	2300      	movs	r3, #0
 8006c4a:	9305      	str	r3, [sp, #20]
 8006c4c:	9508      	str	r5, [sp, #32]
 8006c4e:	f04f 39ff 	mov.w	r9, #4294967295	; 0xffffffff
 8006c52:	2200      	movs	r2, #0
 8006c54:	f8cd 9004 	str.w	r9, [sp, #4]
 8006c58:	2312      	movs	r3, #18
 8006c5a:	9209      	str	r2, [sp, #36]	; 0x24
 8006c5c:	e7cf      	b.n	8006bfe <_dtoa_r+0x266>
 8006c5e:	2301      	movs	r3, #1
 8006c60:	9308      	str	r3, [sp, #32]
 8006c62:	e7f4      	b.n	8006c4e <_dtoa_r+0x2b6>
 8006c64:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
 8006c68:	f8cd 9004 	str.w	r9, [sp, #4]
 8006c6c:	464b      	mov	r3, r9
 8006c6e:	e7c6      	b.n	8006bfe <_dtoa_r+0x266>
 8006c70:	3101      	adds	r1, #1
 8006c72:	6041      	str	r1, [r0, #4]
 8006c74:	0052      	lsls	r2, r2, #1
 8006c76:	e7c6      	b.n	8006c06 <_dtoa_r+0x26e>
 8006c78:	636f4361 	.word	0x636f4361
 8006c7c:	3fd287a7 	.word	0x3fd287a7
 8006c80:	8b60c8b3 	.word	0x8b60c8b3
 8006c84:	3fc68a28 	.word	0x3fc68a28
 8006c88:	509f79fb 	.word	0x509f79fb
 8006c8c:	3fd34413 	.word	0x3fd34413
 8006c90:	08008df1 	.word	0x08008df1
 8006c94:	08008e08 	.word	0x08008e08
 8006c98:	7ff00000 	.word	0x7ff00000
 8006c9c:	08008ded 	.word	0x08008ded
 8006ca0:	08008de4 	.word	0x08008de4
 8006ca4:	08008dc1 	.word	0x08008dc1
 8006ca8:	3ff80000 	.word	0x3ff80000
 8006cac:	08008f00 	.word	0x08008f00
 8006cb0:	08008e67 	.word	0x08008e67
 8006cb4:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8006cb6:	9a00      	ldr	r2, [sp, #0]
 8006cb8:	601a      	str	r2, [r3, #0]
 8006cba:	9b01      	ldr	r3, [sp, #4]
 8006cbc:	2b0e      	cmp	r3, #14
 8006cbe:	f200 80ad 	bhi.w	8006e1c <_dtoa_r+0x484>
 8006cc2:	2d00      	cmp	r5, #0
 8006cc4:	f000 80aa 	beq.w	8006e1c <_dtoa_r+0x484>
 8006cc8:	f1ba 0f00 	cmp.w	sl, #0
 8006ccc:	dd36      	ble.n	8006d3c <_dtoa_r+0x3a4>
 8006cce:	4ac3      	ldr	r2, [pc, #780]	; (8006fdc <_dtoa_r+0x644>)
 8006cd0:	f00a 030f 	and.w	r3, sl, #15
 8006cd4:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8006cd8:	ed93 7b00 	vldr	d7, [r3]
 8006cdc:	f41a 7f80 	tst.w	sl, #256	; 0x100
 8006ce0:	ea4f 172a 	mov.w	r7, sl, asr #4
 8006ce4:	eeb0 8a47 	vmov.f32	s16, s14
 8006ce8:	eef0 8a67 	vmov.f32	s17, s15
 8006cec:	d016      	beq.n	8006d1c <_dtoa_r+0x384>
 8006cee:	4bbc      	ldr	r3, [pc, #752]	; (8006fe0 <_dtoa_r+0x648>)
 8006cf0:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8006cf4:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8006cf8:	f7f9 fdc8 	bl	800088c <__aeabi_ddiv>
 8006cfc:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006d00:	f007 070f 	and.w	r7, r7, #15
 8006d04:	2503      	movs	r5, #3
 8006d06:	4eb6      	ldr	r6, [pc, #728]	; (8006fe0 <_dtoa_r+0x648>)
 8006d08:	b957      	cbnz	r7, 8006d20 <_dtoa_r+0x388>
 8006d0a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006d0e:	ec53 2b18 	vmov	r2, r3, d8
 8006d12:	f7f9 fdbb 	bl	800088c <__aeabi_ddiv>
 8006d16:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006d1a:	e029      	b.n	8006d70 <_dtoa_r+0x3d8>
 8006d1c:	2502      	movs	r5, #2
 8006d1e:	e7f2      	b.n	8006d06 <_dtoa_r+0x36e>
 8006d20:	07f9      	lsls	r1, r7, #31
 8006d22:	d508      	bpl.n	8006d36 <_dtoa_r+0x39e>
 8006d24:	ec51 0b18 	vmov	r0, r1, d8
 8006d28:	e9d6 2300 	ldrd	r2, r3, [r6]
 8006d2c:	f7f9 fc84 	bl	8000638 <__aeabi_dmul>
 8006d30:	ec41 0b18 	vmov	d8, r0, r1
 8006d34:	3501      	adds	r5, #1
 8006d36:	107f      	asrs	r7, r7, #1
 8006d38:	3608      	adds	r6, #8
 8006d3a:	e7e5      	b.n	8006d08 <_dtoa_r+0x370>
 8006d3c:	f000 80a6 	beq.w	8006e8c <_dtoa_r+0x4f4>
 8006d40:	f1ca 0600 	rsb	r6, sl, #0
 8006d44:	4ba5      	ldr	r3, [pc, #660]	; (8006fdc <_dtoa_r+0x644>)
 8006d46:	4fa6      	ldr	r7, [pc, #664]	; (8006fe0 <_dtoa_r+0x648>)
 8006d48:	f006 020f 	and.w	r2, r6, #15
 8006d4c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8006d50:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006d54:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8006d58:	f7f9 fc6e 	bl	8000638 <__aeabi_dmul>
 8006d5c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006d60:	1136      	asrs	r6, r6, #4
 8006d62:	2300      	movs	r3, #0
 8006d64:	2502      	movs	r5, #2
 8006d66:	2e00      	cmp	r6, #0
 8006d68:	f040 8085 	bne.w	8006e76 <_dtoa_r+0x4de>
 8006d6c:	2b00      	cmp	r3, #0
 8006d6e:	d1d2      	bne.n	8006d16 <_dtoa_r+0x37e>
 8006d70:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8006d72:	2b00      	cmp	r3, #0
 8006d74:	f000 808c 	beq.w	8006e90 <_dtoa_r+0x4f8>
 8006d78:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8006d7c:	4b99      	ldr	r3, [pc, #612]	; (8006fe4 <_dtoa_r+0x64c>)
 8006d7e:	2200      	movs	r2, #0
 8006d80:	4630      	mov	r0, r6
 8006d82:	4639      	mov	r1, r7
 8006d84:	f7f9 feca 	bl	8000b1c <__aeabi_dcmplt>
 8006d88:	2800      	cmp	r0, #0
 8006d8a:	f000 8081 	beq.w	8006e90 <_dtoa_r+0x4f8>
 8006d8e:	9b01      	ldr	r3, [sp, #4]
 8006d90:	2b00      	cmp	r3, #0
 8006d92:	d07d      	beq.n	8006e90 <_dtoa_r+0x4f8>
 8006d94:	f1b9 0f00 	cmp.w	r9, #0
 8006d98:	dd3c      	ble.n	8006e14 <_dtoa_r+0x47c>
 8006d9a:	f10a 33ff 	add.w	r3, sl, #4294967295	; 0xffffffff
 8006d9e:	9307      	str	r3, [sp, #28]
 8006da0:	2200      	movs	r2, #0
 8006da2:	4b91      	ldr	r3, [pc, #580]	; (8006fe8 <_dtoa_r+0x650>)
 8006da4:	4630      	mov	r0, r6
 8006da6:	4639      	mov	r1, r7
 8006da8:	f7f9 fc46 	bl	8000638 <__aeabi_dmul>
 8006dac:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006db0:	3501      	adds	r5, #1
 8006db2:	f8cd 9030 	str.w	r9, [sp, #48]	; 0x30
 8006db6:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8006dba:	4628      	mov	r0, r5
 8006dbc:	f7f9 fbd2 	bl	8000564 <__aeabi_i2d>
 8006dc0:	4632      	mov	r2, r6
 8006dc2:	463b      	mov	r3, r7
 8006dc4:	f7f9 fc38 	bl	8000638 <__aeabi_dmul>
 8006dc8:	4b88      	ldr	r3, [pc, #544]	; (8006fec <_dtoa_r+0x654>)
 8006dca:	2200      	movs	r2, #0
 8006dcc:	f7f9 fa7e 	bl	80002cc <__adddf3>
 8006dd0:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 8006dd4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006dd8:	9303      	str	r3, [sp, #12]
 8006dda:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8006ddc:	2b00      	cmp	r3, #0
 8006dde:	d15c      	bne.n	8006e9a <_dtoa_r+0x502>
 8006de0:	4b83      	ldr	r3, [pc, #524]	; (8006ff0 <_dtoa_r+0x658>)
 8006de2:	2200      	movs	r2, #0
 8006de4:	4630      	mov	r0, r6
 8006de6:	4639      	mov	r1, r7
 8006de8:	f7f9 fa6e 	bl	80002c8 <__aeabi_dsub>
 8006dec:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8006df0:	4606      	mov	r6, r0
 8006df2:	460f      	mov	r7, r1
 8006df4:	f7f9 feb0 	bl	8000b58 <__aeabi_dcmpgt>
 8006df8:	2800      	cmp	r0, #0
 8006dfa:	f040 8296 	bne.w	800732a <_dtoa_r+0x992>
 8006dfe:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 8006e02:	4630      	mov	r0, r6
 8006e04:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8006e08:	4639      	mov	r1, r7
 8006e0a:	f7f9 fe87 	bl	8000b1c <__aeabi_dcmplt>
 8006e0e:	2800      	cmp	r0, #0
 8006e10:	f040 8288 	bne.w	8007324 <_dtoa_r+0x98c>
 8006e14:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8006e18:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8006e1c:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8006e1e:	2b00      	cmp	r3, #0
 8006e20:	f2c0 8158 	blt.w	80070d4 <_dtoa_r+0x73c>
 8006e24:	f1ba 0f0e 	cmp.w	sl, #14
 8006e28:	f300 8154 	bgt.w	80070d4 <_dtoa_r+0x73c>
 8006e2c:	4b6b      	ldr	r3, [pc, #428]	; (8006fdc <_dtoa_r+0x644>)
 8006e2e:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8006e32:	e9d3 8900 	ldrd	r8, r9, [r3]
 8006e36:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006e38:	2b00      	cmp	r3, #0
 8006e3a:	f280 80e3 	bge.w	8007004 <_dtoa_r+0x66c>
 8006e3e:	9b01      	ldr	r3, [sp, #4]
 8006e40:	2b00      	cmp	r3, #0
 8006e42:	f300 80df 	bgt.w	8007004 <_dtoa_r+0x66c>
 8006e46:	f040 826d 	bne.w	8007324 <_dtoa_r+0x98c>
 8006e4a:	4b69      	ldr	r3, [pc, #420]	; (8006ff0 <_dtoa_r+0x658>)
 8006e4c:	2200      	movs	r2, #0
 8006e4e:	4640      	mov	r0, r8
 8006e50:	4649      	mov	r1, r9
 8006e52:	f7f9 fbf1 	bl	8000638 <__aeabi_dmul>
 8006e56:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8006e5a:	f7f9 fe73 	bl	8000b44 <__aeabi_dcmpge>
 8006e5e:	9e01      	ldr	r6, [sp, #4]
 8006e60:	4637      	mov	r7, r6
 8006e62:	2800      	cmp	r0, #0
 8006e64:	f040 8243 	bne.w	80072ee <_dtoa_r+0x956>
 8006e68:	9d00      	ldr	r5, [sp, #0]
 8006e6a:	2331      	movs	r3, #49	; 0x31
 8006e6c:	f805 3b01 	strb.w	r3, [r5], #1
 8006e70:	f10a 0a01 	add.w	sl, sl, #1
 8006e74:	e23f      	b.n	80072f6 <_dtoa_r+0x95e>
 8006e76:	07f2      	lsls	r2, r6, #31
 8006e78:	d505      	bpl.n	8006e86 <_dtoa_r+0x4ee>
 8006e7a:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006e7e:	f7f9 fbdb 	bl	8000638 <__aeabi_dmul>
 8006e82:	3501      	adds	r5, #1
 8006e84:	2301      	movs	r3, #1
 8006e86:	1076      	asrs	r6, r6, #1
 8006e88:	3708      	adds	r7, #8
 8006e8a:	e76c      	b.n	8006d66 <_dtoa_r+0x3ce>
 8006e8c:	2502      	movs	r5, #2
 8006e8e:	e76f      	b.n	8006d70 <_dtoa_r+0x3d8>
 8006e90:	9b01      	ldr	r3, [sp, #4]
 8006e92:	f8cd a01c 	str.w	sl, [sp, #28]
 8006e96:	930c      	str	r3, [sp, #48]	; 0x30
 8006e98:	e78d      	b.n	8006db6 <_dtoa_r+0x41e>
 8006e9a:	9900      	ldr	r1, [sp, #0]
 8006e9c:	980c      	ldr	r0, [sp, #48]	; 0x30
 8006e9e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8006ea0:	4b4e      	ldr	r3, [pc, #312]	; (8006fdc <_dtoa_r+0x644>)
 8006ea2:	ed9d 7b02 	vldr	d7, [sp, #8]
 8006ea6:	4401      	add	r1, r0
 8006ea8:	9102      	str	r1, [sp, #8]
 8006eaa:	9908      	ldr	r1, [sp, #32]
 8006eac:	eeb0 8a47 	vmov.f32	s16, s14
 8006eb0:	eef0 8a67 	vmov.f32	s17, s15
 8006eb4:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8006eb8:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8006ebc:	2900      	cmp	r1, #0
 8006ebe:	d045      	beq.n	8006f4c <_dtoa_r+0x5b4>
 8006ec0:	494c      	ldr	r1, [pc, #304]	; (8006ff4 <_dtoa_r+0x65c>)
 8006ec2:	2000      	movs	r0, #0
 8006ec4:	f7f9 fce2 	bl	800088c <__aeabi_ddiv>
 8006ec8:	ec53 2b18 	vmov	r2, r3, d8
 8006ecc:	f7f9 f9fc 	bl	80002c8 <__aeabi_dsub>
 8006ed0:	9d00      	ldr	r5, [sp, #0]
 8006ed2:	ec41 0b18 	vmov	d8, r0, r1
 8006ed6:	4639      	mov	r1, r7
 8006ed8:	4630      	mov	r0, r6
 8006eda:	f7f9 fe5d 	bl	8000b98 <__aeabi_d2iz>
 8006ede:	900c      	str	r0, [sp, #48]	; 0x30
 8006ee0:	f7f9 fb40 	bl	8000564 <__aeabi_i2d>
 8006ee4:	4602      	mov	r2, r0
 8006ee6:	460b      	mov	r3, r1
 8006ee8:	4630      	mov	r0, r6
 8006eea:	4639      	mov	r1, r7
 8006eec:	f7f9 f9ec 	bl	80002c8 <__aeabi_dsub>
 8006ef0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8006ef2:	3330      	adds	r3, #48	; 0x30
 8006ef4:	f805 3b01 	strb.w	r3, [r5], #1
 8006ef8:	ec53 2b18 	vmov	r2, r3, d8
 8006efc:	4606      	mov	r6, r0
 8006efe:	460f      	mov	r7, r1
 8006f00:	f7f9 fe0c 	bl	8000b1c <__aeabi_dcmplt>
 8006f04:	2800      	cmp	r0, #0
 8006f06:	d165      	bne.n	8006fd4 <_dtoa_r+0x63c>
 8006f08:	4632      	mov	r2, r6
 8006f0a:	463b      	mov	r3, r7
 8006f0c:	4935      	ldr	r1, [pc, #212]	; (8006fe4 <_dtoa_r+0x64c>)
 8006f0e:	2000      	movs	r0, #0
 8006f10:	f7f9 f9da 	bl	80002c8 <__aeabi_dsub>
 8006f14:	ec53 2b18 	vmov	r2, r3, d8
 8006f18:	f7f9 fe00 	bl	8000b1c <__aeabi_dcmplt>
 8006f1c:	2800      	cmp	r0, #0
 8006f1e:	f040 80b9 	bne.w	8007094 <_dtoa_r+0x6fc>
 8006f22:	9b02      	ldr	r3, [sp, #8]
 8006f24:	429d      	cmp	r5, r3
 8006f26:	f43f af75 	beq.w	8006e14 <_dtoa_r+0x47c>
 8006f2a:	4b2f      	ldr	r3, [pc, #188]	; (8006fe8 <_dtoa_r+0x650>)
 8006f2c:	ec51 0b18 	vmov	r0, r1, d8
 8006f30:	2200      	movs	r2, #0
 8006f32:	f7f9 fb81 	bl	8000638 <__aeabi_dmul>
 8006f36:	4b2c      	ldr	r3, [pc, #176]	; (8006fe8 <_dtoa_r+0x650>)
 8006f38:	ec41 0b18 	vmov	d8, r0, r1
 8006f3c:	2200      	movs	r2, #0
 8006f3e:	4630      	mov	r0, r6
 8006f40:	4639      	mov	r1, r7
 8006f42:	f7f9 fb79 	bl	8000638 <__aeabi_dmul>
 8006f46:	4606      	mov	r6, r0
 8006f48:	460f      	mov	r7, r1
 8006f4a:	e7c4      	b.n	8006ed6 <_dtoa_r+0x53e>
 8006f4c:	ec51 0b17 	vmov	r0, r1, d7
 8006f50:	f7f9 fb72 	bl	8000638 <__aeabi_dmul>
 8006f54:	9b02      	ldr	r3, [sp, #8]
 8006f56:	9d00      	ldr	r5, [sp, #0]
 8006f58:	930c      	str	r3, [sp, #48]	; 0x30
 8006f5a:	ec41 0b18 	vmov	d8, r0, r1
 8006f5e:	4639      	mov	r1, r7
 8006f60:	4630      	mov	r0, r6
 8006f62:	f7f9 fe19 	bl	8000b98 <__aeabi_d2iz>
 8006f66:	9011      	str	r0, [sp, #68]	; 0x44
 8006f68:	f7f9 fafc 	bl	8000564 <__aeabi_i2d>
 8006f6c:	4602      	mov	r2, r0
 8006f6e:	460b      	mov	r3, r1
 8006f70:	4630      	mov	r0, r6
 8006f72:	4639      	mov	r1, r7
 8006f74:	f7f9 f9a8 	bl	80002c8 <__aeabi_dsub>
 8006f78:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8006f7a:	3330      	adds	r3, #48	; 0x30
 8006f7c:	f805 3b01 	strb.w	r3, [r5], #1
 8006f80:	9b02      	ldr	r3, [sp, #8]
 8006f82:	429d      	cmp	r5, r3
 8006f84:	4606      	mov	r6, r0
 8006f86:	460f      	mov	r7, r1
 8006f88:	f04f 0200 	mov.w	r2, #0
 8006f8c:	d134      	bne.n	8006ff8 <_dtoa_r+0x660>
 8006f8e:	4b19      	ldr	r3, [pc, #100]	; (8006ff4 <_dtoa_r+0x65c>)
 8006f90:	ec51 0b18 	vmov	r0, r1, d8
 8006f94:	f7f9 f99a 	bl	80002cc <__adddf3>
 8006f98:	4602      	mov	r2, r0
 8006f9a:	460b      	mov	r3, r1
 8006f9c:	4630      	mov	r0, r6
 8006f9e:	4639      	mov	r1, r7
 8006fa0:	f7f9 fdda 	bl	8000b58 <__aeabi_dcmpgt>
 8006fa4:	2800      	cmp	r0, #0
 8006fa6:	d175      	bne.n	8007094 <_dtoa_r+0x6fc>
 8006fa8:	ec53 2b18 	vmov	r2, r3, d8
 8006fac:	4911      	ldr	r1, [pc, #68]	; (8006ff4 <_dtoa_r+0x65c>)
 8006fae:	2000      	movs	r0, #0
 8006fb0:	f7f9 f98a 	bl	80002c8 <__aeabi_dsub>
 8006fb4:	4602      	mov	r2, r0
 8006fb6:	460b      	mov	r3, r1
 8006fb8:	4630      	mov	r0, r6
 8006fba:	4639      	mov	r1, r7
 8006fbc:	f7f9 fdae 	bl	8000b1c <__aeabi_dcmplt>
 8006fc0:	2800      	cmp	r0, #0
 8006fc2:	f43f af27 	beq.w	8006e14 <_dtoa_r+0x47c>
 8006fc6:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8006fc8:	1e6b      	subs	r3, r5, #1
 8006fca:	930c      	str	r3, [sp, #48]	; 0x30
 8006fcc:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8006fd0:	2b30      	cmp	r3, #48	; 0x30
 8006fd2:	d0f8      	beq.n	8006fc6 <_dtoa_r+0x62e>
 8006fd4:	f8dd a01c 	ldr.w	sl, [sp, #28]
 8006fd8:	e04a      	b.n	8007070 <_dtoa_r+0x6d8>
 8006fda:	bf00      	nop
 8006fdc:	08008f00 	.word	0x08008f00
 8006fe0:	08008ed8 	.word	0x08008ed8
 8006fe4:	3ff00000 	.word	0x3ff00000
 8006fe8:	40240000 	.word	0x40240000
 8006fec:	401c0000 	.word	0x401c0000
 8006ff0:	40140000 	.word	0x40140000
 8006ff4:	3fe00000 	.word	0x3fe00000
 8006ff8:	4baf      	ldr	r3, [pc, #700]	; (80072b8 <_dtoa_r+0x920>)
 8006ffa:	f7f9 fb1d 	bl	8000638 <__aeabi_dmul>
 8006ffe:	4606      	mov	r6, r0
 8007000:	460f      	mov	r7, r1
 8007002:	e7ac      	b.n	8006f5e <_dtoa_r+0x5c6>
 8007004:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8007008:	9d00      	ldr	r5, [sp, #0]
 800700a:	4642      	mov	r2, r8
 800700c:	464b      	mov	r3, r9
 800700e:	4630      	mov	r0, r6
 8007010:	4639      	mov	r1, r7
 8007012:	f7f9 fc3b 	bl	800088c <__aeabi_ddiv>
 8007016:	f7f9 fdbf 	bl	8000b98 <__aeabi_d2iz>
 800701a:	9002      	str	r0, [sp, #8]
 800701c:	f7f9 faa2 	bl	8000564 <__aeabi_i2d>
 8007020:	4642      	mov	r2, r8
 8007022:	464b      	mov	r3, r9
 8007024:	f7f9 fb08 	bl	8000638 <__aeabi_dmul>
 8007028:	4602      	mov	r2, r0
 800702a:	460b      	mov	r3, r1
 800702c:	4630      	mov	r0, r6
 800702e:	4639      	mov	r1, r7
 8007030:	f7f9 f94a 	bl	80002c8 <__aeabi_dsub>
 8007034:	9e02      	ldr	r6, [sp, #8]
 8007036:	9f01      	ldr	r7, [sp, #4]
 8007038:	3630      	adds	r6, #48	; 0x30
 800703a:	f805 6b01 	strb.w	r6, [r5], #1
 800703e:	9e00      	ldr	r6, [sp, #0]
 8007040:	1bae      	subs	r6, r5, r6
 8007042:	42b7      	cmp	r7, r6
 8007044:	4602      	mov	r2, r0
 8007046:	460b      	mov	r3, r1
 8007048:	d137      	bne.n	80070ba <_dtoa_r+0x722>
 800704a:	f7f9 f93f 	bl	80002cc <__adddf3>
 800704e:	4642      	mov	r2, r8
 8007050:	464b      	mov	r3, r9
 8007052:	4606      	mov	r6, r0
 8007054:	460f      	mov	r7, r1
 8007056:	f7f9 fd7f 	bl	8000b58 <__aeabi_dcmpgt>
 800705a:	b9c8      	cbnz	r0, 8007090 <_dtoa_r+0x6f8>
 800705c:	4642      	mov	r2, r8
 800705e:	464b      	mov	r3, r9
 8007060:	4630      	mov	r0, r6
 8007062:	4639      	mov	r1, r7
 8007064:	f7f9 fd50 	bl	8000b08 <__aeabi_dcmpeq>
 8007068:	b110      	cbz	r0, 8007070 <_dtoa_r+0x6d8>
 800706a:	9b02      	ldr	r3, [sp, #8]
 800706c:	07d9      	lsls	r1, r3, #31
 800706e:	d40f      	bmi.n	8007090 <_dtoa_r+0x6f8>
 8007070:	4620      	mov	r0, r4
 8007072:	4659      	mov	r1, fp
 8007074:	f000 fad6 	bl	8007624 <_Bfree>
 8007078:	2300      	movs	r3, #0
 800707a:	702b      	strb	r3, [r5, #0]
 800707c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800707e:	f10a 0001 	add.w	r0, sl, #1
 8007082:	6018      	str	r0, [r3, #0]
 8007084:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8007086:	2b00      	cmp	r3, #0
 8007088:	f43f acd8 	beq.w	8006a3c <_dtoa_r+0xa4>
 800708c:	601d      	str	r5, [r3, #0]
 800708e:	e4d5      	b.n	8006a3c <_dtoa_r+0xa4>
 8007090:	f8cd a01c 	str.w	sl, [sp, #28]
 8007094:	462b      	mov	r3, r5
 8007096:	461d      	mov	r5, r3
 8007098:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800709c:	2a39      	cmp	r2, #57	; 0x39
 800709e:	d108      	bne.n	80070b2 <_dtoa_r+0x71a>
 80070a0:	9a00      	ldr	r2, [sp, #0]
 80070a2:	429a      	cmp	r2, r3
 80070a4:	d1f7      	bne.n	8007096 <_dtoa_r+0x6fe>
 80070a6:	9a07      	ldr	r2, [sp, #28]
 80070a8:	9900      	ldr	r1, [sp, #0]
 80070aa:	3201      	adds	r2, #1
 80070ac:	9207      	str	r2, [sp, #28]
 80070ae:	2230      	movs	r2, #48	; 0x30
 80070b0:	700a      	strb	r2, [r1, #0]
 80070b2:	781a      	ldrb	r2, [r3, #0]
 80070b4:	3201      	adds	r2, #1
 80070b6:	701a      	strb	r2, [r3, #0]
 80070b8:	e78c      	b.n	8006fd4 <_dtoa_r+0x63c>
 80070ba:	4b7f      	ldr	r3, [pc, #508]	; (80072b8 <_dtoa_r+0x920>)
 80070bc:	2200      	movs	r2, #0
 80070be:	f7f9 fabb 	bl	8000638 <__aeabi_dmul>
 80070c2:	2200      	movs	r2, #0
 80070c4:	2300      	movs	r3, #0
 80070c6:	4606      	mov	r6, r0
 80070c8:	460f      	mov	r7, r1
 80070ca:	f7f9 fd1d 	bl	8000b08 <__aeabi_dcmpeq>
 80070ce:	2800      	cmp	r0, #0
 80070d0:	d09b      	beq.n	800700a <_dtoa_r+0x672>
 80070d2:	e7cd      	b.n	8007070 <_dtoa_r+0x6d8>
 80070d4:	9a08      	ldr	r2, [sp, #32]
 80070d6:	2a00      	cmp	r2, #0
 80070d8:	f000 80c4 	beq.w	8007264 <_dtoa_r+0x8cc>
 80070dc:	9a05      	ldr	r2, [sp, #20]
 80070de:	2a01      	cmp	r2, #1
 80070e0:	f300 80a8 	bgt.w	8007234 <_dtoa_r+0x89c>
 80070e4:	9a10      	ldr	r2, [sp, #64]	; 0x40
 80070e6:	2a00      	cmp	r2, #0
 80070e8:	f000 80a0 	beq.w	800722c <_dtoa_r+0x894>
 80070ec:	f203 4333 	addw	r3, r3, #1075	; 0x433
 80070f0:	9e06      	ldr	r6, [sp, #24]
 80070f2:	4645      	mov	r5, r8
 80070f4:	9a04      	ldr	r2, [sp, #16]
 80070f6:	2101      	movs	r1, #1
 80070f8:	441a      	add	r2, r3
 80070fa:	4620      	mov	r0, r4
 80070fc:	4498      	add	r8, r3
 80070fe:	9204      	str	r2, [sp, #16]
 8007100:	f000 fb4c 	bl	800779c <__i2b>
 8007104:	4607      	mov	r7, r0
 8007106:	2d00      	cmp	r5, #0
 8007108:	dd0b      	ble.n	8007122 <_dtoa_r+0x78a>
 800710a:	9b04      	ldr	r3, [sp, #16]
 800710c:	2b00      	cmp	r3, #0
 800710e:	dd08      	ble.n	8007122 <_dtoa_r+0x78a>
 8007110:	42ab      	cmp	r3, r5
 8007112:	9a04      	ldr	r2, [sp, #16]
 8007114:	bfa8      	it	ge
 8007116:	462b      	movge	r3, r5
 8007118:	eba8 0803 	sub.w	r8, r8, r3
 800711c:	1aed      	subs	r5, r5, r3
 800711e:	1ad3      	subs	r3, r2, r3
 8007120:	9304      	str	r3, [sp, #16]
 8007122:	9b06      	ldr	r3, [sp, #24]
 8007124:	b1fb      	cbz	r3, 8007166 <_dtoa_r+0x7ce>
 8007126:	9b08      	ldr	r3, [sp, #32]
 8007128:	2b00      	cmp	r3, #0
 800712a:	f000 809f 	beq.w	800726c <_dtoa_r+0x8d4>
 800712e:	2e00      	cmp	r6, #0
 8007130:	dd11      	ble.n	8007156 <_dtoa_r+0x7be>
 8007132:	4639      	mov	r1, r7
 8007134:	4632      	mov	r2, r6
 8007136:	4620      	mov	r0, r4
 8007138:	f000 fbec 	bl	8007914 <__pow5mult>
 800713c:	465a      	mov	r2, fp
 800713e:	4601      	mov	r1, r0
 8007140:	4607      	mov	r7, r0
 8007142:	4620      	mov	r0, r4
 8007144:	f000 fb40 	bl	80077c8 <__multiply>
 8007148:	4659      	mov	r1, fp
 800714a:	9007      	str	r0, [sp, #28]
 800714c:	4620      	mov	r0, r4
 800714e:	f000 fa69 	bl	8007624 <_Bfree>
 8007152:	9b07      	ldr	r3, [sp, #28]
 8007154:	469b      	mov	fp, r3
 8007156:	9b06      	ldr	r3, [sp, #24]
 8007158:	1b9a      	subs	r2, r3, r6
 800715a:	d004      	beq.n	8007166 <_dtoa_r+0x7ce>
 800715c:	4659      	mov	r1, fp
 800715e:	4620      	mov	r0, r4
 8007160:	f000 fbd8 	bl	8007914 <__pow5mult>
 8007164:	4683      	mov	fp, r0
 8007166:	2101      	movs	r1, #1
 8007168:	4620      	mov	r0, r4
 800716a:	f000 fb17 	bl	800779c <__i2b>
 800716e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8007170:	2b00      	cmp	r3, #0
 8007172:	4606      	mov	r6, r0
 8007174:	dd7c      	ble.n	8007270 <_dtoa_r+0x8d8>
 8007176:	461a      	mov	r2, r3
 8007178:	4601      	mov	r1, r0
 800717a:	4620      	mov	r0, r4
 800717c:	f000 fbca 	bl	8007914 <__pow5mult>
 8007180:	9b05      	ldr	r3, [sp, #20]
 8007182:	2b01      	cmp	r3, #1
 8007184:	4606      	mov	r6, r0
 8007186:	dd76      	ble.n	8007276 <_dtoa_r+0x8de>
 8007188:	2300      	movs	r3, #0
 800718a:	9306      	str	r3, [sp, #24]
 800718c:	6933      	ldr	r3, [r6, #16]
 800718e:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8007192:	6918      	ldr	r0, [r3, #16]
 8007194:	f000 fab2 	bl	80076fc <__hi0bits>
 8007198:	f1c0 0020 	rsb	r0, r0, #32
 800719c:	9b04      	ldr	r3, [sp, #16]
 800719e:	4418      	add	r0, r3
 80071a0:	f010 001f 	ands.w	r0, r0, #31
 80071a4:	f000 8086 	beq.w	80072b4 <_dtoa_r+0x91c>
 80071a8:	f1c0 0320 	rsb	r3, r0, #32
 80071ac:	2b04      	cmp	r3, #4
 80071ae:	dd7f      	ble.n	80072b0 <_dtoa_r+0x918>
 80071b0:	f1c0 001c 	rsb	r0, r0, #28
 80071b4:	9b04      	ldr	r3, [sp, #16]
 80071b6:	4403      	add	r3, r0
 80071b8:	4480      	add	r8, r0
 80071ba:	4405      	add	r5, r0
 80071bc:	9304      	str	r3, [sp, #16]
 80071be:	f1b8 0f00 	cmp.w	r8, #0
 80071c2:	dd05      	ble.n	80071d0 <_dtoa_r+0x838>
 80071c4:	4659      	mov	r1, fp
 80071c6:	4642      	mov	r2, r8
 80071c8:	4620      	mov	r0, r4
 80071ca:	f000 fbfd 	bl	80079c8 <__lshift>
 80071ce:	4683      	mov	fp, r0
 80071d0:	9b04      	ldr	r3, [sp, #16]
 80071d2:	2b00      	cmp	r3, #0
 80071d4:	dd05      	ble.n	80071e2 <_dtoa_r+0x84a>
 80071d6:	4631      	mov	r1, r6
 80071d8:	461a      	mov	r2, r3
 80071da:	4620      	mov	r0, r4
 80071dc:	f000 fbf4 	bl	80079c8 <__lshift>
 80071e0:	4606      	mov	r6, r0
 80071e2:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80071e4:	2b00      	cmp	r3, #0
 80071e6:	d069      	beq.n	80072bc <_dtoa_r+0x924>
 80071e8:	4631      	mov	r1, r6
 80071ea:	4658      	mov	r0, fp
 80071ec:	f000 fc58 	bl	8007aa0 <__mcmp>
 80071f0:	2800      	cmp	r0, #0
 80071f2:	da63      	bge.n	80072bc <_dtoa_r+0x924>
 80071f4:	2300      	movs	r3, #0
 80071f6:	4659      	mov	r1, fp
 80071f8:	220a      	movs	r2, #10
 80071fa:	4620      	mov	r0, r4
 80071fc:	f000 fa34 	bl	8007668 <__multadd>
 8007200:	9b08      	ldr	r3, [sp, #32]
 8007202:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 8007206:	4683      	mov	fp, r0
 8007208:	2b00      	cmp	r3, #0
 800720a:	f000 818f 	beq.w	800752c <_dtoa_r+0xb94>
 800720e:	4639      	mov	r1, r7
 8007210:	2300      	movs	r3, #0
 8007212:	220a      	movs	r2, #10
 8007214:	4620      	mov	r0, r4
 8007216:	f000 fa27 	bl	8007668 <__multadd>
 800721a:	f1b9 0f00 	cmp.w	r9, #0
 800721e:	4607      	mov	r7, r0
 8007220:	f300 808e 	bgt.w	8007340 <_dtoa_r+0x9a8>
 8007224:	9b05      	ldr	r3, [sp, #20]
 8007226:	2b02      	cmp	r3, #2
 8007228:	dc50      	bgt.n	80072cc <_dtoa_r+0x934>
 800722a:	e089      	b.n	8007340 <_dtoa_r+0x9a8>
 800722c:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800722e:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8007232:	e75d      	b.n	80070f0 <_dtoa_r+0x758>
 8007234:	9b01      	ldr	r3, [sp, #4]
 8007236:	1e5e      	subs	r6, r3, #1
 8007238:	9b06      	ldr	r3, [sp, #24]
 800723a:	42b3      	cmp	r3, r6
 800723c:	bfbf      	itttt	lt
 800723e:	9b06      	ldrlt	r3, [sp, #24]
 8007240:	9606      	strlt	r6, [sp, #24]
 8007242:	1af2      	sublt	r2, r6, r3
 8007244:	9b0d      	ldrlt	r3, [sp, #52]	; 0x34
 8007246:	bfb6      	itet	lt
 8007248:	189b      	addlt	r3, r3, r2
 800724a:	1b9e      	subge	r6, r3, r6
 800724c:	930d      	strlt	r3, [sp, #52]	; 0x34
 800724e:	9b01      	ldr	r3, [sp, #4]
 8007250:	bfb8      	it	lt
 8007252:	2600      	movlt	r6, #0
 8007254:	2b00      	cmp	r3, #0
 8007256:	bfb5      	itete	lt
 8007258:	eba8 0503 	sublt.w	r5, r8, r3
 800725c:	9b01      	ldrge	r3, [sp, #4]
 800725e:	2300      	movlt	r3, #0
 8007260:	4645      	movge	r5, r8
 8007262:	e747      	b.n	80070f4 <_dtoa_r+0x75c>
 8007264:	9e06      	ldr	r6, [sp, #24]
 8007266:	9f08      	ldr	r7, [sp, #32]
 8007268:	4645      	mov	r5, r8
 800726a:	e74c      	b.n	8007106 <_dtoa_r+0x76e>
 800726c:	9a06      	ldr	r2, [sp, #24]
 800726e:	e775      	b.n	800715c <_dtoa_r+0x7c4>
 8007270:	9b05      	ldr	r3, [sp, #20]
 8007272:	2b01      	cmp	r3, #1
 8007274:	dc18      	bgt.n	80072a8 <_dtoa_r+0x910>
 8007276:	9b02      	ldr	r3, [sp, #8]
 8007278:	b9b3      	cbnz	r3, 80072a8 <_dtoa_r+0x910>
 800727a:	9b03      	ldr	r3, [sp, #12]
 800727c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8007280:	b9a3      	cbnz	r3, 80072ac <_dtoa_r+0x914>
 8007282:	9b03      	ldr	r3, [sp, #12]
 8007284:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8007288:	0d1b      	lsrs	r3, r3, #20
 800728a:	051b      	lsls	r3, r3, #20
 800728c:	b12b      	cbz	r3, 800729a <_dtoa_r+0x902>
 800728e:	9b04      	ldr	r3, [sp, #16]
 8007290:	3301      	adds	r3, #1
 8007292:	9304      	str	r3, [sp, #16]
 8007294:	f108 0801 	add.w	r8, r8, #1
 8007298:	2301      	movs	r3, #1
 800729a:	9306      	str	r3, [sp, #24]
 800729c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800729e:	2b00      	cmp	r3, #0
 80072a0:	f47f af74 	bne.w	800718c <_dtoa_r+0x7f4>
 80072a4:	2001      	movs	r0, #1
 80072a6:	e779      	b.n	800719c <_dtoa_r+0x804>
 80072a8:	2300      	movs	r3, #0
 80072aa:	e7f6      	b.n	800729a <_dtoa_r+0x902>
 80072ac:	9b02      	ldr	r3, [sp, #8]
 80072ae:	e7f4      	b.n	800729a <_dtoa_r+0x902>
 80072b0:	d085      	beq.n	80071be <_dtoa_r+0x826>
 80072b2:	4618      	mov	r0, r3
 80072b4:	301c      	adds	r0, #28
 80072b6:	e77d      	b.n	80071b4 <_dtoa_r+0x81c>
 80072b8:	40240000 	.word	0x40240000
 80072bc:	9b01      	ldr	r3, [sp, #4]
 80072be:	2b00      	cmp	r3, #0
 80072c0:	dc38      	bgt.n	8007334 <_dtoa_r+0x99c>
 80072c2:	9b05      	ldr	r3, [sp, #20]
 80072c4:	2b02      	cmp	r3, #2
 80072c6:	dd35      	ble.n	8007334 <_dtoa_r+0x99c>
 80072c8:	f8dd 9004 	ldr.w	r9, [sp, #4]
 80072cc:	f1b9 0f00 	cmp.w	r9, #0
 80072d0:	d10d      	bne.n	80072ee <_dtoa_r+0x956>
 80072d2:	4631      	mov	r1, r6
 80072d4:	464b      	mov	r3, r9
 80072d6:	2205      	movs	r2, #5
 80072d8:	4620      	mov	r0, r4
 80072da:	f000 f9c5 	bl	8007668 <__multadd>
 80072de:	4601      	mov	r1, r0
 80072e0:	4606      	mov	r6, r0
 80072e2:	4658      	mov	r0, fp
 80072e4:	f000 fbdc 	bl	8007aa0 <__mcmp>
 80072e8:	2800      	cmp	r0, #0
 80072ea:	f73f adbd 	bgt.w	8006e68 <_dtoa_r+0x4d0>
 80072ee:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80072f0:	9d00      	ldr	r5, [sp, #0]
 80072f2:	ea6f 0a03 	mvn.w	sl, r3
 80072f6:	f04f 0800 	mov.w	r8, #0
 80072fa:	4631      	mov	r1, r6
 80072fc:	4620      	mov	r0, r4
 80072fe:	f000 f991 	bl	8007624 <_Bfree>
 8007302:	2f00      	cmp	r7, #0
 8007304:	f43f aeb4 	beq.w	8007070 <_dtoa_r+0x6d8>
 8007308:	f1b8 0f00 	cmp.w	r8, #0
 800730c:	d005      	beq.n	800731a <_dtoa_r+0x982>
 800730e:	45b8      	cmp	r8, r7
 8007310:	d003      	beq.n	800731a <_dtoa_r+0x982>
 8007312:	4641      	mov	r1, r8
 8007314:	4620      	mov	r0, r4
 8007316:	f000 f985 	bl	8007624 <_Bfree>
 800731a:	4639      	mov	r1, r7
 800731c:	4620      	mov	r0, r4
 800731e:	f000 f981 	bl	8007624 <_Bfree>
 8007322:	e6a5      	b.n	8007070 <_dtoa_r+0x6d8>
 8007324:	2600      	movs	r6, #0
 8007326:	4637      	mov	r7, r6
 8007328:	e7e1      	b.n	80072ee <_dtoa_r+0x956>
 800732a:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 800732c:	f8dd a01c 	ldr.w	sl, [sp, #28]
 8007330:	4637      	mov	r7, r6
 8007332:	e599      	b.n	8006e68 <_dtoa_r+0x4d0>
 8007334:	9b08      	ldr	r3, [sp, #32]
 8007336:	f8dd 9004 	ldr.w	r9, [sp, #4]
 800733a:	2b00      	cmp	r3, #0
 800733c:	f000 80fd 	beq.w	800753a <_dtoa_r+0xba2>
 8007340:	2d00      	cmp	r5, #0
 8007342:	dd05      	ble.n	8007350 <_dtoa_r+0x9b8>
 8007344:	4639      	mov	r1, r7
 8007346:	462a      	mov	r2, r5
 8007348:	4620      	mov	r0, r4
 800734a:	f000 fb3d 	bl	80079c8 <__lshift>
 800734e:	4607      	mov	r7, r0
 8007350:	9b06      	ldr	r3, [sp, #24]
 8007352:	2b00      	cmp	r3, #0
 8007354:	d05c      	beq.n	8007410 <_dtoa_r+0xa78>
 8007356:	6879      	ldr	r1, [r7, #4]
 8007358:	4620      	mov	r0, r4
 800735a:	f000 f923 	bl	80075a4 <_Balloc>
 800735e:	4605      	mov	r5, r0
 8007360:	b928      	cbnz	r0, 800736e <_dtoa_r+0x9d6>
 8007362:	4b80      	ldr	r3, [pc, #512]	; (8007564 <_dtoa_r+0xbcc>)
 8007364:	4602      	mov	r2, r0
 8007366:	f240 21ea 	movw	r1, #746	; 0x2ea
 800736a:	f7ff bb2e 	b.w	80069ca <_dtoa_r+0x32>
 800736e:	693a      	ldr	r2, [r7, #16]
 8007370:	3202      	adds	r2, #2
 8007372:	0092      	lsls	r2, r2, #2
 8007374:	f107 010c 	add.w	r1, r7, #12
 8007378:	300c      	adds	r0, #12
 800737a:	f000 f905 	bl	8007588 <memcpy>
 800737e:	2201      	movs	r2, #1
 8007380:	4629      	mov	r1, r5
 8007382:	4620      	mov	r0, r4
 8007384:	f000 fb20 	bl	80079c8 <__lshift>
 8007388:	9b00      	ldr	r3, [sp, #0]
 800738a:	3301      	adds	r3, #1
 800738c:	9301      	str	r3, [sp, #4]
 800738e:	9b00      	ldr	r3, [sp, #0]
 8007390:	444b      	add	r3, r9
 8007392:	9307      	str	r3, [sp, #28]
 8007394:	9b02      	ldr	r3, [sp, #8]
 8007396:	f003 0301 	and.w	r3, r3, #1
 800739a:	46b8      	mov	r8, r7
 800739c:	9306      	str	r3, [sp, #24]
 800739e:	4607      	mov	r7, r0
 80073a0:	9b01      	ldr	r3, [sp, #4]
 80073a2:	4631      	mov	r1, r6
 80073a4:	3b01      	subs	r3, #1
 80073a6:	4658      	mov	r0, fp
 80073a8:	9302      	str	r3, [sp, #8]
 80073aa:	f7ff fa67 	bl	800687c <quorem>
 80073ae:	4603      	mov	r3, r0
 80073b0:	3330      	adds	r3, #48	; 0x30
 80073b2:	9004      	str	r0, [sp, #16]
 80073b4:	4641      	mov	r1, r8
 80073b6:	4658      	mov	r0, fp
 80073b8:	9308      	str	r3, [sp, #32]
 80073ba:	f000 fb71 	bl	8007aa0 <__mcmp>
 80073be:	463a      	mov	r2, r7
 80073c0:	4681      	mov	r9, r0
 80073c2:	4631      	mov	r1, r6
 80073c4:	4620      	mov	r0, r4
 80073c6:	f000 fb87 	bl	8007ad8 <__mdiff>
 80073ca:	68c2      	ldr	r2, [r0, #12]
 80073cc:	9b08      	ldr	r3, [sp, #32]
 80073ce:	4605      	mov	r5, r0
 80073d0:	bb02      	cbnz	r2, 8007414 <_dtoa_r+0xa7c>
 80073d2:	4601      	mov	r1, r0
 80073d4:	4658      	mov	r0, fp
 80073d6:	f000 fb63 	bl	8007aa0 <__mcmp>
 80073da:	9b08      	ldr	r3, [sp, #32]
 80073dc:	4602      	mov	r2, r0
 80073de:	4629      	mov	r1, r5
 80073e0:	4620      	mov	r0, r4
 80073e2:	e9cd 3208 	strd	r3, r2, [sp, #32]
 80073e6:	f000 f91d 	bl	8007624 <_Bfree>
 80073ea:	9b05      	ldr	r3, [sp, #20]
 80073ec:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80073ee:	9d01      	ldr	r5, [sp, #4]
 80073f0:	ea43 0102 	orr.w	r1, r3, r2
 80073f4:	9b06      	ldr	r3, [sp, #24]
 80073f6:	430b      	orrs	r3, r1
 80073f8:	9b08      	ldr	r3, [sp, #32]
 80073fa:	d10d      	bne.n	8007418 <_dtoa_r+0xa80>
 80073fc:	2b39      	cmp	r3, #57	; 0x39
 80073fe:	d029      	beq.n	8007454 <_dtoa_r+0xabc>
 8007400:	f1b9 0f00 	cmp.w	r9, #0
 8007404:	dd01      	ble.n	800740a <_dtoa_r+0xa72>
 8007406:	9b04      	ldr	r3, [sp, #16]
 8007408:	3331      	adds	r3, #49	; 0x31
 800740a:	9a02      	ldr	r2, [sp, #8]
 800740c:	7013      	strb	r3, [r2, #0]
 800740e:	e774      	b.n	80072fa <_dtoa_r+0x962>
 8007410:	4638      	mov	r0, r7
 8007412:	e7b9      	b.n	8007388 <_dtoa_r+0x9f0>
 8007414:	2201      	movs	r2, #1
 8007416:	e7e2      	b.n	80073de <_dtoa_r+0xa46>
 8007418:	f1b9 0f00 	cmp.w	r9, #0
 800741c:	db06      	blt.n	800742c <_dtoa_r+0xa94>
 800741e:	9905      	ldr	r1, [sp, #20]
 8007420:	ea41 0909 	orr.w	r9, r1, r9
 8007424:	9906      	ldr	r1, [sp, #24]
 8007426:	ea59 0101 	orrs.w	r1, r9, r1
 800742a:	d120      	bne.n	800746e <_dtoa_r+0xad6>
 800742c:	2a00      	cmp	r2, #0
 800742e:	ddec      	ble.n	800740a <_dtoa_r+0xa72>
 8007430:	4659      	mov	r1, fp
 8007432:	2201      	movs	r2, #1
 8007434:	4620      	mov	r0, r4
 8007436:	9301      	str	r3, [sp, #4]
 8007438:	f000 fac6 	bl	80079c8 <__lshift>
 800743c:	4631      	mov	r1, r6
 800743e:	4683      	mov	fp, r0
 8007440:	f000 fb2e 	bl	8007aa0 <__mcmp>
 8007444:	2800      	cmp	r0, #0
 8007446:	9b01      	ldr	r3, [sp, #4]
 8007448:	dc02      	bgt.n	8007450 <_dtoa_r+0xab8>
 800744a:	d1de      	bne.n	800740a <_dtoa_r+0xa72>
 800744c:	07da      	lsls	r2, r3, #31
 800744e:	d5dc      	bpl.n	800740a <_dtoa_r+0xa72>
 8007450:	2b39      	cmp	r3, #57	; 0x39
 8007452:	d1d8      	bne.n	8007406 <_dtoa_r+0xa6e>
 8007454:	9a02      	ldr	r2, [sp, #8]
 8007456:	2339      	movs	r3, #57	; 0x39
 8007458:	7013      	strb	r3, [r2, #0]
 800745a:	462b      	mov	r3, r5
 800745c:	461d      	mov	r5, r3
 800745e:	3b01      	subs	r3, #1
 8007460:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 8007464:	2a39      	cmp	r2, #57	; 0x39
 8007466:	d050      	beq.n	800750a <_dtoa_r+0xb72>
 8007468:	3201      	adds	r2, #1
 800746a:	701a      	strb	r2, [r3, #0]
 800746c:	e745      	b.n	80072fa <_dtoa_r+0x962>
 800746e:	2a00      	cmp	r2, #0
 8007470:	dd03      	ble.n	800747a <_dtoa_r+0xae2>
 8007472:	2b39      	cmp	r3, #57	; 0x39
 8007474:	d0ee      	beq.n	8007454 <_dtoa_r+0xabc>
 8007476:	3301      	adds	r3, #1
 8007478:	e7c7      	b.n	800740a <_dtoa_r+0xa72>
 800747a:	9a01      	ldr	r2, [sp, #4]
 800747c:	9907      	ldr	r1, [sp, #28]
 800747e:	f802 3c01 	strb.w	r3, [r2, #-1]
 8007482:	428a      	cmp	r2, r1
 8007484:	d02a      	beq.n	80074dc <_dtoa_r+0xb44>
 8007486:	4659      	mov	r1, fp
 8007488:	2300      	movs	r3, #0
 800748a:	220a      	movs	r2, #10
 800748c:	4620      	mov	r0, r4
 800748e:	f000 f8eb 	bl	8007668 <__multadd>
 8007492:	45b8      	cmp	r8, r7
 8007494:	4683      	mov	fp, r0
 8007496:	f04f 0300 	mov.w	r3, #0
 800749a:	f04f 020a 	mov.w	r2, #10
 800749e:	4641      	mov	r1, r8
 80074a0:	4620      	mov	r0, r4
 80074a2:	d107      	bne.n	80074b4 <_dtoa_r+0xb1c>
 80074a4:	f000 f8e0 	bl	8007668 <__multadd>
 80074a8:	4680      	mov	r8, r0
 80074aa:	4607      	mov	r7, r0
 80074ac:	9b01      	ldr	r3, [sp, #4]
 80074ae:	3301      	adds	r3, #1
 80074b0:	9301      	str	r3, [sp, #4]
 80074b2:	e775      	b.n	80073a0 <_dtoa_r+0xa08>
 80074b4:	f000 f8d8 	bl	8007668 <__multadd>
 80074b8:	4639      	mov	r1, r7
 80074ba:	4680      	mov	r8, r0
 80074bc:	2300      	movs	r3, #0
 80074be:	220a      	movs	r2, #10
 80074c0:	4620      	mov	r0, r4
 80074c2:	f000 f8d1 	bl	8007668 <__multadd>
 80074c6:	4607      	mov	r7, r0
 80074c8:	e7f0      	b.n	80074ac <_dtoa_r+0xb14>
 80074ca:	f1b9 0f00 	cmp.w	r9, #0
 80074ce:	9a00      	ldr	r2, [sp, #0]
 80074d0:	bfcc      	ite	gt
 80074d2:	464d      	movgt	r5, r9
 80074d4:	2501      	movle	r5, #1
 80074d6:	4415      	add	r5, r2
 80074d8:	f04f 0800 	mov.w	r8, #0
 80074dc:	4659      	mov	r1, fp
 80074de:	2201      	movs	r2, #1
 80074e0:	4620      	mov	r0, r4
 80074e2:	9301      	str	r3, [sp, #4]
 80074e4:	f000 fa70 	bl	80079c8 <__lshift>
 80074e8:	4631      	mov	r1, r6
 80074ea:	4683      	mov	fp, r0
 80074ec:	f000 fad8 	bl	8007aa0 <__mcmp>
 80074f0:	2800      	cmp	r0, #0
 80074f2:	dcb2      	bgt.n	800745a <_dtoa_r+0xac2>
 80074f4:	d102      	bne.n	80074fc <_dtoa_r+0xb64>
 80074f6:	9b01      	ldr	r3, [sp, #4]
 80074f8:	07db      	lsls	r3, r3, #31
 80074fa:	d4ae      	bmi.n	800745a <_dtoa_r+0xac2>
 80074fc:	462b      	mov	r3, r5
 80074fe:	461d      	mov	r5, r3
 8007500:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8007504:	2a30      	cmp	r2, #48	; 0x30
 8007506:	d0fa      	beq.n	80074fe <_dtoa_r+0xb66>
 8007508:	e6f7      	b.n	80072fa <_dtoa_r+0x962>
 800750a:	9a00      	ldr	r2, [sp, #0]
 800750c:	429a      	cmp	r2, r3
 800750e:	d1a5      	bne.n	800745c <_dtoa_r+0xac4>
 8007510:	f10a 0a01 	add.w	sl, sl, #1
 8007514:	2331      	movs	r3, #49	; 0x31
 8007516:	e779      	b.n	800740c <_dtoa_r+0xa74>
 8007518:	4b13      	ldr	r3, [pc, #76]	; (8007568 <_dtoa_r+0xbd0>)
 800751a:	f7ff baaf 	b.w	8006a7c <_dtoa_r+0xe4>
 800751e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8007520:	2b00      	cmp	r3, #0
 8007522:	f47f aa86 	bne.w	8006a32 <_dtoa_r+0x9a>
 8007526:	4b11      	ldr	r3, [pc, #68]	; (800756c <_dtoa_r+0xbd4>)
 8007528:	f7ff baa8 	b.w	8006a7c <_dtoa_r+0xe4>
 800752c:	f1b9 0f00 	cmp.w	r9, #0
 8007530:	dc03      	bgt.n	800753a <_dtoa_r+0xba2>
 8007532:	9b05      	ldr	r3, [sp, #20]
 8007534:	2b02      	cmp	r3, #2
 8007536:	f73f aec9 	bgt.w	80072cc <_dtoa_r+0x934>
 800753a:	9d00      	ldr	r5, [sp, #0]
 800753c:	4631      	mov	r1, r6
 800753e:	4658      	mov	r0, fp
 8007540:	f7ff f99c 	bl	800687c <quorem>
 8007544:	f100 0330 	add.w	r3, r0, #48	; 0x30
 8007548:	f805 3b01 	strb.w	r3, [r5], #1
 800754c:	9a00      	ldr	r2, [sp, #0]
 800754e:	1aaa      	subs	r2, r5, r2
 8007550:	4591      	cmp	r9, r2
 8007552:	ddba      	ble.n	80074ca <_dtoa_r+0xb32>
 8007554:	4659      	mov	r1, fp
 8007556:	2300      	movs	r3, #0
 8007558:	220a      	movs	r2, #10
 800755a:	4620      	mov	r0, r4
 800755c:	f000 f884 	bl	8007668 <__multadd>
 8007560:	4683      	mov	fp, r0
 8007562:	e7eb      	b.n	800753c <_dtoa_r+0xba4>
 8007564:	08008e67 	.word	0x08008e67
 8007568:	08008dc0 	.word	0x08008dc0
 800756c:	08008de4 	.word	0x08008de4

08007570 <_localeconv_r>:
 8007570:	4800      	ldr	r0, [pc, #0]	; (8007574 <_localeconv_r+0x4>)
 8007572:	4770      	bx	lr
 8007574:	2000017c 	.word	0x2000017c

08007578 <malloc>:
 8007578:	4b02      	ldr	r3, [pc, #8]	; (8007584 <malloc+0xc>)
 800757a:	4601      	mov	r1, r0
 800757c:	6818      	ldr	r0, [r3, #0]
 800757e:	f000 bbef 	b.w	8007d60 <_malloc_r>
 8007582:	bf00      	nop
 8007584:	20000028 	.word	0x20000028

08007588 <memcpy>:
 8007588:	440a      	add	r2, r1
 800758a:	4291      	cmp	r1, r2
 800758c:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8007590:	d100      	bne.n	8007594 <memcpy+0xc>
 8007592:	4770      	bx	lr
 8007594:	b510      	push	{r4, lr}
 8007596:	f811 4b01 	ldrb.w	r4, [r1], #1
 800759a:	f803 4f01 	strb.w	r4, [r3, #1]!
 800759e:	4291      	cmp	r1, r2
 80075a0:	d1f9      	bne.n	8007596 <memcpy+0xe>
 80075a2:	bd10      	pop	{r4, pc}

080075a4 <_Balloc>:
 80075a4:	b570      	push	{r4, r5, r6, lr}
 80075a6:	6a46      	ldr	r6, [r0, #36]	; 0x24
 80075a8:	4604      	mov	r4, r0
 80075aa:	460d      	mov	r5, r1
 80075ac:	b976      	cbnz	r6, 80075cc <_Balloc+0x28>
 80075ae:	2010      	movs	r0, #16
 80075b0:	f7ff ffe2 	bl	8007578 <malloc>
 80075b4:	4602      	mov	r2, r0
 80075b6:	6260      	str	r0, [r4, #36]	; 0x24
 80075b8:	b920      	cbnz	r0, 80075c4 <_Balloc+0x20>
 80075ba:	4b18      	ldr	r3, [pc, #96]	; (800761c <_Balloc+0x78>)
 80075bc:	4818      	ldr	r0, [pc, #96]	; (8007620 <_Balloc+0x7c>)
 80075be:	2166      	movs	r1, #102	; 0x66
 80075c0:	f000 fd94 	bl	80080ec <__assert_func>
 80075c4:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80075c8:	6006      	str	r6, [r0, #0]
 80075ca:	60c6      	str	r6, [r0, #12]
 80075cc:	6a66      	ldr	r6, [r4, #36]	; 0x24
 80075ce:	68f3      	ldr	r3, [r6, #12]
 80075d0:	b183      	cbz	r3, 80075f4 <_Balloc+0x50>
 80075d2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80075d4:	68db      	ldr	r3, [r3, #12]
 80075d6:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 80075da:	b9b8      	cbnz	r0, 800760c <_Balloc+0x68>
 80075dc:	2101      	movs	r1, #1
 80075de:	fa01 f605 	lsl.w	r6, r1, r5
 80075e2:	1d72      	adds	r2, r6, #5
 80075e4:	0092      	lsls	r2, r2, #2
 80075e6:	4620      	mov	r0, r4
 80075e8:	f000 fb5a 	bl	8007ca0 <_calloc_r>
 80075ec:	b160      	cbz	r0, 8007608 <_Balloc+0x64>
 80075ee:	e9c0 5601 	strd	r5, r6, [r0, #4]
 80075f2:	e00e      	b.n	8007612 <_Balloc+0x6e>
 80075f4:	2221      	movs	r2, #33	; 0x21
 80075f6:	2104      	movs	r1, #4
 80075f8:	4620      	mov	r0, r4
 80075fa:	f000 fb51 	bl	8007ca0 <_calloc_r>
 80075fe:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8007600:	60f0      	str	r0, [r6, #12]
 8007602:	68db      	ldr	r3, [r3, #12]
 8007604:	2b00      	cmp	r3, #0
 8007606:	d1e4      	bne.n	80075d2 <_Balloc+0x2e>
 8007608:	2000      	movs	r0, #0
 800760a:	bd70      	pop	{r4, r5, r6, pc}
 800760c:	6802      	ldr	r2, [r0, #0]
 800760e:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8007612:	2300      	movs	r3, #0
 8007614:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8007618:	e7f7      	b.n	800760a <_Balloc+0x66>
 800761a:	bf00      	nop
 800761c:	08008df1 	.word	0x08008df1
 8007620:	08008e78 	.word	0x08008e78

08007624 <_Bfree>:
 8007624:	b570      	push	{r4, r5, r6, lr}
 8007626:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8007628:	4605      	mov	r5, r0
 800762a:	460c      	mov	r4, r1
 800762c:	b976      	cbnz	r6, 800764c <_Bfree+0x28>
 800762e:	2010      	movs	r0, #16
 8007630:	f7ff ffa2 	bl	8007578 <malloc>
 8007634:	4602      	mov	r2, r0
 8007636:	6268      	str	r0, [r5, #36]	; 0x24
 8007638:	b920      	cbnz	r0, 8007644 <_Bfree+0x20>
 800763a:	4b09      	ldr	r3, [pc, #36]	; (8007660 <_Bfree+0x3c>)
 800763c:	4809      	ldr	r0, [pc, #36]	; (8007664 <_Bfree+0x40>)
 800763e:	218a      	movs	r1, #138	; 0x8a
 8007640:	f000 fd54 	bl	80080ec <__assert_func>
 8007644:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8007648:	6006      	str	r6, [r0, #0]
 800764a:	60c6      	str	r6, [r0, #12]
 800764c:	b13c      	cbz	r4, 800765e <_Bfree+0x3a>
 800764e:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8007650:	6862      	ldr	r2, [r4, #4]
 8007652:	68db      	ldr	r3, [r3, #12]
 8007654:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8007658:	6021      	str	r1, [r4, #0]
 800765a:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800765e:	bd70      	pop	{r4, r5, r6, pc}
 8007660:	08008df1 	.word	0x08008df1
 8007664:	08008e78 	.word	0x08008e78

08007668 <__multadd>:
 8007668:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800766c:	690e      	ldr	r6, [r1, #16]
 800766e:	4607      	mov	r7, r0
 8007670:	4698      	mov	r8, r3
 8007672:	460c      	mov	r4, r1
 8007674:	f101 0014 	add.w	r0, r1, #20
 8007678:	2300      	movs	r3, #0
 800767a:	6805      	ldr	r5, [r0, #0]
 800767c:	b2a9      	uxth	r1, r5
 800767e:	fb02 8101 	mla	r1, r2, r1, r8
 8007682:	ea4f 4c11 	mov.w	ip, r1, lsr #16
 8007686:	0c2d      	lsrs	r5, r5, #16
 8007688:	fb02 c505 	mla	r5, r2, r5, ip
 800768c:	b289      	uxth	r1, r1
 800768e:	3301      	adds	r3, #1
 8007690:	eb01 4105 	add.w	r1, r1, r5, lsl #16
 8007694:	429e      	cmp	r6, r3
 8007696:	f840 1b04 	str.w	r1, [r0], #4
 800769a:	ea4f 4815 	mov.w	r8, r5, lsr #16
 800769e:	dcec      	bgt.n	800767a <__multadd+0x12>
 80076a0:	f1b8 0f00 	cmp.w	r8, #0
 80076a4:	d022      	beq.n	80076ec <__multadd+0x84>
 80076a6:	68a3      	ldr	r3, [r4, #8]
 80076a8:	42b3      	cmp	r3, r6
 80076aa:	dc19      	bgt.n	80076e0 <__multadd+0x78>
 80076ac:	6861      	ldr	r1, [r4, #4]
 80076ae:	4638      	mov	r0, r7
 80076b0:	3101      	adds	r1, #1
 80076b2:	f7ff ff77 	bl	80075a4 <_Balloc>
 80076b6:	4605      	mov	r5, r0
 80076b8:	b928      	cbnz	r0, 80076c6 <__multadd+0x5e>
 80076ba:	4602      	mov	r2, r0
 80076bc:	4b0d      	ldr	r3, [pc, #52]	; (80076f4 <__multadd+0x8c>)
 80076be:	480e      	ldr	r0, [pc, #56]	; (80076f8 <__multadd+0x90>)
 80076c0:	21b5      	movs	r1, #181	; 0xb5
 80076c2:	f000 fd13 	bl	80080ec <__assert_func>
 80076c6:	6922      	ldr	r2, [r4, #16]
 80076c8:	3202      	adds	r2, #2
 80076ca:	f104 010c 	add.w	r1, r4, #12
 80076ce:	0092      	lsls	r2, r2, #2
 80076d0:	300c      	adds	r0, #12
 80076d2:	f7ff ff59 	bl	8007588 <memcpy>
 80076d6:	4621      	mov	r1, r4
 80076d8:	4638      	mov	r0, r7
 80076da:	f7ff ffa3 	bl	8007624 <_Bfree>
 80076de:	462c      	mov	r4, r5
 80076e0:	eb04 0386 	add.w	r3, r4, r6, lsl #2
 80076e4:	3601      	adds	r6, #1
 80076e6:	f8c3 8014 	str.w	r8, [r3, #20]
 80076ea:	6126      	str	r6, [r4, #16]
 80076ec:	4620      	mov	r0, r4
 80076ee:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80076f2:	bf00      	nop
 80076f4:	08008e67 	.word	0x08008e67
 80076f8:	08008e78 	.word	0x08008e78

080076fc <__hi0bits>:
 80076fc:	0c03      	lsrs	r3, r0, #16
 80076fe:	041b      	lsls	r3, r3, #16
 8007700:	b9d3      	cbnz	r3, 8007738 <__hi0bits+0x3c>
 8007702:	0400      	lsls	r0, r0, #16
 8007704:	2310      	movs	r3, #16
 8007706:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800770a:	bf04      	itt	eq
 800770c:	0200      	lsleq	r0, r0, #8
 800770e:	3308      	addeq	r3, #8
 8007710:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8007714:	bf04      	itt	eq
 8007716:	0100      	lsleq	r0, r0, #4
 8007718:	3304      	addeq	r3, #4
 800771a:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800771e:	bf04      	itt	eq
 8007720:	0080      	lsleq	r0, r0, #2
 8007722:	3302      	addeq	r3, #2
 8007724:	2800      	cmp	r0, #0
 8007726:	db05      	blt.n	8007734 <__hi0bits+0x38>
 8007728:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 800772c:	f103 0301 	add.w	r3, r3, #1
 8007730:	bf08      	it	eq
 8007732:	2320      	moveq	r3, #32
 8007734:	4618      	mov	r0, r3
 8007736:	4770      	bx	lr
 8007738:	2300      	movs	r3, #0
 800773a:	e7e4      	b.n	8007706 <__hi0bits+0xa>

0800773c <__lo0bits>:
 800773c:	6803      	ldr	r3, [r0, #0]
 800773e:	f013 0207 	ands.w	r2, r3, #7
 8007742:	4601      	mov	r1, r0
 8007744:	d00b      	beq.n	800775e <__lo0bits+0x22>
 8007746:	07da      	lsls	r2, r3, #31
 8007748:	d424      	bmi.n	8007794 <__lo0bits+0x58>
 800774a:	0798      	lsls	r0, r3, #30
 800774c:	bf49      	itett	mi
 800774e:	085b      	lsrmi	r3, r3, #1
 8007750:	089b      	lsrpl	r3, r3, #2
 8007752:	2001      	movmi	r0, #1
 8007754:	600b      	strmi	r3, [r1, #0]
 8007756:	bf5c      	itt	pl
 8007758:	600b      	strpl	r3, [r1, #0]
 800775a:	2002      	movpl	r0, #2
 800775c:	4770      	bx	lr
 800775e:	b298      	uxth	r0, r3
 8007760:	b9b0      	cbnz	r0, 8007790 <__lo0bits+0x54>
 8007762:	0c1b      	lsrs	r3, r3, #16
 8007764:	2010      	movs	r0, #16
 8007766:	f013 0fff 	tst.w	r3, #255	; 0xff
 800776a:	bf04      	itt	eq
 800776c:	0a1b      	lsreq	r3, r3, #8
 800776e:	3008      	addeq	r0, #8
 8007770:	071a      	lsls	r2, r3, #28
 8007772:	bf04      	itt	eq
 8007774:	091b      	lsreq	r3, r3, #4
 8007776:	3004      	addeq	r0, #4
 8007778:	079a      	lsls	r2, r3, #30
 800777a:	bf04      	itt	eq
 800777c:	089b      	lsreq	r3, r3, #2
 800777e:	3002      	addeq	r0, #2
 8007780:	07da      	lsls	r2, r3, #31
 8007782:	d403      	bmi.n	800778c <__lo0bits+0x50>
 8007784:	085b      	lsrs	r3, r3, #1
 8007786:	f100 0001 	add.w	r0, r0, #1
 800778a:	d005      	beq.n	8007798 <__lo0bits+0x5c>
 800778c:	600b      	str	r3, [r1, #0]
 800778e:	4770      	bx	lr
 8007790:	4610      	mov	r0, r2
 8007792:	e7e8      	b.n	8007766 <__lo0bits+0x2a>
 8007794:	2000      	movs	r0, #0
 8007796:	4770      	bx	lr
 8007798:	2020      	movs	r0, #32
 800779a:	4770      	bx	lr

0800779c <__i2b>:
 800779c:	b510      	push	{r4, lr}
 800779e:	460c      	mov	r4, r1
 80077a0:	2101      	movs	r1, #1
 80077a2:	f7ff feff 	bl	80075a4 <_Balloc>
 80077a6:	4602      	mov	r2, r0
 80077a8:	b928      	cbnz	r0, 80077b6 <__i2b+0x1a>
 80077aa:	4b05      	ldr	r3, [pc, #20]	; (80077c0 <__i2b+0x24>)
 80077ac:	4805      	ldr	r0, [pc, #20]	; (80077c4 <__i2b+0x28>)
 80077ae:	f44f 71a0 	mov.w	r1, #320	; 0x140
 80077b2:	f000 fc9b 	bl	80080ec <__assert_func>
 80077b6:	2301      	movs	r3, #1
 80077b8:	6144      	str	r4, [r0, #20]
 80077ba:	6103      	str	r3, [r0, #16]
 80077bc:	bd10      	pop	{r4, pc}
 80077be:	bf00      	nop
 80077c0:	08008e67 	.word	0x08008e67
 80077c4:	08008e78 	.word	0x08008e78

080077c8 <__multiply>:
 80077c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80077cc:	4614      	mov	r4, r2
 80077ce:	690a      	ldr	r2, [r1, #16]
 80077d0:	6923      	ldr	r3, [r4, #16]
 80077d2:	429a      	cmp	r2, r3
 80077d4:	bfb8      	it	lt
 80077d6:	460b      	movlt	r3, r1
 80077d8:	460d      	mov	r5, r1
 80077da:	bfbc      	itt	lt
 80077dc:	4625      	movlt	r5, r4
 80077de:	461c      	movlt	r4, r3
 80077e0:	f8d5 a010 	ldr.w	sl, [r5, #16]
 80077e4:	f8d4 9010 	ldr.w	r9, [r4, #16]
 80077e8:	68ab      	ldr	r3, [r5, #8]
 80077ea:	6869      	ldr	r1, [r5, #4]
 80077ec:	eb0a 0709 	add.w	r7, sl, r9
 80077f0:	42bb      	cmp	r3, r7
 80077f2:	b085      	sub	sp, #20
 80077f4:	bfb8      	it	lt
 80077f6:	3101      	addlt	r1, #1
 80077f8:	f7ff fed4 	bl	80075a4 <_Balloc>
 80077fc:	b930      	cbnz	r0, 800780c <__multiply+0x44>
 80077fe:	4602      	mov	r2, r0
 8007800:	4b42      	ldr	r3, [pc, #264]	; (800790c <__multiply+0x144>)
 8007802:	4843      	ldr	r0, [pc, #268]	; (8007910 <__multiply+0x148>)
 8007804:	f240 115d 	movw	r1, #349	; 0x15d
 8007808:	f000 fc70 	bl	80080ec <__assert_func>
 800780c:	f100 0614 	add.w	r6, r0, #20
 8007810:	eb06 0887 	add.w	r8, r6, r7, lsl #2
 8007814:	4633      	mov	r3, r6
 8007816:	2200      	movs	r2, #0
 8007818:	4543      	cmp	r3, r8
 800781a:	d31e      	bcc.n	800785a <__multiply+0x92>
 800781c:	f105 0c14 	add.w	ip, r5, #20
 8007820:	f104 0314 	add.w	r3, r4, #20
 8007824:	eb0c 0c8a 	add.w	ip, ip, sl, lsl #2
 8007828:	eb03 0289 	add.w	r2, r3, r9, lsl #2
 800782c:	9202      	str	r2, [sp, #8]
 800782e:	ebac 0205 	sub.w	r2, ip, r5
 8007832:	3a15      	subs	r2, #21
 8007834:	f022 0203 	bic.w	r2, r2, #3
 8007838:	3204      	adds	r2, #4
 800783a:	f105 0115 	add.w	r1, r5, #21
 800783e:	458c      	cmp	ip, r1
 8007840:	bf38      	it	cc
 8007842:	2204      	movcc	r2, #4
 8007844:	9201      	str	r2, [sp, #4]
 8007846:	9a02      	ldr	r2, [sp, #8]
 8007848:	9303      	str	r3, [sp, #12]
 800784a:	429a      	cmp	r2, r3
 800784c:	d808      	bhi.n	8007860 <__multiply+0x98>
 800784e:	2f00      	cmp	r7, #0
 8007850:	dc55      	bgt.n	80078fe <__multiply+0x136>
 8007852:	6107      	str	r7, [r0, #16]
 8007854:	b005      	add	sp, #20
 8007856:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800785a:	f843 2b04 	str.w	r2, [r3], #4
 800785e:	e7db      	b.n	8007818 <__multiply+0x50>
 8007860:	f8b3 a000 	ldrh.w	sl, [r3]
 8007864:	f1ba 0f00 	cmp.w	sl, #0
 8007868:	d020      	beq.n	80078ac <__multiply+0xe4>
 800786a:	f105 0e14 	add.w	lr, r5, #20
 800786e:	46b1      	mov	r9, r6
 8007870:	2200      	movs	r2, #0
 8007872:	f85e 4b04 	ldr.w	r4, [lr], #4
 8007876:	f8d9 b000 	ldr.w	fp, [r9]
 800787a:	b2a1      	uxth	r1, r4
 800787c:	fa1f fb8b 	uxth.w	fp, fp
 8007880:	fb0a b101 	mla	r1, sl, r1, fp
 8007884:	4411      	add	r1, r2
 8007886:	f8d9 2000 	ldr.w	r2, [r9]
 800788a:	0c24      	lsrs	r4, r4, #16
 800788c:	0c12      	lsrs	r2, r2, #16
 800788e:	fb0a 2404 	mla	r4, sl, r4, r2
 8007892:	eb04 4411 	add.w	r4, r4, r1, lsr #16
 8007896:	b289      	uxth	r1, r1
 8007898:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 800789c:	45f4      	cmp	ip, lr
 800789e:	f849 1b04 	str.w	r1, [r9], #4
 80078a2:	ea4f 4214 	mov.w	r2, r4, lsr #16
 80078a6:	d8e4      	bhi.n	8007872 <__multiply+0xaa>
 80078a8:	9901      	ldr	r1, [sp, #4]
 80078aa:	5072      	str	r2, [r6, r1]
 80078ac:	9a03      	ldr	r2, [sp, #12]
 80078ae:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 80078b2:	3304      	adds	r3, #4
 80078b4:	f1b9 0f00 	cmp.w	r9, #0
 80078b8:	d01f      	beq.n	80078fa <__multiply+0x132>
 80078ba:	6834      	ldr	r4, [r6, #0]
 80078bc:	f105 0114 	add.w	r1, r5, #20
 80078c0:	46b6      	mov	lr, r6
 80078c2:	f04f 0a00 	mov.w	sl, #0
 80078c6:	880a      	ldrh	r2, [r1, #0]
 80078c8:	f8be b002 	ldrh.w	fp, [lr, #2]
 80078cc:	fb09 b202 	mla	r2, r9, r2, fp
 80078d0:	4492      	add	sl, r2
 80078d2:	b2a4      	uxth	r4, r4
 80078d4:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 80078d8:	f84e 4b04 	str.w	r4, [lr], #4
 80078dc:	f851 4b04 	ldr.w	r4, [r1], #4
 80078e0:	f8be 2000 	ldrh.w	r2, [lr]
 80078e4:	0c24      	lsrs	r4, r4, #16
 80078e6:	fb09 2404 	mla	r4, r9, r4, r2
 80078ea:	eb04 441a 	add.w	r4, r4, sl, lsr #16
 80078ee:	458c      	cmp	ip, r1
 80078f0:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 80078f4:	d8e7      	bhi.n	80078c6 <__multiply+0xfe>
 80078f6:	9a01      	ldr	r2, [sp, #4]
 80078f8:	50b4      	str	r4, [r6, r2]
 80078fa:	3604      	adds	r6, #4
 80078fc:	e7a3      	b.n	8007846 <__multiply+0x7e>
 80078fe:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8007902:	2b00      	cmp	r3, #0
 8007904:	d1a5      	bne.n	8007852 <__multiply+0x8a>
 8007906:	3f01      	subs	r7, #1
 8007908:	e7a1      	b.n	800784e <__multiply+0x86>
 800790a:	bf00      	nop
 800790c:	08008e67 	.word	0x08008e67
 8007910:	08008e78 	.word	0x08008e78

08007914 <__pow5mult>:
 8007914:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007918:	4615      	mov	r5, r2
 800791a:	f012 0203 	ands.w	r2, r2, #3
 800791e:	4606      	mov	r6, r0
 8007920:	460f      	mov	r7, r1
 8007922:	d007      	beq.n	8007934 <__pow5mult+0x20>
 8007924:	4c25      	ldr	r4, [pc, #148]	; (80079bc <__pow5mult+0xa8>)
 8007926:	3a01      	subs	r2, #1
 8007928:	2300      	movs	r3, #0
 800792a:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800792e:	f7ff fe9b 	bl	8007668 <__multadd>
 8007932:	4607      	mov	r7, r0
 8007934:	10ad      	asrs	r5, r5, #2
 8007936:	d03d      	beq.n	80079b4 <__pow5mult+0xa0>
 8007938:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800793a:	b97c      	cbnz	r4, 800795c <__pow5mult+0x48>
 800793c:	2010      	movs	r0, #16
 800793e:	f7ff fe1b 	bl	8007578 <malloc>
 8007942:	4602      	mov	r2, r0
 8007944:	6270      	str	r0, [r6, #36]	; 0x24
 8007946:	b928      	cbnz	r0, 8007954 <__pow5mult+0x40>
 8007948:	4b1d      	ldr	r3, [pc, #116]	; (80079c0 <__pow5mult+0xac>)
 800794a:	481e      	ldr	r0, [pc, #120]	; (80079c4 <__pow5mult+0xb0>)
 800794c:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 8007950:	f000 fbcc 	bl	80080ec <__assert_func>
 8007954:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8007958:	6004      	str	r4, [r0, #0]
 800795a:	60c4      	str	r4, [r0, #12]
 800795c:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8007960:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8007964:	b94c      	cbnz	r4, 800797a <__pow5mult+0x66>
 8007966:	f240 2171 	movw	r1, #625	; 0x271
 800796a:	4630      	mov	r0, r6
 800796c:	f7ff ff16 	bl	800779c <__i2b>
 8007970:	2300      	movs	r3, #0
 8007972:	f8c8 0008 	str.w	r0, [r8, #8]
 8007976:	4604      	mov	r4, r0
 8007978:	6003      	str	r3, [r0, #0]
 800797a:	f04f 0900 	mov.w	r9, #0
 800797e:	07eb      	lsls	r3, r5, #31
 8007980:	d50a      	bpl.n	8007998 <__pow5mult+0x84>
 8007982:	4639      	mov	r1, r7
 8007984:	4622      	mov	r2, r4
 8007986:	4630      	mov	r0, r6
 8007988:	f7ff ff1e 	bl	80077c8 <__multiply>
 800798c:	4639      	mov	r1, r7
 800798e:	4680      	mov	r8, r0
 8007990:	4630      	mov	r0, r6
 8007992:	f7ff fe47 	bl	8007624 <_Bfree>
 8007996:	4647      	mov	r7, r8
 8007998:	106d      	asrs	r5, r5, #1
 800799a:	d00b      	beq.n	80079b4 <__pow5mult+0xa0>
 800799c:	6820      	ldr	r0, [r4, #0]
 800799e:	b938      	cbnz	r0, 80079b0 <__pow5mult+0x9c>
 80079a0:	4622      	mov	r2, r4
 80079a2:	4621      	mov	r1, r4
 80079a4:	4630      	mov	r0, r6
 80079a6:	f7ff ff0f 	bl	80077c8 <__multiply>
 80079aa:	6020      	str	r0, [r4, #0]
 80079ac:	f8c0 9000 	str.w	r9, [r0]
 80079b0:	4604      	mov	r4, r0
 80079b2:	e7e4      	b.n	800797e <__pow5mult+0x6a>
 80079b4:	4638      	mov	r0, r7
 80079b6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80079ba:	bf00      	nop
 80079bc:	08008fc8 	.word	0x08008fc8
 80079c0:	08008df1 	.word	0x08008df1
 80079c4:	08008e78 	.word	0x08008e78

080079c8 <__lshift>:
 80079c8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80079cc:	460c      	mov	r4, r1
 80079ce:	6849      	ldr	r1, [r1, #4]
 80079d0:	6923      	ldr	r3, [r4, #16]
 80079d2:	eb03 1862 	add.w	r8, r3, r2, asr #5
 80079d6:	68a3      	ldr	r3, [r4, #8]
 80079d8:	4607      	mov	r7, r0
 80079da:	4691      	mov	r9, r2
 80079dc:	ea4f 1a62 	mov.w	sl, r2, asr #5
 80079e0:	f108 0601 	add.w	r6, r8, #1
 80079e4:	42b3      	cmp	r3, r6
 80079e6:	db0b      	blt.n	8007a00 <__lshift+0x38>
 80079e8:	4638      	mov	r0, r7
 80079ea:	f7ff fddb 	bl	80075a4 <_Balloc>
 80079ee:	4605      	mov	r5, r0
 80079f0:	b948      	cbnz	r0, 8007a06 <__lshift+0x3e>
 80079f2:	4602      	mov	r2, r0
 80079f4:	4b28      	ldr	r3, [pc, #160]	; (8007a98 <__lshift+0xd0>)
 80079f6:	4829      	ldr	r0, [pc, #164]	; (8007a9c <__lshift+0xd4>)
 80079f8:	f240 11d9 	movw	r1, #473	; 0x1d9
 80079fc:	f000 fb76 	bl	80080ec <__assert_func>
 8007a00:	3101      	adds	r1, #1
 8007a02:	005b      	lsls	r3, r3, #1
 8007a04:	e7ee      	b.n	80079e4 <__lshift+0x1c>
 8007a06:	2300      	movs	r3, #0
 8007a08:	f100 0114 	add.w	r1, r0, #20
 8007a0c:	f100 0210 	add.w	r2, r0, #16
 8007a10:	4618      	mov	r0, r3
 8007a12:	4553      	cmp	r3, sl
 8007a14:	db33      	blt.n	8007a7e <__lshift+0xb6>
 8007a16:	6920      	ldr	r0, [r4, #16]
 8007a18:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8007a1c:	f104 0314 	add.w	r3, r4, #20
 8007a20:	f019 091f 	ands.w	r9, r9, #31
 8007a24:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8007a28:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8007a2c:	d02b      	beq.n	8007a86 <__lshift+0xbe>
 8007a2e:	f1c9 0e20 	rsb	lr, r9, #32
 8007a32:	468a      	mov	sl, r1
 8007a34:	2200      	movs	r2, #0
 8007a36:	6818      	ldr	r0, [r3, #0]
 8007a38:	fa00 f009 	lsl.w	r0, r0, r9
 8007a3c:	4302      	orrs	r2, r0
 8007a3e:	f84a 2b04 	str.w	r2, [sl], #4
 8007a42:	f853 2b04 	ldr.w	r2, [r3], #4
 8007a46:	459c      	cmp	ip, r3
 8007a48:	fa22 f20e 	lsr.w	r2, r2, lr
 8007a4c:	d8f3      	bhi.n	8007a36 <__lshift+0x6e>
 8007a4e:	ebac 0304 	sub.w	r3, ip, r4
 8007a52:	3b15      	subs	r3, #21
 8007a54:	f023 0303 	bic.w	r3, r3, #3
 8007a58:	3304      	adds	r3, #4
 8007a5a:	f104 0015 	add.w	r0, r4, #21
 8007a5e:	4584      	cmp	ip, r0
 8007a60:	bf38      	it	cc
 8007a62:	2304      	movcc	r3, #4
 8007a64:	50ca      	str	r2, [r1, r3]
 8007a66:	b10a      	cbz	r2, 8007a6c <__lshift+0xa4>
 8007a68:	f108 0602 	add.w	r6, r8, #2
 8007a6c:	3e01      	subs	r6, #1
 8007a6e:	4638      	mov	r0, r7
 8007a70:	612e      	str	r6, [r5, #16]
 8007a72:	4621      	mov	r1, r4
 8007a74:	f7ff fdd6 	bl	8007624 <_Bfree>
 8007a78:	4628      	mov	r0, r5
 8007a7a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007a7e:	f842 0f04 	str.w	r0, [r2, #4]!
 8007a82:	3301      	adds	r3, #1
 8007a84:	e7c5      	b.n	8007a12 <__lshift+0x4a>
 8007a86:	3904      	subs	r1, #4
 8007a88:	f853 2b04 	ldr.w	r2, [r3], #4
 8007a8c:	f841 2f04 	str.w	r2, [r1, #4]!
 8007a90:	459c      	cmp	ip, r3
 8007a92:	d8f9      	bhi.n	8007a88 <__lshift+0xc0>
 8007a94:	e7ea      	b.n	8007a6c <__lshift+0xa4>
 8007a96:	bf00      	nop
 8007a98:	08008e67 	.word	0x08008e67
 8007a9c:	08008e78 	.word	0x08008e78

08007aa0 <__mcmp>:
 8007aa0:	b530      	push	{r4, r5, lr}
 8007aa2:	6902      	ldr	r2, [r0, #16]
 8007aa4:	690c      	ldr	r4, [r1, #16]
 8007aa6:	1b12      	subs	r2, r2, r4
 8007aa8:	d10e      	bne.n	8007ac8 <__mcmp+0x28>
 8007aaa:	f100 0314 	add.w	r3, r0, #20
 8007aae:	3114      	adds	r1, #20
 8007ab0:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 8007ab4:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 8007ab8:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 8007abc:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 8007ac0:	42a5      	cmp	r5, r4
 8007ac2:	d003      	beq.n	8007acc <__mcmp+0x2c>
 8007ac4:	d305      	bcc.n	8007ad2 <__mcmp+0x32>
 8007ac6:	2201      	movs	r2, #1
 8007ac8:	4610      	mov	r0, r2
 8007aca:	bd30      	pop	{r4, r5, pc}
 8007acc:	4283      	cmp	r3, r0
 8007ace:	d3f3      	bcc.n	8007ab8 <__mcmp+0x18>
 8007ad0:	e7fa      	b.n	8007ac8 <__mcmp+0x28>
 8007ad2:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8007ad6:	e7f7      	b.n	8007ac8 <__mcmp+0x28>

08007ad8 <__mdiff>:
 8007ad8:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007adc:	460c      	mov	r4, r1
 8007ade:	4606      	mov	r6, r0
 8007ae0:	4611      	mov	r1, r2
 8007ae2:	4620      	mov	r0, r4
 8007ae4:	4617      	mov	r7, r2
 8007ae6:	f7ff ffdb 	bl	8007aa0 <__mcmp>
 8007aea:	1e05      	subs	r5, r0, #0
 8007aec:	d110      	bne.n	8007b10 <__mdiff+0x38>
 8007aee:	4629      	mov	r1, r5
 8007af0:	4630      	mov	r0, r6
 8007af2:	f7ff fd57 	bl	80075a4 <_Balloc>
 8007af6:	b930      	cbnz	r0, 8007b06 <__mdiff+0x2e>
 8007af8:	4b39      	ldr	r3, [pc, #228]	; (8007be0 <__mdiff+0x108>)
 8007afa:	4602      	mov	r2, r0
 8007afc:	f240 2132 	movw	r1, #562	; 0x232
 8007b00:	4838      	ldr	r0, [pc, #224]	; (8007be4 <__mdiff+0x10c>)
 8007b02:	f000 faf3 	bl	80080ec <__assert_func>
 8007b06:	2301      	movs	r3, #1
 8007b08:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8007b0c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007b10:	bfa4      	itt	ge
 8007b12:	463b      	movge	r3, r7
 8007b14:	4627      	movge	r7, r4
 8007b16:	4630      	mov	r0, r6
 8007b18:	6879      	ldr	r1, [r7, #4]
 8007b1a:	bfa6      	itte	ge
 8007b1c:	461c      	movge	r4, r3
 8007b1e:	2500      	movge	r5, #0
 8007b20:	2501      	movlt	r5, #1
 8007b22:	f7ff fd3f 	bl	80075a4 <_Balloc>
 8007b26:	b920      	cbnz	r0, 8007b32 <__mdiff+0x5a>
 8007b28:	4b2d      	ldr	r3, [pc, #180]	; (8007be0 <__mdiff+0x108>)
 8007b2a:	4602      	mov	r2, r0
 8007b2c:	f44f 7110 	mov.w	r1, #576	; 0x240
 8007b30:	e7e6      	b.n	8007b00 <__mdiff+0x28>
 8007b32:	693e      	ldr	r6, [r7, #16]
 8007b34:	60c5      	str	r5, [r0, #12]
 8007b36:	6925      	ldr	r5, [r4, #16]
 8007b38:	f107 0114 	add.w	r1, r7, #20
 8007b3c:	f104 0914 	add.w	r9, r4, #20
 8007b40:	f100 0e14 	add.w	lr, r0, #20
 8007b44:	f107 0210 	add.w	r2, r7, #16
 8007b48:	eb01 0c86 	add.w	ip, r1, r6, lsl #2
 8007b4c:	eb09 0585 	add.w	r5, r9, r5, lsl #2
 8007b50:	46f2      	mov	sl, lr
 8007b52:	2700      	movs	r7, #0
 8007b54:	f859 3b04 	ldr.w	r3, [r9], #4
 8007b58:	f852 bf04 	ldr.w	fp, [r2, #4]!
 8007b5c:	fa1f f883 	uxth.w	r8, r3
 8007b60:	fa17 f78b 	uxtah	r7, r7, fp
 8007b64:	0c1b      	lsrs	r3, r3, #16
 8007b66:	eba7 0808 	sub.w	r8, r7, r8
 8007b6a:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8007b6e:	eb03 4328 	add.w	r3, r3, r8, asr #16
 8007b72:	fa1f f888 	uxth.w	r8, r8
 8007b76:	141f      	asrs	r7, r3, #16
 8007b78:	454d      	cmp	r5, r9
 8007b7a:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 8007b7e:	f84a 3b04 	str.w	r3, [sl], #4
 8007b82:	d8e7      	bhi.n	8007b54 <__mdiff+0x7c>
 8007b84:	1b2b      	subs	r3, r5, r4
 8007b86:	3b15      	subs	r3, #21
 8007b88:	f023 0303 	bic.w	r3, r3, #3
 8007b8c:	3304      	adds	r3, #4
 8007b8e:	3415      	adds	r4, #21
 8007b90:	42a5      	cmp	r5, r4
 8007b92:	bf38      	it	cc
 8007b94:	2304      	movcc	r3, #4
 8007b96:	4419      	add	r1, r3
 8007b98:	4473      	add	r3, lr
 8007b9a:	469e      	mov	lr, r3
 8007b9c:	460d      	mov	r5, r1
 8007b9e:	4565      	cmp	r5, ip
 8007ba0:	d30e      	bcc.n	8007bc0 <__mdiff+0xe8>
 8007ba2:	f10c 0203 	add.w	r2, ip, #3
 8007ba6:	1a52      	subs	r2, r2, r1
 8007ba8:	f022 0203 	bic.w	r2, r2, #3
 8007bac:	3903      	subs	r1, #3
 8007bae:	458c      	cmp	ip, r1
 8007bb0:	bf38      	it	cc
 8007bb2:	2200      	movcc	r2, #0
 8007bb4:	441a      	add	r2, r3
 8007bb6:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 8007bba:	b17b      	cbz	r3, 8007bdc <__mdiff+0x104>
 8007bbc:	6106      	str	r6, [r0, #16]
 8007bbe:	e7a5      	b.n	8007b0c <__mdiff+0x34>
 8007bc0:	f855 8b04 	ldr.w	r8, [r5], #4
 8007bc4:	fa17 f488 	uxtah	r4, r7, r8
 8007bc8:	1422      	asrs	r2, r4, #16
 8007bca:	eb02 4218 	add.w	r2, r2, r8, lsr #16
 8007bce:	b2a4      	uxth	r4, r4
 8007bd0:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8007bd4:	f84e 4b04 	str.w	r4, [lr], #4
 8007bd8:	1417      	asrs	r7, r2, #16
 8007bda:	e7e0      	b.n	8007b9e <__mdiff+0xc6>
 8007bdc:	3e01      	subs	r6, #1
 8007bde:	e7ea      	b.n	8007bb6 <__mdiff+0xde>
 8007be0:	08008e67 	.word	0x08008e67
 8007be4:	08008e78 	.word	0x08008e78

08007be8 <__d2b>:
 8007be8:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8007bec:	4689      	mov	r9, r1
 8007bee:	2101      	movs	r1, #1
 8007bf0:	ec57 6b10 	vmov	r6, r7, d0
 8007bf4:	4690      	mov	r8, r2
 8007bf6:	f7ff fcd5 	bl	80075a4 <_Balloc>
 8007bfa:	4604      	mov	r4, r0
 8007bfc:	b930      	cbnz	r0, 8007c0c <__d2b+0x24>
 8007bfe:	4602      	mov	r2, r0
 8007c00:	4b25      	ldr	r3, [pc, #148]	; (8007c98 <__d2b+0xb0>)
 8007c02:	4826      	ldr	r0, [pc, #152]	; (8007c9c <__d2b+0xb4>)
 8007c04:	f240 310a 	movw	r1, #778	; 0x30a
 8007c08:	f000 fa70 	bl	80080ec <__assert_func>
 8007c0c:	f3c7 550a 	ubfx	r5, r7, #20, #11
 8007c10:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8007c14:	bb35      	cbnz	r5, 8007c64 <__d2b+0x7c>
 8007c16:	2e00      	cmp	r6, #0
 8007c18:	9301      	str	r3, [sp, #4]
 8007c1a:	d028      	beq.n	8007c6e <__d2b+0x86>
 8007c1c:	4668      	mov	r0, sp
 8007c1e:	9600      	str	r6, [sp, #0]
 8007c20:	f7ff fd8c 	bl	800773c <__lo0bits>
 8007c24:	9900      	ldr	r1, [sp, #0]
 8007c26:	b300      	cbz	r0, 8007c6a <__d2b+0x82>
 8007c28:	9a01      	ldr	r2, [sp, #4]
 8007c2a:	f1c0 0320 	rsb	r3, r0, #32
 8007c2e:	fa02 f303 	lsl.w	r3, r2, r3
 8007c32:	430b      	orrs	r3, r1
 8007c34:	40c2      	lsrs	r2, r0
 8007c36:	6163      	str	r3, [r4, #20]
 8007c38:	9201      	str	r2, [sp, #4]
 8007c3a:	9b01      	ldr	r3, [sp, #4]
 8007c3c:	61a3      	str	r3, [r4, #24]
 8007c3e:	2b00      	cmp	r3, #0
 8007c40:	bf14      	ite	ne
 8007c42:	2202      	movne	r2, #2
 8007c44:	2201      	moveq	r2, #1
 8007c46:	6122      	str	r2, [r4, #16]
 8007c48:	b1d5      	cbz	r5, 8007c80 <__d2b+0x98>
 8007c4a:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8007c4e:	4405      	add	r5, r0
 8007c50:	f8c9 5000 	str.w	r5, [r9]
 8007c54:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8007c58:	f8c8 0000 	str.w	r0, [r8]
 8007c5c:	4620      	mov	r0, r4
 8007c5e:	b003      	add	sp, #12
 8007c60:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8007c64:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8007c68:	e7d5      	b.n	8007c16 <__d2b+0x2e>
 8007c6a:	6161      	str	r1, [r4, #20]
 8007c6c:	e7e5      	b.n	8007c3a <__d2b+0x52>
 8007c6e:	a801      	add	r0, sp, #4
 8007c70:	f7ff fd64 	bl	800773c <__lo0bits>
 8007c74:	9b01      	ldr	r3, [sp, #4]
 8007c76:	6163      	str	r3, [r4, #20]
 8007c78:	2201      	movs	r2, #1
 8007c7a:	6122      	str	r2, [r4, #16]
 8007c7c:	3020      	adds	r0, #32
 8007c7e:	e7e3      	b.n	8007c48 <__d2b+0x60>
 8007c80:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8007c84:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8007c88:	f8c9 0000 	str.w	r0, [r9]
 8007c8c:	6918      	ldr	r0, [r3, #16]
 8007c8e:	f7ff fd35 	bl	80076fc <__hi0bits>
 8007c92:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8007c96:	e7df      	b.n	8007c58 <__d2b+0x70>
 8007c98:	08008e67 	.word	0x08008e67
 8007c9c:	08008e78 	.word	0x08008e78

08007ca0 <_calloc_r>:
 8007ca0:	b513      	push	{r0, r1, r4, lr}
 8007ca2:	434a      	muls	r2, r1
 8007ca4:	4611      	mov	r1, r2
 8007ca6:	9201      	str	r2, [sp, #4]
 8007ca8:	f000 f85a 	bl	8007d60 <_malloc_r>
 8007cac:	4604      	mov	r4, r0
 8007cae:	b118      	cbz	r0, 8007cb8 <_calloc_r+0x18>
 8007cb0:	9a01      	ldr	r2, [sp, #4]
 8007cb2:	2100      	movs	r1, #0
 8007cb4:	f7fe f950 	bl	8005f58 <memset>
 8007cb8:	4620      	mov	r0, r4
 8007cba:	b002      	add	sp, #8
 8007cbc:	bd10      	pop	{r4, pc}
	...

08007cc0 <_free_r>:
 8007cc0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8007cc2:	2900      	cmp	r1, #0
 8007cc4:	d048      	beq.n	8007d58 <_free_r+0x98>
 8007cc6:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007cca:	9001      	str	r0, [sp, #4]
 8007ccc:	2b00      	cmp	r3, #0
 8007cce:	f1a1 0404 	sub.w	r4, r1, #4
 8007cd2:	bfb8      	it	lt
 8007cd4:	18e4      	addlt	r4, r4, r3
 8007cd6:	f000 fa65 	bl	80081a4 <__malloc_lock>
 8007cda:	4a20      	ldr	r2, [pc, #128]	; (8007d5c <_free_r+0x9c>)
 8007cdc:	9801      	ldr	r0, [sp, #4]
 8007cde:	6813      	ldr	r3, [r2, #0]
 8007ce0:	4615      	mov	r5, r2
 8007ce2:	b933      	cbnz	r3, 8007cf2 <_free_r+0x32>
 8007ce4:	6063      	str	r3, [r4, #4]
 8007ce6:	6014      	str	r4, [r2, #0]
 8007ce8:	b003      	add	sp, #12
 8007cea:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8007cee:	f000 ba5f 	b.w	80081b0 <__malloc_unlock>
 8007cf2:	42a3      	cmp	r3, r4
 8007cf4:	d90b      	bls.n	8007d0e <_free_r+0x4e>
 8007cf6:	6821      	ldr	r1, [r4, #0]
 8007cf8:	1862      	adds	r2, r4, r1
 8007cfa:	4293      	cmp	r3, r2
 8007cfc:	bf04      	itt	eq
 8007cfe:	681a      	ldreq	r2, [r3, #0]
 8007d00:	685b      	ldreq	r3, [r3, #4]
 8007d02:	6063      	str	r3, [r4, #4]
 8007d04:	bf04      	itt	eq
 8007d06:	1852      	addeq	r2, r2, r1
 8007d08:	6022      	streq	r2, [r4, #0]
 8007d0a:	602c      	str	r4, [r5, #0]
 8007d0c:	e7ec      	b.n	8007ce8 <_free_r+0x28>
 8007d0e:	461a      	mov	r2, r3
 8007d10:	685b      	ldr	r3, [r3, #4]
 8007d12:	b10b      	cbz	r3, 8007d18 <_free_r+0x58>
 8007d14:	42a3      	cmp	r3, r4
 8007d16:	d9fa      	bls.n	8007d0e <_free_r+0x4e>
 8007d18:	6811      	ldr	r1, [r2, #0]
 8007d1a:	1855      	adds	r5, r2, r1
 8007d1c:	42a5      	cmp	r5, r4
 8007d1e:	d10b      	bne.n	8007d38 <_free_r+0x78>
 8007d20:	6824      	ldr	r4, [r4, #0]
 8007d22:	4421      	add	r1, r4
 8007d24:	1854      	adds	r4, r2, r1
 8007d26:	42a3      	cmp	r3, r4
 8007d28:	6011      	str	r1, [r2, #0]
 8007d2a:	d1dd      	bne.n	8007ce8 <_free_r+0x28>
 8007d2c:	681c      	ldr	r4, [r3, #0]
 8007d2e:	685b      	ldr	r3, [r3, #4]
 8007d30:	6053      	str	r3, [r2, #4]
 8007d32:	4421      	add	r1, r4
 8007d34:	6011      	str	r1, [r2, #0]
 8007d36:	e7d7      	b.n	8007ce8 <_free_r+0x28>
 8007d38:	d902      	bls.n	8007d40 <_free_r+0x80>
 8007d3a:	230c      	movs	r3, #12
 8007d3c:	6003      	str	r3, [r0, #0]
 8007d3e:	e7d3      	b.n	8007ce8 <_free_r+0x28>
 8007d40:	6825      	ldr	r5, [r4, #0]
 8007d42:	1961      	adds	r1, r4, r5
 8007d44:	428b      	cmp	r3, r1
 8007d46:	bf04      	itt	eq
 8007d48:	6819      	ldreq	r1, [r3, #0]
 8007d4a:	685b      	ldreq	r3, [r3, #4]
 8007d4c:	6063      	str	r3, [r4, #4]
 8007d4e:	bf04      	itt	eq
 8007d50:	1949      	addeq	r1, r1, r5
 8007d52:	6021      	streq	r1, [r4, #0]
 8007d54:	6054      	str	r4, [r2, #4]
 8007d56:	e7c7      	b.n	8007ce8 <_free_r+0x28>
 8007d58:	b003      	add	sp, #12
 8007d5a:	bd30      	pop	{r4, r5, pc}
 8007d5c:	200002b8 	.word	0x200002b8

08007d60 <_malloc_r>:
 8007d60:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007d62:	1ccd      	adds	r5, r1, #3
 8007d64:	f025 0503 	bic.w	r5, r5, #3
 8007d68:	3508      	adds	r5, #8
 8007d6a:	2d0c      	cmp	r5, #12
 8007d6c:	bf38      	it	cc
 8007d6e:	250c      	movcc	r5, #12
 8007d70:	2d00      	cmp	r5, #0
 8007d72:	4606      	mov	r6, r0
 8007d74:	db01      	blt.n	8007d7a <_malloc_r+0x1a>
 8007d76:	42a9      	cmp	r1, r5
 8007d78:	d903      	bls.n	8007d82 <_malloc_r+0x22>
 8007d7a:	230c      	movs	r3, #12
 8007d7c:	6033      	str	r3, [r6, #0]
 8007d7e:	2000      	movs	r0, #0
 8007d80:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007d82:	f000 fa0f 	bl	80081a4 <__malloc_lock>
 8007d86:	4921      	ldr	r1, [pc, #132]	; (8007e0c <_malloc_r+0xac>)
 8007d88:	680a      	ldr	r2, [r1, #0]
 8007d8a:	4614      	mov	r4, r2
 8007d8c:	b99c      	cbnz	r4, 8007db6 <_malloc_r+0x56>
 8007d8e:	4f20      	ldr	r7, [pc, #128]	; (8007e10 <_malloc_r+0xb0>)
 8007d90:	683b      	ldr	r3, [r7, #0]
 8007d92:	b923      	cbnz	r3, 8007d9e <_malloc_r+0x3e>
 8007d94:	4621      	mov	r1, r4
 8007d96:	4630      	mov	r0, r6
 8007d98:	f000 f998 	bl	80080cc <_sbrk_r>
 8007d9c:	6038      	str	r0, [r7, #0]
 8007d9e:	4629      	mov	r1, r5
 8007da0:	4630      	mov	r0, r6
 8007da2:	f000 f993 	bl	80080cc <_sbrk_r>
 8007da6:	1c43      	adds	r3, r0, #1
 8007da8:	d123      	bne.n	8007df2 <_malloc_r+0x92>
 8007daa:	230c      	movs	r3, #12
 8007dac:	6033      	str	r3, [r6, #0]
 8007dae:	4630      	mov	r0, r6
 8007db0:	f000 f9fe 	bl	80081b0 <__malloc_unlock>
 8007db4:	e7e3      	b.n	8007d7e <_malloc_r+0x1e>
 8007db6:	6823      	ldr	r3, [r4, #0]
 8007db8:	1b5b      	subs	r3, r3, r5
 8007dba:	d417      	bmi.n	8007dec <_malloc_r+0x8c>
 8007dbc:	2b0b      	cmp	r3, #11
 8007dbe:	d903      	bls.n	8007dc8 <_malloc_r+0x68>
 8007dc0:	6023      	str	r3, [r4, #0]
 8007dc2:	441c      	add	r4, r3
 8007dc4:	6025      	str	r5, [r4, #0]
 8007dc6:	e004      	b.n	8007dd2 <_malloc_r+0x72>
 8007dc8:	6863      	ldr	r3, [r4, #4]
 8007dca:	42a2      	cmp	r2, r4
 8007dcc:	bf0c      	ite	eq
 8007dce:	600b      	streq	r3, [r1, #0]
 8007dd0:	6053      	strne	r3, [r2, #4]
 8007dd2:	4630      	mov	r0, r6
 8007dd4:	f000 f9ec 	bl	80081b0 <__malloc_unlock>
 8007dd8:	f104 000b 	add.w	r0, r4, #11
 8007ddc:	1d23      	adds	r3, r4, #4
 8007dde:	f020 0007 	bic.w	r0, r0, #7
 8007de2:	1ac2      	subs	r2, r0, r3
 8007de4:	d0cc      	beq.n	8007d80 <_malloc_r+0x20>
 8007de6:	1a1b      	subs	r3, r3, r0
 8007de8:	50a3      	str	r3, [r4, r2]
 8007dea:	e7c9      	b.n	8007d80 <_malloc_r+0x20>
 8007dec:	4622      	mov	r2, r4
 8007dee:	6864      	ldr	r4, [r4, #4]
 8007df0:	e7cc      	b.n	8007d8c <_malloc_r+0x2c>
 8007df2:	1cc4      	adds	r4, r0, #3
 8007df4:	f024 0403 	bic.w	r4, r4, #3
 8007df8:	42a0      	cmp	r0, r4
 8007dfa:	d0e3      	beq.n	8007dc4 <_malloc_r+0x64>
 8007dfc:	1a21      	subs	r1, r4, r0
 8007dfe:	4630      	mov	r0, r6
 8007e00:	f000 f964 	bl	80080cc <_sbrk_r>
 8007e04:	3001      	adds	r0, #1
 8007e06:	d1dd      	bne.n	8007dc4 <_malloc_r+0x64>
 8007e08:	e7cf      	b.n	8007daa <_malloc_r+0x4a>
 8007e0a:	bf00      	nop
 8007e0c:	200002b8 	.word	0x200002b8
 8007e10:	200002bc 	.word	0x200002bc

08007e14 <__ssputs_r>:
 8007e14:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007e18:	688e      	ldr	r6, [r1, #8]
 8007e1a:	429e      	cmp	r6, r3
 8007e1c:	4682      	mov	sl, r0
 8007e1e:	460c      	mov	r4, r1
 8007e20:	4690      	mov	r8, r2
 8007e22:	461f      	mov	r7, r3
 8007e24:	d838      	bhi.n	8007e98 <__ssputs_r+0x84>
 8007e26:	898a      	ldrh	r2, [r1, #12]
 8007e28:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8007e2c:	d032      	beq.n	8007e94 <__ssputs_r+0x80>
 8007e2e:	6825      	ldr	r5, [r4, #0]
 8007e30:	6909      	ldr	r1, [r1, #16]
 8007e32:	eba5 0901 	sub.w	r9, r5, r1
 8007e36:	6965      	ldr	r5, [r4, #20]
 8007e38:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8007e3c:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8007e40:	3301      	adds	r3, #1
 8007e42:	444b      	add	r3, r9
 8007e44:	106d      	asrs	r5, r5, #1
 8007e46:	429d      	cmp	r5, r3
 8007e48:	bf38      	it	cc
 8007e4a:	461d      	movcc	r5, r3
 8007e4c:	0553      	lsls	r3, r2, #21
 8007e4e:	d531      	bpl.n	8007eb4 <__ssputs_r+0xa0>
 8007e50:	4629      	mov	r1, r5
 8007e52:	f7ff ff85 	bl	8007d60 <_malloc_r>
 8007e56:	4606      	mov	r6, r0
 8007e58:	b950      	cbnz	r0, 8007e70 <__ssputs_r+0x5c>
 8007e5a:	230c      	movs	r3, #12
 8007e5c:	f8ca 3000 	str.w	r3, [sl]
 8007e60:	89a3      	ldrh	r3, [r4, #12]
 8007e62:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007e66:	81a3      	strh	r3, [r4, #12]
 8007e68:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8007e6c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007e70:	6921      	ldr	r1, [r4, #16]
 8007e72:	464a      	mov	r2, r9
 8007e74:	f7ff fb88 	bl	8007588 <memcpy>
 8007e78:	89a3      	ldrh	r3, [r4, #12]
 8007e7a:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8007e7e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007e82:	81a3      	strh	r3, [r4, #12]
 8007e84:	6126      	str	r6, [r4, #16]
 8007e86:	6165      	str	r5, [r4, #20]
 8007e88:	444e      	add	r6, r9
 8007e8a:	eba5 0509 	sub.w	r5, r5, r9
 8007e8e:	6026      	str	r6, [r4, #0]
 8007e90:	60a5      	str	r5, [r4, #8]
 8007e92:	463e      	mov	r6, r7
 8007e94:	42be      	cmp	r6, r7
 8007e96:	d900      	bls.n	8007e9a <__ssputs_r+0x86>
 8007e98:	463e      	mov	r6, r7
 8007e9a:	4632      	mov	r2, r6
 8007e9c:	6820      	ldr	r0, [r4, #0]
 8007e9e:	4641      	mov	r1, r8
 8007ea0:	f000 f966 	bl	8008170 <memmove>
 8007ea4:	68a3      	ldr	r3, [r4, #8]
 8007ea6:	6822      	ldr	r2, [r4, #0]
 8007ea8:	1b9b      	subs	r3, r3, r6
 8007eaa:	4432      	add	r2, r6
 8007eac:	60a3      	str	r3, [r4, #8]
 8007eae:	6022      	str	r2, [r4, #0]
 8007eb0:	2000      	movs	r0, #0
 8007eb2:	e7db      	b.n	8007e6c <__ssputs_r+0x58>
 8007eb4:	462a      	mov	r2, r5
 8007eb6:	f000 f981 	bl	80081bc <_realloc_r>
 8007eba:	4606      	mov	r6, r0
 8007ebc:	2800      	cmp	r0, #0
 8007ebe:	d1e1      	bne.n	8007e84 <__ssputs_r+0x70>
 8007ec0:	6921      	ldr	r1, [r4, #16]
 8007ec2:	4650      	mov	r0, sl
 8007ec4:	f7ff fefc 	bl	8007cc0 <_free_r>
 8007ec8:	e7c7      	b.n	8007e5a <__ssputs_r+0x46>
	...

08007ecc <_svfiprintf_r>:
 8007ecc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007ed0:	4698      	mov	r8, r3
 8007ed2:	898b      	ldrh	r3, [r1, #12]
 8007ed4:	061b      	lsls	r3, r3, #24
 8007ed6:	b09d      	sub	sp, #116	; 0x74
 8007ed8:	4607      	mov	r7, r0
 8007eda:	460d      	mov	r5, r1
 8007edc:	4614      	mov	r4, r2
 8007ede:	d50e      	bpl.n	8007efe <_svfiprintf_r+0x32>
 8007ee0:	690b      	ldr	r3, [r1, #16]
 8007ee2:	b963      	cbnz	r3, 8007efe <_svfiprintf_r+0x32>
 8007ee4:	2140      	movs	r1, #64	; 0x40
 8007ee6:	f7ff ff3b 	bl	8007d60 <_malloc_r>
 8007eea:	6028      	str	r0, [r5, #0]
 8007eec:	6128      	str	r0, [r5, #16]
 8007eee:	b920      	cbnz	r0, 8007efa <_svfiprintf_r+0x2e>
 8007ef0:	230c      	movs	r3, #12
 8007ef2:	603b      	str	r3, [r7, #0]
 8007ef4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8007ef8:	e0d1      	b.n	800809e <_svfiprintf_r+0x1d2>
 8007efa:	2340      	movs	r3, #64	; 0x40
 8007efc:	616b      	str	r3, [r5, #20]
 8007efe:	2300      	movs	r3, #0
 8007f00:	9309      	str	r3, [sp, #36]	; 0x24
 8007f02:	2320      	movs	r3, #32
 8007f04:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8007f08:	f8cd 800c 	str.w	r8, [sp, #12]
 8007f0c:	2330      	movs	r3, #48	; 0x30
 8007f0e:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 80080b8 <_svfiprintf_r+0x1ec>
 8007f12:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8007f16:	f04f 0901 	mov.w	r9, #1
 8007f1a:	4623      	mov	r3, r4
 8007f1c:	469a      	mov	sl, r3
 8007f1e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8007f22:	b10a      	cbz	r2, 8007f28 <_svfiprintf_r+0x5c>
 8007f24:	2a25      	cmp	r2, #37	; 0x25
 8007f26:	d1f9      	bne.n	8007f1c <_svfiprintf_r+0x50>
 8007f28:	ebba 0b04 	subs.w	fp, sl, r4
 8007f2c:	d00b      	beq.n	8007f46 <_svfiprintf_r+0x7a>
 8007f2e:	465b      	mov	r3, fp
 8007f30:	4622      	mov	r2, r4
 8007f32:	4629      	mov	r1, r5
 8007f34:	4638      	mov	r0, r7
 8007f36:	f7ff ff6d 	bl	8007e14 <__ssputs_r>
 8007f3a:	3001      	adds	r0, #1
 8007f3c:	f000 80aa 	beq.w	8008094 <_svfiprintf_r+0x1c8>
 8007f40:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007f42:	445a      	add	r2, fp
 8007f44:	9209      	str	r2, [sp, #36]	; 0x24
 8007f46:	f89a 3000 	ldrb.w	r3, [sl]
 8007f4a:	2b00      	cmp	r3, #0
 8007f4c:	f000 80a2 	beq.w	8008094 <_svfiprintf_r+0x1c8>
 8007f50:	2300      	movs	r3, #0
 8007f52:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8007f56:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8007f5a:	f10a 0a01 	add.w	sl, sl, #1
 8007f5e:	9304      	str	r3, [sp, #16]
 8007f60:	9307      	str	r3, [sp, #28]
 8007f62:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8007f66:	931a      	str	r3, [sp, #104]	; 0x68
 8007f68:	4654      	mov	r4, sl
 8007f6a:	2205      	movs	r2, #5
 8007f6c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007f70:	4851      	ldr	r0, [pc, #324]	; (80080b8 <_svfiprintf_r+0x1ec>)
 8007f72:	f7f8 f955 	bl	8000220 <memchr>
 8007f76:	9a04      	ldr	r2, [sp, #16]
 8007f78:	b9d8      	cbnz	r0, 8007fb2 <_svfiprintf_r+0xe6>
 8007f7a:	06d0      	lsls	r0, r2, #27
 8007f7c:	bf44      	itt	mi
 8007f7e:	2320      	movmi	r3, #32
 8007f80:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8007f84:	0711      	lsls	r1, r2, #28
 8007f86:	bf44      	itt	mi
 8007f88:	232b      	movmi	r3, #43	; 0x2b
 8007f8a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8007f8e:	f89a 3000 	ldrb.w	r3, [sl]
 8007f92:	2b2a      	cmp	r3, #42	; 0x2a
 8007f94:	d015      	beq.n	8007fc2 <_svfiprintf_r+0xf6>
 8007f96:	9a07      	ldr	r2, [sp, #28]
 8007f98:	4654      	mov	r4, sl
 8007f9a:	2000      	movs	r0, #0
 8007f9c:	f04f 0c0a 	mov.w	ip, #10
 8007fa0:	4621      	mov	r1, r4
 8007fa2:	f811 3b01 	ldrb.w	r3, [r1], #1
 8007fa6:	3b30      	subs	r3, #48	; 0x30
 8007fa8:	2b09      	cmp	r3, #9
 8007faa:	d94e      	bls.n	800804a <_svfiprintf_r+0x17e>
 8007fac:	b1b0      	cbz	r0, 8007fdc <_svfiprintf_r+0x110>
 8007fae:	9207      	str	r2, [sp, #28]
 8007fb0:	e014      	b.n	8007fdc <_svfiprintf_r+0x110>
 8007fb2:	eba0 0308 	sub.w	r3, r0, r8
 8007fb6:	fa09 f303 	lsl.w	r3, r9, r3
 8007fba:	4313      	orrs	r3, r2
 8007fbc:	9304      	str	r3, [sp, #16]
 8007fbe:	46a2      	mov	sl, r4
 8007fc0:	e7d2      	b.n	8007f68 <_svfiprintf_r+0x9c>
 8007fc2:	9b03      	ldr	r3, [sp, #12]
 8007fc4:	1d19      	adds	r1, r3, #4
 8007fc6:	681b      	ldr	r3, [r3, #0]
 8007fc8:	9103      	str	r1, [sp, #12]
 8007fca:	2b00      	cmp	r3, #0
 8007fcc:	bfbb      	ittet	lt
 8007fce:	425b      	neglt	r3, r3
 8007fd0:	f042 0202 	orrlt.w	r2, r2, #2
 8007fd4:	9307      	strge	r3, [sp, #28]
 8007fd6:	9307      	strlt	r3, [sp, #28]
 8007fd8:	bfb8      	it	lt
 8007fda:	9204      	strlt	r2, [sp, #16]
 8007fdc:	7823      	ldrb	r3, [r4, #0]
 8007fde:	2b2e      	cmp	r3, #46	; 0x2e
 8007fe0:	d10c      	bne.n	8007ffc <_svfiprintf_r+0x130>
 8007fe2:	7863      	ldrb	r3, [r4, #1]
 8007fe4:	2b2a      	cmp	r3, #42	; 0x2a
 8007fe6:	d135      	bne.n	8008054 <_svfiprintf_r+0x188>
 8007fe8:	9b03      	ldr	r3, [sp, #12]
 8007fea:	1d1a      	adds	r2, r3, #4
 8007fec:	681b      	ldr	r3, [r3, #0]
 8007fee:	9203      	str	r2, [sp, #12]
 8007ff0:	2b00      	cmp	r3, #0
 8007ff2:	bfb8      	it	lt
 8007ff4:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8007ff8:	3402      	adds	r4, #2
 8007ffa:	9305      	str	r3, [sp, #20]
 8007ffc:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 80080c8 <_svfiprintf_r+0x1fc>
 8008000:	7821      	ldrb	r1, [r4, #0]
 8008002:	2203      	movs	r2, #3
 8008004:	4650      	mov	r0, sl
 8008006:	f7f8 f90b 	bl	8000220 <memchr>
 800800a:	b140      	cbz	r0, 800801e <_svfiprintf_r+0x152>
 800800c:	2340      	movs	r3, #64	; 0x40
 800800e:	eba0 000a 	sub.w	r0, r0, sl
 8008012:	fa03 f000 	lsl.w	r0, r3, r0
 8008016:	9b04      	ldr	r3, [sp, #16]
 8008018:	4303      	orrs	r3, r0
 800801a:	3401      	adds	r4, #1
 800801c:	9304      	str	r3, [sp, #16]
 800801e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008022:	4826      	ldr	r0, [pc, #152]	; (80080bc <_svfiprintf_r+0x1f0>)
 8008024:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8008028:	2206      	movs	r2, #6
 800802a:	f7f8 f8f9 	bl	8000220 <memchr>
 800802e:	2800      	cmp	r0, #0
 8008030:	d038      	beq.n	80080a4 <_svfiprintf_r+0x1d8>
 8008032:	4b23      	ldr	r3, [pc, #140]	; (80080c0 <_svfiprintf_r+0x1f4>)
 8008034:	bb1b      	cbnz	r3, 800807e <_svfiprintf_r+0x1b2>
 8008036:	9b03      	ldr	r3, [sp, #12]
 8008038:	3307      	adds	r3, #7
 800803a:	f023 0307 	bic.w	r3, r3, #7
 800803e:	3308      	adds	r3, #8
 8008040:	9303      	str	r3, [sp, #12]
 8008042:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008044:	4433      	add	r3, r6
 8008046:	9309      	str	r3, [sp, #36]	; 0x24
 8008048:	e767      	b.n	8007f1a <_svfiprintf_r+0x4e>
 800804a:	fb0c 3202 	mla	r2, ip, r2, r3
 800804e:	460c      	mov	r4, r1
 8008050:	2001      	movs	r0, #1
 8008052:	e7a5      	b.n	8007fa0 <_svfiprintf_r+0xd4>
 8008054:	2300      	movs	r3, #0
 8008056:	3401      	adds	r4, #1
 8008058:	9305      	str	r3, [sp, #20]
 800805a:	4619      	mov	r1, r3
 800805c:	f04f 0c0a 	mov.w	ip, #10
 8008060:	4620      	mov	r0, r4
 8008062:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008066:	3a30      	subs	r2, #48	; 0x30
 8008068:	2a09      	cmp	r2, #9
 800806a:	d903      	bls.n	8008074 <_svfiprintf_r+0x1a8>
 800806c:	2b00      	cmp	r3, #0
 800806e:	d0c5      	beq.n	8007ffc <_svfiprintf_r+0x130>
 8008070:	9105      	str	r1, [sp, #20]
 8008072:	e7c3      	b.n	8007ffc <_svfiprintf_r+0x130>
 8008074:	fb0c 2101 	mla	r1, ip, r1, r2
 8008078:	4604      	mov	r4, r0
 800807a:	2301      	movs	r3, #1
 800807c:	e7f0      	b.n	8008060 <_svfiprintf_r+0x194>
 800807e:	ab03      	add	r3, sp, #12
 8008080:	9300      	str	r3, [sp, #0]
 8008082:	462a      	mov	r2, r5
 8008084:	4b0f      	ldr	r3, [pc, #60]	; (80080c4 <_svfiprintf_r+0x1f8>)
 8008086:	a904      	add	r1, sp, #16
 8008088:	4638      	mov	r0, r7
 800808a:	f7fe f80d 	bl	80060a8 <_printf_float>
 800808e:	1c42      	adds	r2, r0, #1
 8008090:	4606      	mov	r6, r0
 8008092:	d1d6      	bne.n	8008042 <_svfiprintf_r+0x176>
 8008094:	89ab      	ldrh	r3, [r5, #12]
 8008096:	065b      	lsls	r3, r3, #25
 8008098:	f53f af2c 	bmi.w	8007ef4 <_svfiprintf_r+0x28>
 800809c:	9809      	ldr	r0, [sp, #36]	; 0x24
 800809e:	b01d      	add	sp, #116	; 0x74
 80080a0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80080a4:	ab03      	add	r3, sp, #12
 80080a6:	9300      	str	r3, [sp, #0]
 80080a8:	462a      	mov	r2, r5
 80080aa:	4b06      	ldr	r3, [pc, #24]	; (80080c4 <_svfiprintf_r+0x1f8>)
 80080ac:	a904      	add	r1, sp, #16
 80080ae:	4638      	mov	r0, r7
 80080b0:	f7fe fa9e 	bl	80065f0 <_printf_i>
 80080b4:	e7eb      	b.n	800808e <_svfiprintf_r+0x1c2>
 80080b6:	bf00      	nop
 80080b8:	08008fd4 	.word	0x08008fd4
 80080bc:	08008fde 	.word	0x08008fde
 80080c0:	080060a9 	.word	0x080060a9
 80080c4:	08007e15 	.word	0x08007e15
 80080c8:	08008fda 	.word	0x08008fda

080080cc <_sbrk_r>:
 80080cc:	b538      	push	{r3, r4, r5, lr}
 80080ce:	4d06      	ldr	r5, [pc, #24]	; (80080e8 <_sbrk_r+0x1c>)
 80080d0:	2300      	movs	r3, #0
 80080d2:	4604      	mov	r4, r0
 80080d4:	4608      	mov	r0, r1
 80080d6:	602b      	str	r3, [r5, #0]
 80080d8:	f7fa f9aa 	bl	8002430 <_sbrk>
 80080dc:	1c43      	adds	r3, r0, #1
 80080de:	d102      	bne.n	80080e6 <_sbrk_r+0x1a>
 80080e0:	682b      	ldr	r3, [r5, #0]
 80080e2:	b103      	cbz	r3, 80080e6 <_sbrk_r+0x1a>
 80080e4:	6023      	str	r3, [r4, #0]
 80080e6:	bd38      	pop	{r3, r4, r5, pc}
 80080e8:	2000054c 	.word	0x2000054c

080080ec <__assert_func>:
 80080ec:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80080ee:	4614      	mov	r4, r2
 80080f0:	461a      	mov	r2, r3
 80080f2:	4b09      	ldr	r3, [pc, #36]	; (8008118 <__assert_func+0x2c>)
 80080f4:	681b      	ldr	r3, [r3, #0]
 80080f6:	4605      	mov	r5, r0
 80080f8:	68d8      	ldr	r0, [r3, #12]
 80080fa:	b14c      	cbz	r4, 8008110 <__assert_func+0x24>
 80080fc:	4b07      	ldr	r3, [pc, #28]	; (800811c <__assert_func+0x30>)
 80080fe:	9100      	str	r1, [sp, #0]
 8008100:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8008104:	4906      	ldr	r1, [pc, #24]	; (8008120 <__assert_func+0x34>)
 8008106:	462b      	mov	r3, r5
 8008108:	f000 f80e 	bl	8008128 <fiprintf>
 800810c:	f000 faa4 	bl	8008658 <abort>
 8008110:	4b04      	ldr	r3, [pc, #16]	; (8008124 <__assert_func+0x38>)
 8008112:	461c      	mov	r4, r3
 8008114:	e7f3      	b.n	80080fe <__assert_func+0x12>
 8008116:	bf00      	nop
 8008118:	20000028 	.word	0x20000028
 800811c:	08008fe5 	.word	0x08008fe5
 8008120:	08008ff2 	.word	0x08008ff2
 8008124:	08009020 	.word	0x08009020

08008128 <fiprintf>:
 8008128:	b40e      	push	{r1, r2, r3}
 800812a:	b503      	push	{r0, r1, lr}
 800812c:	4601      	mov	r1, r0
 800812e:	ab03      	add	r3, sp, #12
 8008130:	4805      	ldr	r0, [pc, #20]	; (8008148 <fiprintf+0x20>)
 8008132:	f853 2b04 	ldr.w	r2, [r3], #4
 8008136:	6800      	ldr	r0, [r0, #0]
 8008138:	9301      	str	r3, [sp, #4]
 800813a:	f000 f88f 	bl	800825c <_vfiprintf_r>
 800813e:	b002      	add	sp, #8
 8008140:	f85d eb04 	ldr.w	lr, [sp], #4
 8008144:	b003      	add	sp, #12
 8008146:	4770      	bx	lr
 8008148:	20000028 	.word	0x20000028

0800814c <__ascii_mbtowc>:
 800814c:	b082      	sub	sp, #8
 800814e:	b901      	cbnz	r1, 8008152 <__ascii_mbtowc+0x6>
 8008150:	a901      	add	r1, sp, #4
 8008152:	b142      	cbz	r2, 8008166 <__ascii_mbtowc+0x1a>
 8008154:	b14b      	cbz	r3, 800816a <__ascii_mbtowc+0x1e>
 8008156:	7813      	ldrb	r3, [r2, #0]
 8008158:	600b      	str	r3, [r1, #0]
 800815a:	7812      	ldrb	r2, [r2, #0]
 800815c:	1e10      	subs	r0, r2, #0
 800815e:	bf18      	it	ne
 8008160:	2001      	movne	r0, #1
 8008162:	b002      	add	sp, #8
 8008164:	4770      	bx	lr
 8008166:	4610      	mov	r0, r2
 8008168:	e7fb      	b.n	8008162 <__ascii_mbtowc+0x16>
 800816a:	f06f 0001 	mvn.w	r0, #1
 800816e:	e7f8      	b.n	8008162 <__ascii_mbtowc+0x16>

08008170 <memmove>:
 8008170:	4288      	cmp	r0, r1
 8008172:	b510      	push	{r4, lr}
 8008174:	eb01 0402 	add.w	r4, r1, r2
 8008178:	d902      	bls.n	8008180 <memmove+0x10>
 800817a:	4284      	cmp	r4, r0
 800817c:	4623      	mov	r3, r4
 800817e:	d807      	bhi.n	8008190 <memmove+0x20>
 8008180:	1e43      	subs	r3, r0, #1
 8008182:	42a1      	cmp	r1, r4
 8008184:	d008      	beq.n	8008198 <memmove+0x28>
 8008186:	f811 2b01 	ldrb.w	r2, [r1], #1
 800818a:	f803 2f01 	strb.w	r2, [r3, #1]!
 800818e:	e7f8      	b.n	8008182 <memmove+0x12>
 8008190:	4402      	add	r2, r0
 8008192:	4601      	mov	r1, r0
 8008194:	428a      	cmp	r2, r1
 8008196:	d100      	bne.n	800819a <memmove+0x2a>
 8008198:	bd10      	pop	{r4, pc}
 800819a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800819e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80081a2:	e7f7      	b.n	8008194 <memmove+0x24>

080081a4 <__malloc_lock>:
 80081a4:	4801      	ldr	r0, [pc, #4]	; (80081ac <__malloc_lock+0x8>)
 80081a6:	f000 bc17 	b.w	80089d8 <__retarget_lock_acquire_recursive>
 80081aa:	bf00      	nop
 80081ac:	20000554 	.word	0x20000554

080081b0 <__malloc_unlock>:
 80081b0:	4801      	ldr	r0, [pc, #4]	; (80081b8 <__malloc_unlock+0x8>)
 80081b2:	f000 bc12 	b.w	80089da <__retarget_lock_release_recursive>
 80081b6:	bf00      	nop
 80081b8:	20000554 	.word	0x20000554

080081bc <_realloc_r>:
 80081bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80081be:	4607      	mov	r7, r0
 80081c0:	4614      	mov	r4, r2
 80081c2:	460e      	mov	r6, r1
 80081c4:	b921      	cbnz	r1, 80081d0 <_realloc_r+0x14>
 80081c6:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 80081ca:	4611      	mov	r1, r2
 80081cc:	f7ff bdc8 	b.w	8007d60 <_malloc_r>
 80081d0:	b922      	cbnz	r2, 80081dc <_realloc_r+0x20>
 80081d2:	f7ff fd75 	bl	8007cc0 <_free_r>
 80081d6:	4625      	mov	r5, r4
 80081d8:	4628      	mov	r0, r5
 80081da:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80081dc:	f000 fc62 	bl	8008aa4 <_malloc_usable_size_r>
 80081e0:	42a0      	cmp	r0, r4
 80081e2:	d20f      	bcs.n	8008204 <_realloc_r+0x48>
 80081e4:	4621      	mov	r1, r4
 80081e6:	4638      	mov	r0, r7
 80081e8:	f7ff fdba 	bl	8007d60 <_malloc_r>
 80081ec:	4605      	mov	r5, r0
 80081ee:	2800      	cmp	r0, #0
 80081f0:	d0f2      	beq.n	80081d8 <_realloc_r+0x1c>
 80081f2:	4631      	mov	r1, r6
 80081f4:	4622      	mov	r2, r4
 80081f6:	f7ff f9c7 	bl	8007588 <memcpy>
 80081fa:	4631      	mov	r1, r6
 80081fc:	4638      	mov	r0, r7
 80081fe:	f7ff fd5f 	bl	8007cc0 <_free_r>
 8008202:	e7e9      	b.n	80081d8 <_realloc_r+0x1c>
 8008204:	4635      	mov	r5, r6
 8008206:	e7e7      	b.n	80081d8 <_realloc_r+0x1c>

08008208 <__sfputc_r>:
 8008208:	6893      	ldr	r3, [r2, #8]
 800820a:	3b01      	subs	r3, #1
 800820c:	2b00      	cmp	r3, #0
 800820e:	b410      	push	{r4}
 8008210:	6093      	str	r3, [r2, #8]
 8008212:	da08      	bge.n	8008226 <__sfputc_r+0x1e>
 8008214:	6994      	ldr	r4, [r2, #24]
 8008216:	42a3      	cmp	r3, r4
 8008218:	db01      	blt.n	800821e <__sfputc_r+0x16>
 800821a:	290a      	cmp	r1, #10
 800821c:	d103      	bne.n	8008226 <__sfputc_r+0x1e>
 800821e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8008222:	f000 b94b 	b.w	80084bc <__swbuf_r>
 8008226:	6813      	ldr	r3, [r2, #0]
 8008228:	1c58      	adds	r0, r3, #1
 800822a:	6010      	str	r0, [r2, #0]
 800822c:	7019      	strb	r1, [r3, #0]
 800822e:	4608      	mov	r0, r1
 8008230:	f85d 4b04 	ldr.w	r4, [sp], #4
 8008234:	4770      	bx	lr

08008236 <__sfputs_r>:
 8008236:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008238:	4606      	mov	r6, r0
 800823a:	460f      	mov	r7, r1
 800823c:	4614      	mov	r4, r2
 800823e:	18d5      	adds	r5, r2, r3
 8008240:	42ac      	cmp	r4, r5
 8008242:	d101      	bne.n	8008248 <__sfputs_r+0x12>
 8008244:	2000      	movs	r0, #0
 8008246:	e007      	b.n	8008258 <__sfputs_r+0x22>
 8008248:	f814 1b01 	ldrb.w	r1, [r4], #1
 800824c:	463a      	mov	r2, r7
 800824e:	4630      	mov	r0, r6
 8008250:	f7ff ffda 	bl	8008208 <__sfputc_r>
 8008254:	1c43      	adds	r3, r0, #1
 8008256:	d1f3      	bne.n	8008240 <__sfputs_r+0xa>
 8008258:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800825c <_vfiprintf_r>:
 800825c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008260:	460d      	mov	r5, r1
 8008262:	b09d      	sub	sp, #116	; 0x74
 8008264:	4614      	mov	r4, r2
 8008266:	4698      	mov	r8, r3
 8008268:	4606      	mov	r6, r0
 800826a:	b118      	cbz	r0, 8008274 <_vfiprintf_r+0x18>
 800826c:	6983      	ldr	r3, [r0, #24]
 800826e:	b90b      	cbnz	r3, 8008274 <_vfiprintf_r+0x18>
 8008270:	f000 fb14 	bl	800889c <__sinit>
 8008274:	4b89      	ldr	r3, [pc, #548]	; (800849c <_vfiprintf_r+0x240>)
 8008276:	429d      	cmp	r5, r3
 8008278:	d11b      	bne.n	80082b2 <_vfiprintf_r+0x56>
 800827a:	6875      	ldr	r5, [r6, #4]
 800827c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800827e:	07d9      	lsls	r1, r3, #31
 8008280:	d405      	bmi.n	800828e <_vfiprintf_r+0x32>
 8008282:	89ab      	ldrh	r3, [r5, #12]
 8008284:	059a      	lsls	r2, r3, #22
 8008286:	d402      	bmi.n	800828e <_vfiprintf_r+0x32>
 8008288:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800828a:	f000 fba5 	bl	80089d8 <__retarget_lock_acquire_recursive>
 800828e:	89ab      	ldrh	r3, [r5, #12]
 8008290:	071b      	lsls	r3, r3, #28
 8008292:	d501      	bpl.n	8008298 <_vfiprintf_r+0x3c>
 8008294:	692b      	ldr	r3, [r5, #16]
 8008296:	b9eb      	cbnz	r3, 80082d4 <_vfiprintf_r+0x78>
 8008298:	4629      	mov	r1, r5
 800829a:	4630      	mov	r0, r6
 800829c:	f000 f96e 	bl	800857c <__swsetup_r>
 80082a0:	b1c0      	cbz	r0, 80082d4 <_vfiprintf_r+0x78>
 80082a2:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80082a4:	07dc      	lsls	r4, r3, #31
 80082a6:	d50e      	bpl.n	80082c6 <_vfiprintf_r+0x6a>
 80082a8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80082ac:	b01d      	add	sp, #116	; 0x74
 80082ae:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80082b2:	4b7b      	ldr	r3, [pc, #492]	; (80084a0 <_vfiprintf_r+0x244>)
 80082b4:	429d      	cmp	r5, r3
 80082b6:	d101      	bne.n	80082bc <_vfiprintf_r+0x60>
 80082b8:	68b5      	ldr	r5, [r6, #8]
 80082ba:	e7df      	b.n	800827c <_vfiprintf_r+0x20>
 80082bc:	4b79      	ldr	r3, [pc, #484]	; (80084a4 <_vfiprintf_r+0x248>)
 80082be:	429d      	cmp	r5, r3
 80082c0:	bf08      	it	eq
 80082c2:	68f5      	ldreq	r5, [r6, #12]
 80082c4:	e7da      	b.n	800827c <_vfiprintf_r+0x20>
 80082c6:	89ab      	ldrh	r3, [r5, #12]
 80082c8:	0598      	lsls	r0, r3, #22
 80082ca:	d4ed      	bmi.n	80082a8 <_vfiprintf_r+0x4c>
 80082cc:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80082ce:	f000 fb84 	bl	80089da <__retarget_lock_release_recursive>
 80082d2:	e7e9      	b.n	80082a8 <_vfiprintf_r+0x4c>
 80082d4:	2300      	movs	r3, #0
 80082d6:	9309      	str	r3, [sp, #36]	; 0x24
 80082d8:	2320      	movs	r3, #32
 80082da:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80082de:	f8cd 800c 	str.w	r8, [sp, #12]
 80082e2:	2330      	movs	r3, #48	; 0x30
 80082e4:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 80084a8 <_vfiprintf_r+0x24c>
 80082e8:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80082ec:	f04f 0901 	mov.w	r9, #1
 80082f0:	4623      	mov	r3, r4
 80082f2:	469a      	mov	sl, r3
 80082f4:	f813 2b01 	ldrb.w	r2, [r3], #1
 80082f8:	b10a      	cbz	r2, 80082fe <_vfiprintf_r+0xa2>
 80082fa:	2a25      	cmp	r2, #37	; 0x25
 80082fc:	d1f9      	bne.n	80082f2 <_vfiprintf_r+0x96>
 80082fe:	ebba 0b04 	subs.w	fp, sl, r4
 8008302:	d00b      	beq.n	800831c <_vfiprintf_r+0xc0>
 8008304:	465b      	mov	r3, fp
 8008306:	4622      	mov	r2, r4
 8008308:	4629      	mov	r1, r5
 800830a:	4630      	mov	r0, r6
 800830c:	f7ff ff93 	bl	8008236 <__sfputs_r>
 8008310:	3001      	adds	r0, #1
 8008312:	f000 80aa 	beq.w	800846a <_vfiprintf_r+0x20e>
 8008316:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8008318:	445a      	add	r2, fp
 800831a:	9209      	str	r2, [sp, #36]	; 0x24
 800831c:	f89a 3000 	ldrb.w	r3, [sl]
 8008320:	2b00      	cmp	r3, #0
 8008322:	f000 80a2 	beq.w	800846a <_vfiprintf_r+0x20e>
 8008326:	2300      	movs	r3, #0
 8008328:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800832c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8008330:	f10a 0a01 	add.w	sl, sl, #1
 8008334:	9304      	str	r3, [sp, #16]
 8008336:	9307      	str	r3, [sp, #28]
 8008338:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800833c:	931a      	str	r3, [sp, #104]	; 0x68
 800833e:	4654      	mov	r4, sl
 8008340:	2205      	movs	r2, #5
 8008342:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008346:	4858      	ldr	r0, [pc, #352]	; (80084a8 <_vfiprintf_r+0x24c>)
 8008348:	f7f7 ff6a 	bl	8000220 <memchr>
 800834c:	9a04      	ldr	r2, [sp, #16]
 800834e:	b9d8      	cbnz	r0, 8008388 <_vfiprintf_r+0x12c>
 8008350:	06d1      	lsls	r1, r2, #27
 8008352:	bf44      	itt	mi
 8008354:	2320      	movmi	r3, #32
 8008356:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800835a:	0713      	lsls	r3, r2, #28
 800835c:	bf44      	itt	mi
 800835e:	232b      	movmi	r3, #43	; 0x2b
 8008360:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008364:	f89a 3000 	ldrb.w	r3, [sl]
 8008368:	2b2a      	cmp	r3, #42	; 0x2a
 800836a:	d015      	beq.n	8008398 <_vfiprintf_r+0x13c>
 800836c:	9a07      	ldr	r2, [sp, #28]
 800836e:	4654      	mov	r4, sl
 8008370:	2000      	movs	r0, #0
 8008372:	f04f 0c0a 	mov.w	ip, #10
 8008376:	4621      	mov	r1, r4
 8008378:	f811 3b01 	ldrb.w	r3, [r1], #1
 800837c:	3b30      	subs	r3, #48	; 0x30
 800837e:	2b09      	cmp	r3, #9
 8008380:	d94e      	bls.n	8008420 <_vfiprintf_r+0x1c4>
 8008382:	b1b0      	cbz	r0, 80083b2 <_vfiprintf_r+0x156>
 8008384:	9207      	str	r2, [sp, #28]
 8008386:	e014      	b.n	80083b2 <_vfiprintf_r+0x156>
 8008388:	eba0 0308 	sub.w	r3, r0, r8
 800838c:	fa09 f303 	lsl.w	r3, r9, r3
 8008390:	4313      	orrs	r3, r2
 8008392:	9304      	str	r3, [sp, #16]
 8008394:	46a2      	mov	sl, r4
 8008396:	e7d2      	b.n	800833e <_vfiprintf_r+0xe2>
 8008398:	9b03      	ldr	r3, [sp, #12]
 800839a:	1d19      	adds	r1, r3, #4
 800839c:	681b      	ldr	r3, [r3, #0]
 800839e:	9103      	str	r1, [sp, #12]
 80083a0:	2b00      	cmp	r3, #0
 80083a2:	bfbb      	ittet	lt
 80083a4:	425b      	neglt	r3, r3
 80083a6:	f042 0202 	orrlt.w	r2, r2, #2
 80083aa:	9307      	strge	r3, [sp, #28]
 80083ac:	9307      	strlt	r3, [sp, #28]
 80083ae:	bfb8      	it	lt
 80083b0:	9204      	strlt	r2, [sp, #16]
 80083b2:	7823      	ldrb	r3, [r4, #0]
 80083b4:	2b2e      	cmp	r3, #46	; 0x2e
 80083b6:	d10c      	bne.n	80083d2 <_vfiprintf_r+0x176>
 80083b8:	7863      	ldrb	r3, [r4, #1]
 80083ba:	2b2a      	cmp	r3, #42	; 0x2a
 80083bc:	d135      	bne.n	800842a <_vfiprintf_r+0x1ce>
 80083be:	9b03      	ldr	r3, [sp, #12]
 80083c0:	1d1a      	adds	r2, r3, #4
 80083c2:	681b      	ldr	r3, [r3, #0]
 80083c4:	9203      	str	r2, [sp, #12]
 80083c6:	2b00      	cmp	r3, #0
 80083c8:	bfb8      	it	lt
 80083ca:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 80083ce:	3402      	adds	r4, #2
 80083d0:	9305      	str	r3, [sp, #20]
 80083d2:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 80084b8 <_vfiprintf_r+0x25c>
 80083d6:	7821      	ldrb	r1, [r4, #0]
 80083d8:	2203      	movs	r2, #3
 80083da:	4650      	mov	r0, sl
 80083dc:	f7f7 ff20 	bl	8000220 <memchr>
 80083e0:	b140      	cbz	r0, 80083f4 <_vfiprintf_r+0x198>
 80083e2:	2340      	movs	r3, #64	; 0x40
 80083e4:	eba0 000a 	sub.w	r0, r0, sl
 80083e8:	fa03 f000 	lsl.w	r0, r3, r0
 80083ec:	9b04      	ldr	r3, [sp, #16]
 80083ee:	4303      	orrs	r3, r0
 80083f0:	3401      	adds	r4, #1
 80083f2:	9304      	str	r3, [sp, #16]
 80083f4:	f814 1b01 	ldrb.w	r1, [r4], #1
 80083f8:	482c      	ldr	r0, [pc, #176]	; (80084ac <_vfiprintf_r+0x250>)
 80083fa:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80083fe:	2206      	movs	r2, #6
 8008400:	f7f7 ff0e 	bl	8000220 <memchr>
 8008404:	2800      	cmp	r0, #0
 8008406:	d03f      	beq.n	8008488 <_vfiprintf_r+0x22c>
 8008408:	4b29      	ldr	r3, [pc, #164]	; (80084b0 <_vfiprintf_r+0x254>)
 800840a:	bb1b      	cbnz	r3, 8008454 <_vfiprintf_r+0x1f8>
 800840c:	9b03      	ldr	r3, [sp, #12]
 800840e:	3307      	adds	r3, #7
 8008410:	f023 0307 	bic.w	r3, r3, #7
 8008414:	3308      	adds	r3, #8
 8008416:	9303      	str	r3, [sp, #12]
 8008418:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800841a:	443b      	add	r3, r7
 800841c:	9309      	str	r3, [sp, #36]	; 0x24
 800841e:	e767      	b.n	80082f0 <_vfiprintf_r+0x94>
 8008420:	fb0c 3202 	mla	r2, ip, r2, r3
 8008424:	460c      	mov	r4, r1
 8008426:	2001      	movs	r0, #1
 8008428:	e7a5      	b.n	8008376 <_vfiprintf_r+0x11a>
 800842a:	2300      	movs	r3, #0
 800842c:	3401      	adds	r4, #1
 800842e:	9305      	str	r3, [sp, #20]
 8008430:	4619      	mov	r1, r3
 8008432:	f04f 0c0a 	mov.w	ip, #10
 8008436:	4620      	mov	r0, r4
 8008438:	f810 2b01 	ldrb.w	r2, [r0], #1
 800843c:	3a30      	subs	r2, #48	; 0x30
 800843e:	2a09      	cmp	r2, #9
 8008440:	d903      	bls.n	800844a <_vfiprintf_r+0x1ee>
 8008442:	2b00      	cmp	r3, #0
 8008444:	d0c5      	beq.n	80083d2 <_vfiprintf_r+0x176>
 8008446:	9105      	str	r1, [sp, #20]
 8008448:	e7c3      	b.n	80083d2 <_vfiprintf_r+0x176>
 800844a:	fb0c 2101 	mla	r1, ip, r1, r2
 800844e:	4604      	mov	r4, r0
 8008450:	2301      	movs	r3, #1
 8008452:	e7f0      	b.n	8008436 <_vfiprintf_r+0x1da>
 8008454:	ab03      	add	r3, sp, #12
 8008456:	9300      	str	r3, [sp, #0]
 8008458:	462a      	mov	r2, r5
 800845a:	4b16      	ldr	r3, [pc, #88]	; (80084b4 <_vfiprintf_r+0x258>)
 800845c:	a904      	add	r1, sp, #16
 800845e:	4630      	mov	r0, r6
 8008460:	f7fd fe22 	bl	80060a8 <_printf_float>
 8008464:	4607      	mov	r7, r0
 8008466:	1c78      	adds	r0, r7, #1
 8008468:	d1d6      	bne.n	8008418 <_vfiprintf_r+0x1bc>
 800846a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800846c:	07d9      	lsls	r1, r3, #31
 800846e:	d405      	bmi.n	800847c <_vfiprintf_r+0x220>
 8008470:	89ab      	ldrh	r3, [r5, #12]
 8008472:	059a      	lsls	r2, r3, #22
 8008474:	d402      	bmi.n	800847c <_vfiprintf_r+0x220>
 8008476:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8008478:	f000 faaf 	bl	80089da <__retarget_lock_release_recursive>
 800847c:	89ab      	ldrh	r3, [r5, #12]
 800847e:	065b      	lsls	r3, r3, #25
 8008480:	f53f af12 	bmi.w	80082a8 <_vfiprintf_r+0x4c>
 8008484:	9809      	ldr	r0, [sp, #36]	; 0x24
 8008486:	e711      	b.n	80082ac <_vfiprintf_r+0x50>
 8008488:	ab03      	add	r3, sp, #12
 800848a:	9300      	str	r3, [sp, #0]
 800848c:	462a      	mov	r2, r5
 800848e:	4b09      	ldr	r3, [pc, #36]	; (80084b4 <_vfiprintf_r+0x258>)
 8008490:	a904      	add	r1, sp, #16
 8008492:	4630      	mov	r0, r6
 8008494:	f7fe f8ac 	bl	80065f0 <_printf_i>
 8008498:	e7e4      	b.n	8008464 <_vfiprintf_r+0x208>
 800849a:	bf00      	nop
 800849c:	0800914c 	.word	0x0800914c
 80084a0:	0800916c 	.word	0x0800916c
 80084a4:	0800912c 	.word	0x0800912c
 80084a8:	08008fd4 	.word	0x08008fd4
 80084ac:	08008fde 	.word	0x08008fde
 80084b0:	080060a9 	.word	0x080060a9
 80084b4:	08008237 	.word	0x08008237
 80084b8:	08008fda 	.word	0x08008fda

080084bc <__swbuf_r>:
 80084bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80084be:	460e      	mov	r6, r1
 80084c0:	4614      	mov	r4, r2
 80084c2:	4605      	mov	r5, r0
 80084c4:	b118      	cbz	r0, 80084ce <__swbuf_r+0x12>
 80084c6:	6983      	ldr	r3, [r0, #24]
 80084c8:	b90b      	cbnz	r3, 80084ce <__swbuf_r+0x12>
 80084ca:	f000 f9e7 	bl	800889c <__sinit>
 80084ce:	4b21      	ldr	r3, [pc, #132]	; (8008554 <__swbuf_r+0x98>)
 80084d0:	429c      	cmp	r4, r3
 80084d2:	d12b      	bne.n	800852c <__swbuf_r+0x70>
 80084d4:	686c      	ldr	r4, [r5, #4]
 80084d6:	69a3      	ldr	r3, [r4, #24]
 80084d8:	60a3      	str	r3, [r4, #8]
 80084da:	89a3      	ldrh	r3, [r4, #12]
 80084dc:	071a      	lsls	r2, r3, #28
 80084de:	d52f      	bpl.n	8008540 <__swbuf_r+0x84>
 80084e0:	6923      	ldr	r3, [r4, #16]
 80084e2:	b36b      	cbz	r3, 8008540 <__swbuf_r+0x84>
 80084e4:	6923      	ldr	r3, [r4, #16]
 80084e6:	6820      	ldr	r0, [r4, #0]
 80084e8:	1ac0      	subs	r0, r0, r3
 80084ea:	6963      	ldr	r3, [r4, #20]
 80084ec:	b2f6      	uxtb	r6, r6
 80084ee:	4283      	cmp	r3, r0
 80084f0:	4637      	mov	r7, r6
 80084f2:	dc04      	bgt.n	80084fe <__swbuf_r+0x42>
 80084f4:	4621      	mov	r1, r4
 80084f6:	4628      	mov	r0, r5
 80084f8:	f000 f93c 	bl	8008774 <_fflush_r>
 80084fc:	bb30      	cbnz	r0, 800854c <__swbuf_r+0x90>
 80084fe:	68a3      	ldr	r3, [r4, #8]
 8008500:	3b01      	subs	r3, #1
 8008502:	60a3      	str	r3, [r4, #8]
 8008504:	6823      	ldr	r3, [r4, #0]
 8008506:	1c5a      	adds	r2, r3, #1
 8008508:	6022      	str	r2, [r4, #0]
 800850a:	701e      	strb	r6, [r3, #0]
 800850c:	6963      	ldr	r3, [r4, #20]
 800850e:	3001      	adds	r0, #1
 8008510:	4283      	cmp	r3, r0
 8008512:	d004      	beq.n	800851e <__swbuf_r+0x62>
 8008514:	89a3      	ldrh	r3, [r4, #12]
 8008516:	07db      	lsls	r3, r3, #31
 8008518:	d506      	bpl.n	8008528 <__swbuf_r+0x6c>
 800851a:	2e0a      	cmp	r6, #10
 800851c:	d104      	bne.n	8008528 <__swbuf_r+0x6c>
 800851e:	4621      	mov	r1, r4
 8008520:	4628      	mov	r0, r5
 8008522:	f000 f927 	bl	8008774 <_fflush_r>
 8008526:	b988      	cbnz	r0, 800854c <__swbuf_r+0x90>
 8008528:	4638      	mov	r0, r7
 800852a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800852c:	4b0a      	ldr	r3, [pc, #40]	; (8008558 <__swbuf_r+0x9c>)
 800852e:	429c      	cmp	r4, r3
 8008530:	d101      	bne.n	8008536 <__swbuf_r+0x7a>
 8008532:	68ac      	ldr	r4, [r5, #8]
 8008534:	e7cf      	b.n	80084d6 <__swbuf_r+0x1a>
 8008536:	4b09      	ldr	r3, [pc, #36]	; (800855c <__swbuf_r+0xa0>)
 8008538:	429c      	cmp	r4, r3
 800853a:	bf08      	it	eq
 800853c:	68ec      	ldreq	r4, [r5, #12]
 800853e:	e7ca      	b.n	80084d6 <__swbuf_r+0x1a>
 8008540:	4621      	mov	r1, r4
 8008542:	4628      	mov	r0, r5
 8008544:	f000 f81a 	bl	800857c <__swsetup_r>
 8008548:	2800      	cmp	r0, #0
 800854a:	d0cb      	beq.n	80084e4 <__swbuf_r+0x28>
 800854c:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 8008550:	e7ea      	b.n	8008528 <__swbuf_r+0x6c>
 8008552:	bf00      	nop
 8008554:	0800914c 	.word	0x0800914c
 8008558:	0800916c 	.word	0x0800916c
 800855c:	0800912c 	.word	0x0800912c

08008560 <__ascii_wctomb>:
 8008560:	b149      	cbz	r1, 8008576 <__ascii_wctomb+0x16>
 8008562:	2aff      	cmp	r2, #255	; 0xff
 8008564:	bf85      	ittet	hi
 8008566:	238a      	movhi	r3, #138	; 0x8a
 8008568:	6003      	strhi	r3, [r0, #0]
 800856a:	700a      	strbls	r2, [r1, #0]
 800856c:	f04f 30ff 	movhi.w	r0, #4294967295	; 0xffffffff
 8008570:	bf98      	it	ls
 8008572:	2001      	movls	r0, #1
 8008574:	4770      	bx	lr
 8008576:	4608      	mov	r0, r1
 8008578:	4770      	bx	lr
	...

0800857c <__swsetup_r>:
 800857c:	4b32      	ldr	r3, [pc, #200]	; (8008648 <__swsetup_r+0xcc>)
 800857e:	b570      	push	{r4, r5, r6, lr}
 8008580:	681d      	ldr	r5, [r3, #0]
 8008582:	4606      	mov	r6, r0
 8008584:	460c      	mov	r4, r1
 8008586:	b125      	cbz	r5, 8008592 <__swsetup_r+0x16>
 8008588:	69ab      	ldr	r3, [r5, #24]
 800858a:	b913      	cbnz	r3, 8008592 <__swsetup_r+0x16>
 800858c:	4628      	mov	r0, r5
 800858e:	f000 f985 	bl	800889c <__sinit>
 8008592:	4b2e      	ldr	r3, [pc, #184]	; (800864c <__swsetup_r+0xd0>)
 8008594:	429c      	cmp	r4, r3
 8008596:	d10f      	bne.n	80085b8 <__swsetup_r+0x3c>
 8008598:	686c      	ldr	r4, [r5, #4]
 800859a:	89a3      	ldrh	r3, [r4, #12]
 800859c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80085a0:	0719      	lsls	r1, r3, #28
 80085a2:	d42c      	bmi.n	80085fe <__swsetup_r+0x82>
 80085a4:	06dd      	lsls	r5, r3, #27
 80085a6:	d411      	bmi.n	80085cc <__swsetup_r+0x50>
 80085a8:	2309      	movs	r3, #9
 80085aa:	6033      	str	r3, [r6, #0]
 80085ac:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 80085b0:	81a3      	strh	r3, [r4, #12]
 80085b2:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80085b6:	e03e      	b.n	8008636 <__swsetup_r+0xba>
 80085b8:	4b25      	ldr	r3, [pc, #148]	; (8008650 <__swsetup_r+0xd4>)
 80085ba:	429c      	cmp	r4, r3
 80085bc:	d101      	bne.n	80085c2 <__swsetup_r+0x46>
 80085be:	68ac      	ldr	r4, [r5, #8]
 80085c0:	e7eb      	b.n	800859a <__swsetup_r+0x1e>
 80085c2:	4b24      	ldr	r3, [pc, #144]	; (8008654 <__swsetup_r+0xd8>)
 80085c4:	429c      	cmp	r4, r3
 80085c6:	bf08      	it	eq
 80085c8:	68ec      	ldreq	r4, [r5, #12]
 80085ca:	e7e6      	b.n	800859a <__swsetup_r+0x1e>
 80085cc:	0758      	lsls	r0, r3, #29
 80085ce:	d512      	bpl.n	80085f6 <__swsetup_r+0x7a>
 80085d0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80085d2:	b141      	cbz	r1, 80085e6 <__swsetup_r+0x6a>
 80085d4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80085d8:	4299      	cmp	r1, r3
 80085da:	d002      	beq.n	80085e2 <__swsetup_r+0x66>
 80085dc:	4630      	mov	r0, r6
 80085de:	f7ff fb6f 	bl	8007cc0 <_free_r>
 80085e2:	2300      	movs	r3, #0
 80085e4:	6363      	str	r3, [r4, #52]	; 0x34
 80085e6:	89a3      	ldrh	r3, [r4, #12]
 80085e8:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80085ec:	81a3      	strh	r3, [r4, #12]
 80085ee:	2300      	movs	r3, #0
 80085f0:	6063      	str	r3, [r4, #4]
 80085f2:	6923      	ldr	r3, [r4, #16]
 80085f4:	6023      	str	r3, [r4, #0]
 80085f6:	89a3      	ldrh	r3, [r4, #12]
 80085f8:	f043 0308 	orr.w	r3, r3, #8
 80085fc:	81a3      	strh	r3, [r4, #12]
 80085fe:	6923      	ldr	r3, [r4, #16]
 8008600:	b94b      	cbnz	r3, 8008616 <__swsetup_r+0x9a>
 8008602:	89a3      	ldrh	r3, [r4, #12]
 8008604:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8008608:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800860c:	d003      	beq.n	8008616 <__swsetup_r+0x9a>
 800860e:	4621      	mov	r1, r4
 8008610:	4630      	mov	r0, r6
 8008612:	f000 fa07 	bl	8008a24 <__smakebuf_r>
 8008616:	89a0      	ldrh	r0, [r4, #12]
 8008618:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800861c:	f010 0301 	ands.w	r3, r0, #1
 8008620:	d00a      	beq.n	8008638 <__swsetup_r+0xbc>
 8008622:	2300      	movs	r3, #0
 8008624:	60a3      	str	r3, [r4, #8]
 8008626:	6963      	ldr	r3, [r4, #20]
 8008628:	425b      	negs	r3, r3
 800862a:	61a3      	str	r3, [r4, #24]
 800862c:	6923      	ldr	r3, [r4, #16]
 800862e:	b943      	cbnz	r3, 8008642 <__swsetup_r+0xc6>
 8008630:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8008634:	d1ba      	bne.n	80085ac <__swsetup_r+0x30>
 8008636:	bd70      	pop	{r4, r5, r6, pc}
 8008638:	0781      	lsls	r1, r0, #30
 800863a:	bf58      	it	pl
 800863c:	6963      	ldrpl	r3, [r4, #20]
 800863e:	60a3      	str	r3, [r4, #8]
 8008640:	e7f4      	b.n	800862c <__swsetup_r+0xb0>
 8008642:	2000      	movs	r0, #0
 8008644:	e7f7      	b.n	8008636 <__swsetup_r+0xba>
 8008646:	bf00      	nop
 8008648:	20000028 	.word	0x20000028
 800864c:	0800914c 	.word	0x0800914c
 8008650:	0800916c 	.word	0x0800916c
 8008654:	0800912c 	.word	0x0800912c

08008658 <abort>:
 8008658:	b508      	push	{r3, lr}
 800865a:	2006      	movs	r0, #6
 800865c:	f000 fa52 	bl	8008b04 <raise>
 8008660:	2001      	movs	r0, #1
 8008662:	f7f9 fe6d 	bl	8002340 <_exit>
	...

08008668 <__sflush_r>:
 8008668:	898a      	ldrh	r2, [r1, #12]
 800866a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800866e:	4605      	mov	r5, r0
 8008670:	0710      	lsls	r0, r2, #28
 8008672:	460c      	mov	r4, r1
 8008674:	d458      	bmi.n	8008728 <__sflush_r+0xc0>
 8008676:	684b      	ldr	r3, [r1, #4]
 8008678:	2b00      	cmp	r3, #0
 800867a:	dc05      	bgt.n	8008688 <__sflush_r+0x20>
 800867c:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800867e:	2b00      	cmp	r3, #0
 8008680:	dc02      	bgt.n	8008688 <__sflush_r+0x20>
 8008682:	2000      	movs	r0, #0
 8008684:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008688:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800868a:	2e00      	cmp	r6, #0
 800868c:	d0f9      	beq.n	8008682 <__sflush_r+0x1a>
 800868e:	2300      	movs	r3, #0
 8008690:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8008694:	682f      	ldr	r7, [r5, #0]
 8008696:	602b      	str	r3, [r5, #0]
 8008698:	d032      	beq.n	8008700 <__sflush_r+0x98>
 800869a:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800869c:	89a3      	ldrh	r3, [r4, #12]
 800869e:	075a      	lsls	r2, r3, #29
 80086a0:	d505      	bpl.n	80086ae <__sflush_r+0x46>
 80086a2:	6863      	ldr	r3, [r4, #4]
 80086a4:	1ac0      	subs	r0, r0, r3
 80086a6:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80086a8:	b10b      	cbz	r3, 80086ae <__sflush_r+0x46>
 80086aa:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80086ac:	1ac0      	subs	r0, r0, r3
 80086ae:	2300      	movs	r3, #0
 80086b0:	4602      	mov	r2, r0
 80086b2:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80086b4:	6a21      	ldr	r1, [r4, #32]
 80086b6:	4628      	mov	r0, r5
 80086b8:	47b0      	blx	r6
 80086ba:	1c43      	adds	r3, r0, #1
 80086bc:	89a3      	ldrh	r3, [r4, #12]
 80086be:	d106      	bne.n	80086ce <__sflush_r+0x66>
 80086c0:	6829      	ldr	r1, [r5, #0]
 80086c2:	291d      	cmp	r1, #29
 80086c4:	d82c      	bhi.n	8008720 <__sflush_r+0xb8>
 80086c6:	4a2a      	ldr	r2, [pc, #168]	; (8008770 <__sflush_r+0x108>)
 80086c8:	40ca      	lsrs	r2, r1
 80086ca:	07d6      	lsls	r6, r2, #31
 80086cc:	d528      	bpl.n	8008720 <__sflush_r+0xb8>
 80086ce:	2200      	movs	r2, #0
 80086d0:	6062      	str	r2, [r4, #4]
 80086d2:	04d9      	lsls	r1, r3, #19
 80086d4:	6922      	ldr	r2, [r4, #16]
 80086d6:	6022      	str	r2, [r4, #0]
 80086d8:	d504      	bpl.n	80086e4 <__sflush_r+0x7c>
 80086da:	1c42      	adds	r2, r0, #1
 80086dc:	d101      	bne.n	80086e2 <__sflush_r+0x7a>
 80086de:	682b      	ldr	r3, [r5, #0]
 80086e0:	b903      	cbnz	r3, 80086e4 <__sflush_r+0x7c>
 80086e2:	6560      	str	r0, [r4, #84]	; 0x54
 80086e4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80086e6:	602f      	str	r7, [r5, #0]
 80086e8:	2900      	cmp	r1, #0
 80086ea:	d0ca      	beq.n	8008682 <__sflush_r+0x1a>
 80086ec:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80086f0:	4299      	cmp	r1, r3
 80086f2:	d002      	beq.n	80086fa <__sflush_r+0x92>
 80086f4:	4628      	mov	r0, r5
 80086f6:	f7ff fae3 	bl	8007cc0 <_free_r>
 80086fa:	2000      	movs	r0, #0
 80086fc:	6360      	str	r0, [r4, #52]	; 0x34
 80086fe:	e7c1      	b.n	8008684 <__sflush_r+0x1c>
 8008700:	6a21      	ldr	r1, [r4, #32]
 8008702:	2301      	movs	r3, #1
 8008704:	4628      	mov	r0, r5
 8008706:	47b0      	blx	r6
 8008708:	1c41      	adds	r1, r0, #1
 800870a:	d1c7      	bne.n	800869c <__sflush_r+0x34>
 800870c:	682b      	ldr	r3, [r5, #0]
 800870e:	2b00      	cmp	r3, #0
 8008710:	d0c4      	beq.n	800869c <__sflush_r+0x34>
 8008712:	2b1d      	cmp	r3, #29
 8008714:	d001      	beq.n	800871a <__sflush_r+0xb2>
 8008716:	2b16      	cmp	r3, #22
 8008718:	d101      	bne.n	800871e <__sflush_r+0xb6>
 800871a:	602f      	str	r7, [r5, #0]
 800871c:	e7b1      	b.n	8008682 <__sflush_r+0x1a>
 800871e:	89a3      	ldrh	r3, [r4, #12]
 8008720:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008724:	81a3      	strh	r3, [r4, #12]
 8008726:	e7ad      	b.n	8008684 <__sflush_r+0x1c>
 8008728:	690f      	ldr	r7, [r1, #16]
 800872a:	2f00      	cmp	r7, #0
 800872c:	d0a9      	beq.n	8008682 <__sflush_r+0x1a>
 800872e:	0793      	lsls	r3, r2, #30
 8008730:	680e      	ldr	r6, [r1, #0]
 8008732:	bf08      	it	eq
 8008734:	694b      	ldreq	r3, [r1, #20]
 8008736:	600f      	str	r7, [r1, #0]
 8008738:	bf18      	it	ne
 800873a:	2300      	movne	r3, #0
 800873c:	eba6 0807 	sub.w	r8, r6, r7
 8008740:	608b      	str	r3, [r1, #8]
 8008742:	f1b8 0f00 	cmp.w	r8, #0
 8008746:	dd9c      	ble.n	8008682 <__sflush_r+0x1a>
 8008748:	6a21      	ldr	r1, [r4, #32]
 800874a:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800874c:	4643      	mov	r3, r8
 800874e:	463a      	mov	r2, r7
 8008750:	4628      	mov	r0, r5
 8008752:	47b0      	blx	r6
 8008754:	2800      	cmp	r0, #0
 8008756:	dc06      	bgt.n	8008766 <__sflush_r+0xfe>
 8008758:	89a3      	ldrh	r3, [r4, #12]
 800875a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800875e:	81a3      	strh	r3, [r4, #12]
 8008760:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8008764:	e78e      	b.n	8008684 <__sflush_r+0x1c>
 8008766:	4407      	add	r7, r0
 8008768:	eba8 0800 	sub.w	r8, r8, r0
 800876c:	e7e9      	b.n	8008742 <__sflush_r+0xda>
 800876e:	bf00      	nop
 8008770:	20400001 	.word	0x20400001

08008774 <_fflush_r>:
 8008774:	b538      	push	{r3, r4, r5, lr}
 8008776:	690b      	ldr	r3, [r1, #16]
 8008778:	4605      	mov	r5, r0
 800877a:	460c      	mov	r4, r1
 800877c:	b913      	cbnz	r3, 8008784 <_fflush_r+0x10>
 800877e:	2500      	movs	r5, #0
 8008780:	4628      	mov	r0, r5
 8008782:	bd38      	pop	{r3, r4, r5, pc}
 8008784:	b118      	cbz	r0, 800878e <_fflush_r+0x1a>
 8008786:	6983      	ldr	r3, [r0, #24]
 8008788:	b90b      	cbnz	r3, 800878e <_fflush_r+0x1a>
 800878a:	f000 f887 	bl	800889c <__sinit>
 800878e:	4b14      	ldr	r3, [pc, #80]	; (80087e0 <_fflush_r+0x6c>)
 8008790:	429c      	cmp	r4, r3
 8008792:	d11b      	bne.n	80087cc <_fflush_r+0x58>
 8008794:	686c      	ldr	r4, [r5, #4]
 8008796:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800879a:	2b00      	cmp	r3, #0
 800879c:	d0ef      	beq.n	800877e <_fflush_r+0xa>
 800879e:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80087a0:	07d0      	lsls	r0, r2, #31
 80087a2:	d404      	bmi.n	80087ae <_fflush_r+0x3a>
 80087a4:	0599      	lsls	r1, r3, #22
 80087a6:	d402      	bmi.n	80087ae <_fflush_r+0x3a>
 80087a8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80087aa:	f000 f915 	bl	80089d8 <__retarget_lock_acquire_recursive>
 80087ae:	4628      	mov	r0, r5
 80087b0:	4621      	mov	r1, r4
 80087b2:	f7ff ff59 	bl	8008668 <__sflush_r>
 80087b6:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80087b8:	07da      	lsls	r2, r3, #31
 80087ba:	4605      	mov	r5, r0
 80087bc:	d4e0      	bmi.n	8008780 <_fflush_r+0xc>
 80087be:	89a3      	ldrh	r3, [r4, #12]
 80087c0:	059b      	lsls	r3, r3, #22
 80087c2:	d4dd      	bmi.n	8008780 <_fflush_r+0xc>
 80087c4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80087c6:	f000 f908 	bl	80089da <__retarget_lock_release_recursive>
 80087ca:	e7d9      	b.n	8008780 <_fflush_r+0xc>
 80087cc:	4b05      	ldr	r3, [pc, #20]	; (80087e4 <_fflush_r+0x70>)
 80087ce:	429c      	cmp	r4, r3
 80087d0:	d101      	bne.n	80087d6 <_fflush_r+0x62>
 80087d2:	68ac      	ldr	r4, [r5, #8]
 80087d4:	e7df      	b.n	8008796 <_fflush_r+0x22>
 80087d6:	4b04      	ldr	r3, [pc, #16]	; (80087e8 <_fflush_r+0x74>)
 80087d8:	429c      	cmp	r4, r3
 80087da:	bf08      	it	eq
 80087dc:	68ec      	ldreq	r4, [r5, #12]
 80087de:	e7da      	b.n	8008796 <_fflush_r+0x22>
 80087e0:	0800914c 	.word	0x0800914c
 80087e4:	0800916c 	.word	0x0800916c
 80087e8:	0800912c 	.word	0x0800912c

080087ec <std>:
 80087ec:	2300      	movs	r3, #0
 80087ee:	b510      	push	{r4, lr}
 80087f0:	4604      	mov	r4, r0
 80087f2:	e9c0 3300 	strd	r3, r3, [r0]
 80087f6:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80087fa:	6083      	str	r3, [r0, #8]
 80087fc:	8181      	strh	r1, [r0, #12]
 80087fe:	6643      	str	r3, [r0, #100]	; 0x64
 8008800:	81c2      	strh	r2, [r0, #14]
 8008802:	6183      	str	r3, [r0, #24]
 8008804:	4619      	mov	r1, r3
 8008806:	2208      	movs	r2, #8
 8008808:	305c      	adds	r0, #92	; 0x5c
 800880a:	f7fd fba5 	bl	8005f58 <memset>
 800880e:	4b05      	ldr	r3, [pc, #20]	; (8008824 <std+0x38>)
 8008810:	6263      	str	r3, [r4, #36]	; 0x24
 8008812:	4b05      	ldr	r3, [pc, #20]	; (8008828 <std+0x3c>)
 8008814:	62a3      	str	r3, [r4, #40]	; 0x28
 8008816:	4b05      	ldr	r3, [pc, #20]	; (800882c <std+0x40>)
 8008818:	62e3      	str	r3, [r4, #44]	; 0x2c
 800881a:	4b05      	ldr	r3, [pc, #20]	; (8008830 <std+0x44>)
 800881c:	6224      	str	r4, [r4, #32]
 800881e:	6323      	str	r3, [r4, #48]	; 0x30
 8008820:	bd10      	pop	{r4, pc}
 8008822:	bf00      	nop
 8008824:	08008b3d 	.word	0x08008b3d
 8008828:	08008b5f 	.word	0x08008b5f
 800882c:	08008b97 	.word	0x08008b97
 8008830:	08008bbb 	.word	0x08008bbb

08008834 <_cleanup_r>:
 8008834:	4901      	ldr	r1, [pc, #4]	; (800883c <_cleanup_r+0x8>)
 8008836:	f000 b8af 	b.w	8008998 <_fwalk_reent>
 800883a:	bf00      	nop
 800883c:	08008775 	.word	0x08008775

08008840 <__sfmoreglue>:
 8008840:	b570      	push	{r4, r5, r6, lr}
 8008842:	1e4a      	subs	r2, r1, #1
 8008844:	2568      	movs	r5, #104	; 0x68
 8008846:	4355      	muls	r5, r2
 8008848:	460e      	mov	r6, r1
 800884a:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800884e:	f7ff fa87 	bl	8007d60 <_malloc_r>
 8008852:	4604      	mov	r4, r0
 8008854:	b140      	cbz	r0, 8008868 <__sfmoreglue+0x28>
 8008856:	2100      	movs	r1, #0
 8008858:	e9c0 1600 	strd	r1, r6, [r0]
 800885c:	300c      	adds	r0, #12
 800885e:	60a0      	str	r0, [r4, #8]
 8008860:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8008864:	f7fd fb78 	bl	8005f58 <memset>
 8008868:	4620      	mov	r0, r4
 800886a:	bd70      	pop	{r4, r5, r6, pc}

0800886c <__sfp_lock_acquire>:
 800886c:	4801      	ldr	r0, [pc, #4]	; (8008874 <__sfp_lock_acquire+0x8>)
 800886e:	f000 b8b3 	b.w	80089d8 <__retarget_lock_acquire_recursive>
 8008872:	bf00      	nop
 8008874:	20000558 	.word	0x20000558

08008878 <__sfp_lock_release>:
 8008878:	4801      	ldr	r0, [pc, #4]	; (8008880 <__sfp_lock_release+0x8>)
 800887a:	f000 b8ae 	b.w	80089da <__retarget_lock_release_recursive>
 800887e:	bf00      	nop
 8008880:	20000558 	.word	0x20000558

08008884 <__sinit_lock_acquire>:
 8008884:	4801      	ldr	r0, [pc, #4]	; (800888c <__sinit_lock_acquire+0x8>)
 8008886:	f000 b8a7 	b.w	80089d8 <__retarget_lock_acquire_recursive>
 800888a:	bf00      	nop
 800888c:	20000553 	.word	0x20000553

08008890 <__sinit_lock_release>:
 8008890:	4801      	ldr	r0, [pc, #4]	; (8008898 <__sinit_lock_release+0x8>)
 8008892:	f000 b8a2 	b.w	80089da <__retarget_lock_release_recursive>
 8008896:	bf00      	nop
 8008898:	20000553 	.word	0x20000553

0800889c <__sinit>:
 800889c:	b510      	push	{r4, lr}
 800889e:	4604      	mov	r4, r0
 80088a0:	f7ff fff0 	bl	8008884 <__sinit_lock_acquire>
 80088a4:	69a3      	ldr	r3, [r4, #24]
 80088a6:	b11b      	cbz	r3, 80088b0 <__sinit+0x14>
 80088a8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80088ac:	f7ff bff0 	b.w	8008890 <__sinit_lock_release>
 80088b0:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 80088b4:	6523      	str	r3, [r4, #80]	; 0x50
 80088b6:	4b13      	ldr	r3, [pc, #76]	; (8008904 <__sinit+0x68>)
 80088b8:	4a13      	ldr	r2, [pc, #76]	; (8008908 <__sinit+0x6c>)
 80088ba:	681b      	ldr	r3, [r3, #0]
 80088bc:	62a2      	str	r2, [r4, #40]	; 0x28
 80088be:	42a3      	cmp	r3, r4
 80088c0:	bf04      	itt	eq
 80088c2:	2301      	moveq	r3, #1
 80088c4:	61a3      	streq	r3, [r4, #24]
 80088c6:	4620      	mov	r0, r4
 80088c8:	f000 f820 	bl	800890c <__sfp>
 80088cc:	6060      	str	r0, [r4, #4]
 80088ce:	4620      	mov	r0, r4
 80088d0:	f000 f81c 	bl	800890c <__sfp>
 80088d4:	60a0      	str	r0, [r4, #8]
 80088d6:	4620      	mov	r0, r4
 80088d8:	f000 f818 	bl	800890c <__sfp>
 80088dc:	2200      	movs	r2, #0
 80088de:	60e0      	str	r0, [r4, #12]
 80088e0:	2104      	movs	r1, #4
 80088e2:	6860      	ldr	r0, [r4, #4]
 80088e4:	f7ff ff82 	bl	80087ec <std>
 80088e8:	68a0      	ldr	r0, [r4, #8]
 80088ea:	2201      	movs	r2, #1
 80088ec:	2109      	movs	r1, #9
 80088ee:	f7ff ff7d 	bl	80087ec <std>
 80088f2:	68e0      	ldr	r0, [r4, #12]
 80088f4:	2202      	movs	r2, #2
 80088f6:	2112      	movs	r1, #18
 80088f8:	f7ff ff78 	bl	80087ec <std>
 80088fc:	2301      	movs	r3, #1
 80088fe:	61a3      	str	r3, [r4, #24]
 8008900:	e7d2      	b.n	80088a8 <__sinit+0xc>
 8008902:	bf00      	nop
 8008904:	08008dac 	.word	0x08008dac
 8008908:	08008835 	.word	0x08008835

0800890c <__sfp>:
 800890c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800890e:	4607      	mov	r7, r0
 8008910:	f7ff ffac 	bl	800886c <__sfp_lock_acquire>
 8008914:	4b1e      	ldr	r3, [pc, #120]	; (8008990 <__sfp+0x84>)
 8008916:	681e      	ldr	r6, [r3, #0]
 8008918:	69b3      	ldr	r3, [r6, #24]
 800891a:	b913      	cbnz	r3, 8008922 <__sfp+0x16>
 800891c:	4630      	mov	r0, r6
 800891e:	f7ff ffbd 	bl	800889c <__sinit>
 8008922:	3648      	adds	r6, #72	; 0x48
 8008924:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8008928:	3b01      	subs	r3, #1
 800892a:	d503      	bpl.n	8008934 <__sfp+0x28>
 800892c:	6833      	ldr	r3, [r6, #0]
 800892e:	b30b      	cbz	r3, 8008974 <__sfp+0x68>
 8008930:	6836      	ldr	r6, [r6, #0]
 8008932:	e7f7      	b.n	8008924 <__sfp+0x18>
 8008934:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8008938:	b9d5      	cbnz	r5, 8008970 <__sfp+0x64>
 800893a:	4b16      	ldr	r3, [pc, #88]	; (8008994 <__sfp+0x88>)
 800893c:	60e3      	str	r3, [r4, #12]
 800893e:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8008942:	6665      	str	r5, [r4, #100]	; 0x64
 8008944:	f000 f847 	bl	80089d6 <__retarget_lock_init_recursive>
 8008948:	f7ff ff96 	bl	8008878 <__sfp_lock_release>
 800894c:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8008950:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8008954:	6025      	str	r5, [r4, #0]
 8008956:	61a5      	str	r5, [r4, #24]
 8008958:	2208      	movs	r2, #8
 800895a:	4629      	mov	r1, r5
 800895c:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8008960:	f7fd fafa 	bl	8005f58 <memset>
 8008964:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8008968:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800896c:	4620      	mov	r0, r4
 800896e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008970:	3468      	adds	r4, #104	; 0x68
 8008972:	e7d9      	b.n	8008928 <__sfp+0x1c>
 8008974:	2104      	movs	r1, #4
 8008976:	4638      	mov	r0, r7
 8008978:	f7ff ff62 	bl	8008840 <__sfmoreglue>
 800897c:	4604      	mov	r4, r0
 800897e:	6030      	str	r0, [r6, #0]
 8008980:	2800      	cmp	r0, #0
 8008982:	d1d5      	bne.n	8008930 <__sfp+0x24>
 8008984:	f7ff ff78 	bl	8008878 <__sfp_lock_release>
 8008988:	230c      	movs	r3, #12
 800898a:	603b      	str	r3, [r7, #0]
 800898c:	e7ee      	b.n	800896c <__sfp+0x60>
 800898e:	bf00      	nop
 8008990:	08008dac 	.word	0x08008dac
 8008994:	ffff0001 	.word	0xffff0001

08008998 <_fwalk_reent>:
 8008998:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800899c:	4606      	mov	r6, r0
 800899e:	4688      	mov	r8, r1
 80089a0:	f100 0448 	add.w	r4, r0, #72	; 0x48
 80089a4:	2700      	movs	r7, #0
 80089a6:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80089aa:	f1b9 0901 	subs.w	r9, r9, #1
 80089ae:	d505      	bpl.n	80089bc <_fwalk_reent+0x24>
 80089b0:	6824      	ldr	r4, [r4, #0]
 80089b2:	2c00      	cmp	r4, #0
 80089b4:	d1f7      	bne.n	80089a6 <_fwalk_reent+0xe>
 80089b6:	4638      	mov	r0, r7
 80089b8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80089bc:	89ab      	ldrh	r3, [r5, #12]
 80089be:	2b01      	cmp	r3, #1
 80089c0:	d907      	bls.n	80089d2 <_fwalk_reent+0x3a>
 80089c2:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80089c6:	3301      	adds	r3, #1
 80089c8:	d003      	beq.n	80089d2 <_fwalk_reent+0x3a>
 80089ca:	4629      	mov	r1, r5
 80089cc:	4630      	mov	r0, r6
 80089ce:	47c0      	blx	r8
 80089d0:	4307      	orrs	r7, r0
 80089d2:	3568      	adds	r5, #104	; 0x68
 80089d4:	e7e9      	b.n	80089aa <_fwalk_reent+0x12>

080089d6 <__retarget_lock_init_recursive>:
 80089d6:	4770      	bx	lr

080089d8 <__retarget_lock_acquire_recursive>:
 80089d8:	4770      	bx	lr

080089da <__retarget_lock_release_recursive>:
 80089da:	4770      	bx	lr

080089dc <__swhatbuf_r>:
 80089dc:	b570      	push	{r4, r5, r6, lr}
 80089de:	460e      	mov	r6, r1
 80089e0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80089e4:	2900      	cmp	r1, #0
 80089e6:	b096      	sub	sp, #88	; 0x58
 80089e8:	4614      	mov	r4, r2
 80089ea:	461d      	mov	r5, r3
 80089ec:	da07      	bge.n	80089fe <__swhatbuf_r+0x22>
 80089ee:	2300      	movs	r3, #0
 80089f0:	602b      	str	r3, [r5, #0]
 80089f2:	89b3      	ldrh	r3, [r6, #12]
 80089f4:	061a      	lsls	r2, r3, #24
 80089f6:	d410      	bmi.n	8008a1a <__swhatbuf_r+0x3e>
 80089f8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80089fc:	e00e      	b.n	8008a1c <__swhatbuf_r+0x40>
 80089fe:	466a      	mov	r2, sp
 8008a00:	f000 f902 	bl	8008c08 <_fstat_r>
 8008a04:	2800      	cmp	r0, #0
 8008a06:	dbf2      	blt.n	80089ee <__swhatbuf_r+0x12>
 8008a08:	9a01      	ldr	r2, [sp, #4]
 8008a0a:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8008a0e:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8008a12:	425a      	negs	r2, r3
 8008a14:	415a      	adcs	r2, r3
 8008a16:	602a      	str	r2, [r5, #0]
 8008a18:	e7ee      	b.n	80089f8 <__swhatbuf_r+0x1c>
 8008a1a:	2340      	movs	r3, #64	; 0x40
 8008a1c:	2000      	movs	r0, #0
 8008a1e:	6023      	str	r3, [r4, #0]
 8008a20:	b016      	add	sp, #88	; 0x58
 8008a22:	bd70      	pop	{r4, r5, r6, pc}

08008a24 <__smakebuf_r>:
 8008a24:	898b      	ldrh	r3, [r1, #12]
 8008a26:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8008a28:	079d      	lsls	r5, r3, #30
 8008a2a:	4606      	mov	r6, r0
 8008a2c:	460c      	mov	r4, r1
 8008a2e:	d507      	bpl.n	8008a40 <__smakebuf_r+0x1c>
 8008a30:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8008a34:	6023      	str	r3, [r4, #0]
 8008a36:	6123      	str	r3, [r4, #16]
 8008a38:	2301      	movs	r3, #1
 8008a3a:	6163      	str	r3, [r4, #20]
 8008a3c:	b002      	add	sp, #8
 8008a3e:	bd70      	pop	{r4, r5, r6, pc}
 8008a40:	ab01      	add	r3, sp, #4
 8008a42:	466a      	mov	r2, sp
 8008a44:	f7ff ffca 	bl	80089dc <__swhatbuf_r>
 8008a48:	9900      	ldr	r1, [sp, #0]
 8008a4a:	4605      	mov	r5, r0
 8008a4c:	4630      	mov	r0, r6
 8008a4e:	f7ff f987 	bl	8007d60 <_malloc_r>
 8008a52:	b948      	cbnz	r0, 8008a68 <__smakebuf_r+0x44>
 8008a54:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008a58:	059a      	lsls	r2, r3, #22
 8008a5a:	d4ef      	bmi.n	8008a3c <__smakebuf_r+0x18>
 8008a5c:	f023 0303 	bic.w	r3, r3, #3
 8008a60:	f043 0302 	orr.w	r3, r3, #2
 8008a64:	81a3      	strh	r3, [r4, #12]
 8008a66:	e7e3      	b.n	8008a30 <__smakebuf_r+0xc>
 8008a68:	4b0d      	ldr	r3, [pc, #52]	; (8008aa0 <__smakebuf_r+0x7c>)
 8008a6a:	62b3      	str	r3, [r6, #40]	; 0x28
 8008a6c:	89a3      	ldrh	r3, [r4, #12]
 8008a6e:	6020      	str	r0, [r4, #0]
 8008a70:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008a74:	81a3      	strh	r3, [r4, #12]
 8008a76:	9b00      	ldr	r3, [sp, #0]
 8008a78:	6163      	str	r3, [r4, #20]
 8008a7a:	9b01      	ldr	r3, [sp, #4]
 8008a7c:	6120      	str	r0, [r4, #16]
 8008a7e:	b15b      	cbz	r3, 8008a98 <__smakebuf_r+0x74>
 8008a80:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8008a84:	4630      	mov	r0, r6
 8008a86:	f000 f8d1 	bl	8008c2c <_isatty_r>
 8008a8a:	b128      	cbz	r0, 8008a98 <__smakebuf_r+0x74>
 8008a8c:	89a3      	ldrh	r3, [r4, #12]
 8008a8e:	f023 0303 	bic.w	r3, r3, #3
 8008a92:	f043 0301 	orr.w	r3, r3, #1
 8008a96:	81a3      	strh	r3, [r4, #12]
 8008a98:	89a0      	ldrh	r0, [r4, #12]
 8008a9a:	4305      	orrs	r5, r0
 8008a9c:	81a5      	strh	r5, [r4, #12]
 8008a9e:	e7cd      	b.n	8008a3c <__smakebuf_r+0x18>
 8008aa0:	08008835 	.word	0x08008835

08008aa4 <_malloc_usable_size_r>:
 8008aa4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008aa8:	1f18      	subs	r0, r3, #4
 8008aaa:	2b00      	cmp	r3, #0
 8008aac:	bfbc      	itt	lt
 8008aae:	580b      	ldrlt	r3, [r1, r0]
 8008ab0:	18c0      	addlt	r0, r0, r3
 8008ab2:	4770      	bx	lr

08008ab4 <_raise_r>:
 8008ab4:	291f      	cmp	r1, #31
 8008ab6:	b538      	push	{r3, r4, r5, lr}
 8008ab8:	4604      	mov	r4, r0
 8008aba:	460d      	mov	r5, r1
 8008abc:	d904      	bls.n	8008ac8 <_raise_r+0x14>
 8008abe:	2316      	movs	r3, #22
 8008ac0:	6003      	str	r3, [r0, #0]
 8008ac2:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8008ac6:	bd38      	pop	{r3, r4, r5, pc}
 8008ac8:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8008aca:	b112      	cbz	r2, 8008ad2 <_raise_r+0x1e>
 8008acc:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8008ad0:	b94b      	cbnz	r3, 8008ae6 <_raise_r+0x32>
 8008ad2:	4620      	mov	r0, r4
 8008ad4:	f000 f830 	bl	8008b38 <_getpid_r>
 8008ad8:	462a      	mov	r2, r5
 8008ada:	4601      	mov	r1, r0
 8008adc:	4620      	mov	r0, r4
 8008ade:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8008ae2:	f000 b817 	b.w	8008b14 <_kill_r>
 8008ae6:	2b01      	cmp	r3, #1
 8008ae8:	d00a      	beq.n	8008b00 <_raise_r+0x4c>
 8008aea:	1c59      	adds	r1, r3, #1
 8008aec:	d103      	bne.n	8008af6 <_raise_r+0x42>
 8008aee:	2316      	movs	r3, #22
 8008af0:	6003      	str	r3, [r0, #0]
 8008af2:	2001      	movs	r0, #1
 8008af4:	e7e7      	b.n	8008ac6 <_raise_r+0x12>
 8008af6:	2400      	movs	r4, #0
 8008af8:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8008afc:	4628      	mov	r0, r5
 8008afe:	4798      	blx	r3
 8008b00:	2000      	movs	r0, #0
 8008b02:	e7e0      	b.n	8008ac6 <_raise_r+0x12>

08008b04 <raise>:
 8008b04:	4b02      	ldr	r3, [pc, #8]	; (8008b10 <raise+0xc>)
 8008b06:	4601      	mov	r1, r0
 8008b08:	6818      	ldr	r0, [r3, #0]
 8008b0a:	f7ff bfd3 	b.w	8008ab4 <_raise_r>
 8008b0e:	bf00      	nop
 8008b10:	20000028 	.word	0x20000028

08008b14 <_kill_r>:
 8008b14:	b538      	push	{r3, r4, r5, lr}
 8008b16:	4d07      	ldr	r5, [pc, #28]	; (8008b34 <_kill_r+0x20>)
 8008b18:	2300      	movs	r3, #0
 8008b1a:	4604      	mov	r4, r0
 8008b1c:	4608      	mov	r0, r1
 8008b1e:	4611      	mov	r1, r2
 8008b20:	602b      	str	r3, [r5, #0]
 8008b22:	f7f9 fbfd 	bl	8002320 <_kill>
 8008b26:	1c43      	adds	r3, r0, #1
 8008b28:	d102      	bne.n	8008b30 <_kill_r+0x1c>
 8008b2a:	682b      	ldr	r3, [r5, #0]
 8008b2c:	b103      	cbz	r3, 8008b30 <_kill_r+0x1c>
 8008b2e:	6023      	str	r3, [r4, #0]
 8008b30:	bd38      	pop	{r3, r4, r5, pc}
 8008b32:	bf00      	nop
 8008b34:	2000054c 	.word	0x2000054c

08008b38 <_getpid_r>:
 8008b38:	f7f9 bbea 	b.w	8002310 <_getpid>

08008b3c <__sread>:
 8008b3c:	b510      	push	{r4, lr}
 8008b3e:	460c      	mov	r4, r1
 8008b40:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008b44:	f000 f894 	bl	8008c70 <_read_r>
 8008b48:	2800      	cmp	r0, #0
 8008b4a:	bfab      	itete	ge
 8008b4c:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8008b4e:	89a3      	ldrhlt	r3, [r4, #12]
 8008b50:	181b      	addge	r3, r3, r0
 8008b52:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8008b56:	bfac      	ite	ge
 8008b58:	6563      	strge	r3, [r4, #84]	; 0x54
 8008b5a:	81a3      	strhlt	r3, [r4, #12]
 8008b5c:	bd10      	pop	{r4, pc}

08008b5e <__swrite>:
 8008b5e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008b62:	461f      	mov	r7, r3
 8008b64:	898b      	ldrh	r3, [r1, #12]
 8008b66:	05db      	lsls	r3, r3, #23
 8008b68:	4605      	mov	r5, r0
 8008b6a:	460c      	mov	r4, r1
 8008b6c:	4616      	mov	r6, r2
 8008b6e:	d505      	bpl.n	8008b7c <__swrite+0x1e>
 8008b70:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008b74:	2302      	movs	r3, #2
 8008b76:	2200      	movs	r2, #0
 8008b78:	f000 f868 	bl	8008c4c <_lseek_r>
 8008b7c:	89a3      	ldrh	r3, [r4, #12]
 8008b7e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8008b82:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8008b86:	81a3      	strh	r3, [r4, #12]
 8008b88:	4632      	mov	r2, r6
 8008b8a:	463b      	mov	r3, r7
 8008b8c:	4628      	mov	r0, r5
 8008b8e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8008b92:	f000 b817 	b.w	8008bc4 <_write_r>

08008b96 <__sseek>:
 8008b96:	b510      	push	{r4, lr}
 8008b98:	460c      	mov	r4, r1
 8008b9a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008b9e:	f000 f855 	bl	8008c4c <_lseek_r>
 8008ba2:	1c43      	adds	r3, r0, #1
 8008ba4:	89a3      	ldrh	r3, [r4, #12]
 8008ba6:	bf15      	itete	ne
 8008ba8:	6560      	strne	r0, [r4, #84]	; 0x54
 8008baa:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8008bae:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8008bb2:	81a3      	strheq	r3, [r4, #12]
 8008bb4:	bf18      	it	ne
 8008bb6:	81a3      	strhne	r3, [r4, #12]
 8008bb8:	bd10      	pop	{r4, pc}

08008bba <__sclose>:
 8008bba:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008bbe:	f000 b813 	b.w	8008be8 <_close_r>
	...

08008bc4 <_write_r>:
 8008bc4:	b538      	push	{r3, r4, r5, lr}
 8008bc6:	4d07      	ldr	r5, [pc, #28]	; (8008be4 <_write_r+0x20>)
 8008bc8:	4604      	mov	r4, r0
 8008bca:	4608      	mov	r0, r1
 8008bcc:	4611      	mov	r1, r2
 8008bce:	2200      	movs	r2, #0
 8008bd0:	602a      	str	r2, [r5, #0]
 8008bd2:	461a      	mov	r2, r3
 8008bd4:	f7f9 fbdb 	bl	800238e <_write>
 8008bd8:	1c43      	adds	r3, r0, #1
 8008bda:	d102      	bne.n	8008be2 <_write_r+0x1e>
 8008bdc:	682b      	ldr	r3, [r5, #0]
 8008bde:	b103      	cbz	r3, 8008be2 <_write_r+0x1e>
 8008be0:	6023      	str	r3, [r4, #0]
 8008be2:	bd38      	pop	{r3, r4, r5, pc}
 8008be4:	2000054c 	.word	0x2000054c

08008be8 <_close_r>:
 8008be8:	b538      	push	{r3, r4, r5, lr}
 8008bea:	4d06      	ldr	r5, [pc, #24]	; (8008c04 <_close_r+0x1c>)
 8008bec:	2300      	movs	r3, #0
 8008bee:	4604      	mov	r4, r0
 8008bf0:	4608      	mov	r0, r1
 8008bf2:	602b      	str	r3, [r5, #0]
 8008bf4:	f7f9 fbe7 	bl	80023c6 <_close>
 8008bf8:	1c43      	adds	r3, r0, #1
 8008bfa:	d102      	bne.n	8008c02 <_close_r+0x1a>
 8008bfc:	682b      	ldr	r3, [r5, #0]
 8008bfe:	b103      	cbz	r3, 8008c02 <_close_r+0x1a>
 8008c00:	6023      	str	r3, [r4, #0]
 8008c02:	bd38      	pop	{r3, r4, r5, pc}
 8008c04:	2000054c 	.word	0x2000054c

08008c08 <_fstat_r>:
 8008c08:	b538      	push	{r3, r4, r5, lr}
 8008c0a:	4d07      	ldr	r5, [pc, #28]	; (8008c28 <_fstat_r+0x20>)
 8008c0c:	2300      	movs	r3, #0
 8008c0e:	4604      	mov	r4, r0
 8008c10:	4608      	mov	r0, r1
 8008c12:	4611      	mov	r1, r2
 8008c14:	602b      	str	r3, [r5, #0]
 8008c16:	f7f9 fbe2 	bl	80023de <_fstat>
 8008c1a:	1c43      	adds	r3, r0, #1
 8008c1c:	d102      	bne.n	8008c24 <_fstat_r+0x1c>
 8008c1e:	682b      	ldr	r3, [r5, #0]
 8008c20:	b103      	cbz	r3, 8008c24 <_fstat_r+0x1c>
 8008c22:	6023      	str	r3, [r4, #0]
 8008c24:	bd38      	pop	{r3, r4, r5, pc}
 8008c26:	bf00      	nop
 8008c28:	2000054c 	.word	0x2000054c

08008c2c <_isatty_r>:
 8008c2c:	b538      	push	{r3, r4, r5, lr}
 8008c2e:	4d06      	ldr	r5, [pc, #24]	; (8008c48 <_isatty_r+0x1c>)
 8008c30:	2300      	movs	r3, #0
 8008c32:	4604      	mov	r4, r0
 8008c34:	4608      	mov	r0, r1
 8008c36:	602b      	str	r3, [r5, #0]
 8008c38:	f7f9 fbe1 	bl	80023fe <_isatty>
 8008c3c:	1c43      	adds	r3, r0, #1
 8008c3e:	d102      	bne.n	8008c46 <_isatty_r+0x1a>
 8008c40:	682b      	ldr	r3, [r5, #0]
 8008c42:	b103      	cbz	r3, 8008c46 <_isatty_r+0x1a>
 8008c44:	6023      	str	r3, [r4, #0]
 8008c46:	bd38      	pop	{r3, r4, r5, pc}
 8008c48:	2000054c 	.word	0x2000054c

08008c4c <_lseek_r>:
 8008c4c:	b538      	push	{r3, r4, r5, lr}
 8008c4e:	4d07      	ldr	r5, [pc, #28]	; (8008c6c <_lseek_r+0x20>)
 8008c50:	4604      	mov	r4, r0
 8008c52:	4608      	mov	r0, r1
 8008c54:	4611      	mov	r1, r2
 8008c56:	2200      	movs	r2, #0
 8008c58:	602a      	str	r2, [r5, #0]
 8008c5a:	461a      	mov	r2, r3
 8008c5c:	f7f9 fbda 	bl	8002414 <_lseek>
 8008c60:	1c43      	adds	r3, r0, #1
 8008c62:	d102      	bne.n	8008c6a <_lseek_r+0x1e>
 8008c64:	682b      	ldr	r3, [r5, #0]
 8008c66:	b103      	cbz	r3, 8008c6a <_lseek_r+0x1e>
 8008c68:	6023      	str	r3, [r4, #0]
 8008c6a:	bd38      	pop	{r3, r4, r5, pc}
 8008c6c:	2000054c 	.word	0x2000054c

08008c70 <_read_r>:
 8008c70:	b538      	push	{r3, r4, r5, lr}
 8008c72:	4d07      	ldr	r5, [pc, #28]	; (8008c90 <_read_r+0x20>)
 8008c74:	4604      	mov	r4, r0
 8008c76:	4608      	mov	r0, r1
 8008c78:	4611      	mov	r1, r2
 8008c7a:	2200      	movs	r2, #0
 8008c7c:	602a      	str	r2, [r5, #0]
 8008c7e:	461a      	mov	r2, r3
 8008c80:	f7f9 fb68 	bl	8002354 <_read>
 8008c84:	1c43      	adds	r3, r0, #1
 8008c86:	d102      	bne.n	8008c8e <_read_r+0x1e>
 8008c88:	682b      	ldr	r3, [r5, #0]
 8008c8a:	b103      	cbz	r3, 8008c8e <_read_r+0x1e>
 8008c8c:	6023      	str	r3, [r4, #0]
 8008c8e:	bd38      	pop	{r3, r4, r5, pc}
 8008c90:	2000054c 	.word	0x2000054c

08008c94 <_init>:
 8008c94:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008c96:	bf00      	nop
 8008c98:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008c9a:	bc08      	pop	{r3}
 8008c9c:	469e      	mov	lr, r3
 8008c9e:	4770      	bx	lr

08008ca0 <_fini>:
 8008ca0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008ca2:	bf00      	nop
 8008ca4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008ca6:	bc08      	pop	{r3}
 8008ca8:	469e      	mov	lr, r3
 8008caa:	4770      	bx	lr
